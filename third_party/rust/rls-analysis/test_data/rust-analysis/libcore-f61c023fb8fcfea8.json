{"config":{"output_file":null,"full_docs":false,"pub_only":true,"distro_crate":true,"signatures":false,"borrow_data":false,"reachable_only":false},"prelude":{"crate_id":{"name":"core","disambiguator":[2034893687031163843,15475795989519470532]},"crate_root":"src/libcore","external_crates":[],"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":467,"byte_end":6066,"line_start":11,"line_end":191,"column_start":1,"column_end":11}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":175},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":172480,"byte_end":172485,"line_start":350,"line_end":350,"column_start":29,"column_end":34},"name":"isize","value":""},{"kind":"Use","ref_id":{"krate":0,"index":174},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":172634,"byte_end":172639,"line_start":356,"line_end":356,"column_start":29,"column_end":34},"name":"usize","value":""},{"kind":"Use","ref_id":{"krate":0,"index":5561},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,110,117,109,46,114,115],"byte_start":307613,"byte_end":307616,"line_start":17,"line_end":17,"column_start":34,"column_end":37},"name":"Big","value":""},{"kind":"Use","ref_id":{"krate":0,"index":5527},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":155933,"byte_end":155948,"line_start":2854,"line_end":2854,"column_start":23,"column_end":38},"name":"ParseFloatError","value":""},{"kind":"Use","ref_id":{"krate":0,"index":602},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":353003,"byte_end":353007,"line_start":30,"line_end":30,"column_start":14,"column_end":18},"name":"drop","value":""},{"kind":"Use","ref_id":{"krate":0,"index":1191},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":353127,"byte_end":353132,"line_start":35,"line_end":35,"column_start":16,"column_end":21},"name":"Clone","value":""},{"kind":"Use","ref_id":{"krate":0,"index":1197},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":353456,"byte_end":353463,"line_start":44,"line_end":44,"column_start":18,"column_end":25},"name":"Default","value":""},{"kind":"Use","ref_id":{"krate":0,"index":2378},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":354076,"byte_end":354084,"line_start":61,"line_end":61,"column_start":16,"column_end":24},"name":"SliceExt","value":""},{"kind":"Use","ref_id":{"krate":0,"index":3085},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":354170,"byte_end":354176,"line_start":64,"line_end":64,"column_start":14,"column_end":20},"name":"StrExt","value":""},{"kind":"Use","ref_id":{"krate":0,"index":1535},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":354263,"byte_end":354270,"line_start":67,"line_end":67,"column_start":15,"column_end":22},"name":"CharExt","value":""},{"kind":"Use","ref_id":{"krate":0,"index":683},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":356441,"byte_end":356454,"line_start":52,"line_end":52,"column_start":14,"column_end":27},"name":"drop_in_place","value":""},{"kind":"Use","ref_id":{"krate":0,"index":2147483940},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":422712,"byte_end":422721,"line_start":28,"line_end":28,"column_start":21,"column_end":30},"name":"transmute","value":""},{"kind":"Use","ref_id":{"krate":0,"index":2147483949},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":460062,"byte_end":460081,"line_start":31,"line_end":31,"column_start":21,"column_end":40},"name":"copy_nonoverlapping","value":""},{"kind":"Use","ref_id":{"krate":0,"index":2147483951},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":460150,"byte_end":460154,"line_start":34,"line_end":34,"column_start":21,"column_end":25},"name":"copy","value":""},{"kind":"Use","ref_id":{"krate":0,"index":2147483953},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":460223,"byte_end":460234,"line_start":37,"line_end":37,"column_start":21,"column_end":32},"name":"write_bytes","value":""},{"kind":"Use","ref_id":{"krate":0,"index":943},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":572996,"byte_end":573000,"line_start":183,"line_end":183,"column_start":21,"column_end":25},"name":"Drop","value":""},{"kind":"Use","ref_id":{"krate":0,"index":1021},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":573517,"byte_end":573520,"line_start":198,"line_end":198,"column_start":20,"column_end":23},"name":"Try","value":""},{"kind":"Use","ref_id":{"krate":0,"index":1029},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":573845,"byte_end":573858,"line_start":207,"line_end":207,"column_start":23,"column_end":36},"name":"CoerceUnsized","value":""},{"kind":"Use","ref_id":{"krate":0,"index":1657},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":902140,"byte_end":902148,"line_start":311,"line_end":311,"column_start":25,"column_end":33},"name":"Iterator","value":""},{"kind":"Use","ref_id":{"krate":0,"index":1727},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":902305,"byte_end":902309,"line_start":316,"line_end":316,"column_start":22,"column_end":26},"name":"Step","value":""},{"kind":"Use","ref_id":{"krate":0,"index":1858},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":902877,"byte_end":902890,"line_start":330,"line_end":330,"column_start":23,"column_end":36},"name":"FusedIterator","value":""},{"kind":"Use","ref_id":{"krate":0,"index":1860},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":902968,"byte_end":902978,"line_start":332,"line_end":332,"column_start":23,"column_end":33},"name":"TrustedLen","value":""},{"kind":"Use","ref_id":{"krate":0,"index":17510},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1396671,"byte_end":1396680,"line_start":100,"line_end":100,"column_start":20,"column_end":29},"name":"SipHasher","value":""}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":467,"byte_end":6066,"line_start":11,"line_end":191,"column_start":1,"column_end":11},"name":"","qualname":"::","value":"src/libcore/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":16},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":91},{"krate":0,"index":146},{"krate":0,"index":528},{"krate":0,"index":571},{"krate":0,"index":575},{"krate":0,"index":647},{"krate":0,"index":664},{"krate":0,"index":810},{"krate":0,"index":839},{"krate":0,"index":1095},{"krate":0,"index":1190},{"krate":0,"index":1196},{"krate":0,"index":1200},{"krate":0,"index":1240},{"krate":0,"index":1255},{"krate":0,"index":1276},{"krate":0,"index":1299},{"krate":0,"index":1358},{"krate":0,"index":1496},{"krate":0,"index":1593},{"krate":0,"index":1599},{"krate":0,"index":2116},{"krate":0,"index":2220},{"krate":0,"index":2221},{"krate":0,"index":2308},{"krate":0,"index":2746},{"krate":0,"index":3172},{"krate":0,"index":3297},{"krate":0,"index":3542},{"krate":0,"index":3551},{"krate":0,"index":3555}],"decl_id":null,"docs":" # The Rust Core Library","sig":null,"attributes":[{"value":"stable(feature = \"core\", since = \"1.6.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":2683,"byte_end":2728,"line_start":54,"line_end":54,"column_start":1,"column_end":46}},{"value":"no_core","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3214,"byte_end":3225,"line_start":63,"line_end":63,"column_start":1,"column_end":12}},{"value":"deny(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3226,"byte_end":3248,"line_start":64,"line_end":64,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3249,"byte_end":3288,"line_start":65,"line_end":65,"column_start":1,"column_end":40}},{"value":"deny(warnings)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3289,"byte_end":3307,"line_start":66,"line_end":66,"column_start":1,"column_end":19}},{"value":"feature(allow_internal_unstable)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3309,"byte_end":3345,"line_start":68,"line_end":68,"column_start":1,"column_end":37}},{"value":"feature(asm)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3346,"byte_end":3362,"line_start":69,"line_end":69,"column_start":1,"column_end":17}},{"value":"feature(associated_type_defaults)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3363,"byte_end":3400,"line_start":70,"line_end":70,"column_start":1,"column_end":38}},{"value":"feature(cfg_target_feature)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3401,"byte_end":3432,"line_start":71,"line_end":71,"column_start":1,"column_end":32}},{"value":"feature(cfg_target_has_atomic)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3433,"byte_end":3467,"line_start":72,"line_end":72,"column_start":1,"column_end":35}},{"value":"feature(concat_idents)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3468,"byte_end":3494,"line_start":73,"line_end":73,"column_start":1,"column_end":27}},{"value":"feature(const_fn)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3495,"byte_end":3516,"line_start":74,"line_end":74,"column_start":1,"column_end":22}},{"value":"feature(custom_attribute)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3517,"byte_end":3546,"line_start":75,"line_end":75,"column_start":1,"column_end":30}},{"value":"feature(fundamental)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3547,"byte_end":3571,"line_start":76,"line_end":76,"column_start":1,"column_end":25}},{"value":"feature(i128_type)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3572,"byte_end":3594,"line_start":77,"line_end":77,"column_start":1,"column_end":23}},{"value":"feature(inclusive_range_syntax)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3595,"byte_end":3630,"line_start":78,"line_end":78,"column_start":1,"column_end":36}},{"value":"feature(intrinsics)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3631,"byte_end":3654,"line_start":79,"line_end":79,"column_start":1,"column_end":24}},{"value":"feature(lang_items)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3655,"byte_end":3678,"line_start":80,"line_end":80,"column_start":1,"column_end":24}},{"value":"feature(never_type)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3679,"byte_end":3702,"line_start":81,"line_end":81,"column_start":1,"column_end":24}},{"value":"feature(no_core)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3703,"byte_end":3723,"line_start":82,"line_end":82,"column_start":1,"column_end":21}},{"value":"feature(on_unimplemented)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3724,"byte_end":3753,"line_start":83,"line_end":83,"column_start":1,"column_end":30}},{"value":"feature(optin_builtin_traits)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3754,"byte_end":3787,"line_start":84,"line_end":84,"column_start":1,"column_end":34}},{"value":"feature(prelude_import)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3788,"byte_end":3815,"line_start":85,"line_end":85,"column_start":1,"column_end":28}},{"value":"feature(repr_simd, platform_intrinsics)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3816,"byte_end":3859,"line_start":86,"line_end":86,"column_start":1,"column_end":44}},{"value":"feature(rustc_attrs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3860,"byte_end":3884,"line_start":87,"line_end":87,"column_start":1,"column_end":25}},{"value":"feature(rustc_const_unstable)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3885,"byte_end":3918,"line_start":88,"line_end":88,"column_start":1,"column_end":34}},{"value":"feature(specialization)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3919,"byte_end":3946,"line_start":89,"line_end":89,"column_start":1,"column_end":28}},{"value":"feature(staged_api)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3947,"byte_end":3970,"line_start":90,"line_end":90,"column_start":1,"column_end":24}},{"value":"feature(unboxed_closures)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":3971,"byte_end":4000,"line_start":91,"line_end":91,"column_start":1,"column_end":30}},{"value":"feature(untagged_unions)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4001,"byte_end":4029,"line_start":92,"line_end":92,"column_start":1,"column_end":29}},{"value":"feature(unwind_attributes)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4030,"byte_end":4060,"line_start":93,"line_end":93,"column_start":1,"column_end":31}},{"value":"feature(const_min_value)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4061,"byte_end":4089,"line_start":94,"line_end":94,"column_start":1,"column_end":29}},{"value":"feature(const_max_value)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4090,"byte_end":4118,"line_start":95,"line_end":95,"column_start":1,"column_end":29}},{"value":"feature(const_atomic_bool_new)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4119,"byte_end":4153,"line_start":96,"line_end":96,"column_start":1,"column_end":35}},{"value":"feature(const_atomic_isize_new)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4154,"byte_end":4189,"line_start":97,"line_end":97,"column_start":1,"column_end":36}},{"value":"feature(const_atomic_usize_new)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4190,"byte_end":4225,"line_start":98,"line_end":98,"column_start":1,"column_end":36}},{"value":"feature(const_atomic_i8_new)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4226,"byte_end":4258,"line_start":99,"line_end":99,"column_start":1,"column_end":33}},{"value":"feature(const_atomic_u8_new)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4259,"byte_end":4291,"line_start":100,"line_end":100,"column_start":1,"column_end":33}},{"value":"feature(const_atomic_i16_new)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4292,"byte_end":4325,"line_start":101,"line_end":101,"column_start":1,"column_end":34}},{"value":"feature(const_atomic_u16_new)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4326,"byte_end":4359,"line_start":102,"line_end":102,"column_start":1,"column_end":34}},{"value":"feature(const_atomic_i32_new)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4360,"byte_end":4393,"line_start":103,"line_end":103,"column_start":1,"column_end":34}},{"value":"feature(const_atomic_u32_new)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4394,"byte_end":4427,"line_start":104,"line_end":104,"column_start":1,"column_end":34}},{"value":"feature(const_atomic_i64_new)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4428,"byte_end":4461,"line_start":105,"line_end":105,"column_start":1,"column_end":34}},{"value":"feature(const_atomic_u64_new)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4462,"byte_end":4495,"line_start":106,"line_end":106,"column_start":1,"column_end":34}},{"value":"feature(const_unsafe_cell_new)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4496,"byte_end":4530,"line_start":107,"line_end":107,"column_start":1,"column_end":35}},{"value":"feature(const_cell_new)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4531,"byte_end":4558,"line_start":108,"line_end":108,"column_start":1,"column_end":28}},{"value":"feature(const_nonzero_new)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4559,"byte_end":4589,"line_start":109,"line_end":109,"column_start":1,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":24},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,105,115,105,122,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"isize","qualname":"::isize","value":"src/libcore/num/isize.rs","parent":null,"children":[{"krate":0,"index":3563},{"krate":0,"index":3564}],"decl_id":null,"docs":" The pointer-sized signed integer type.","sig":null,"attributes":[{"value":"path = \"num/isize.rs\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4830,"byte_end":4854,"line_start":129,"line_end":129,"column_start":1,"column_end":25}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,105,115,105,122,101,46,114,115],"byte_start":35680,"byte_end":35726,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":25},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,105,56,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i8","qualname":"::i8","value":"src/libcore/num/i8.rs","parent":null,"children":[{"krate":0,"index":3565},{"krate":0,"index":3566}],"decl_id":null,"docs":" The 8-bit signed integer type.","sig":null,"attributes":[{"value":"path = \"num/i8.rs\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4870,"byte_end":4891,"line_start":130,"line_end":130,"column_start":1,"column_end":22}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,105,56,46,114,115],"byte_start":36329,"byte_end":36375,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":26},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,105,49,54,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i16","qualname":"::i16","value":"src/libcore/num/i16.rs","parent":null,"children":[{"krate":0,"index":3567},{"krate":0,"index":3568}],"decl_id":null,"docs":" The 16-bit signed integer type.","sig":null,"attributes":[{"value":"path = \"num/i16.rs\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4907,"byte_end":4929,"line_start":131,"line_end":131,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,105,49,54,46,114,115],"byte_start":36978,"byte_end":37024,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":27},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,105,51,50,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i32","qualname":"::i32","value":"src/libcore/num/i32.rs","parent":null,"children":[{"krate":0,"index":3569},{"krate":0,"index":3570}],"decl_id":null,"docs":" The 32-bit signed integer type.","sig":null,"attributes":[{"value":"path = \"num/i32.rs\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4945,"byte_end":4967,"line_start":132,"line_end":132,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,105,51,50,46,114,115],"byte_start":37628,"byte_end":37674,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":28},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,105,54,52,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i64","qualname":"::i64","value":"src/libcore/num/i64.rs","parent":null,"children":[{"krate":0,"index":3571},{"krate":0,"index":3572}],"decl_id":null,"docs":" The 64-bit signed integer type.","sig":null,"attributes":[{"value":"path = \"num/i64.rs\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4983,"byte_end":5005,"line_start":133,"line_end":133,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,105,54,52,46,114,115],"byte_start":38278,"byte_end":38324,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":29},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,105,49,50,56,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"i128","qualname":"::i128","value":"src/libcore/num/i128.rs","parent":null,"children":[{"krate":0,"index":3573},{"krate":0,"index":3574}],"decl_id":null,"docs":" The 128-bit signed integer type.","sig":null,"attributes":[{"value":"path = \"num/i128.rs\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5021,"byte_end":5044,"line_start":134,"line_end":134,"column_start":1,"column_end":24}},{"value":"unstable(feature = \"i128\", issue = \"35118\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,105,49,50,56,46,114,115],"byte_start":38931,"byte_end":38976,"line_start":15,"line_end":15,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":30},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,117,115,105,122,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"usize","qualname":"::usize","value":"src/libcore/num/usize.rs","parent":null,"children":[{"krate":0,"index":3575},{"krate":0,"index":3576}],"decl_id":null,"docs":" The pointer-sized unsigned integer type.","sig":null,"attributes":[{"value":"path = \"num/usize.rs\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5062,"byte_end":5086,"line_start":136,"line_end":136,"column_start":1,"column_end":25}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,117,115,105,122,101,46,114,115],"byte_start":39645,"byte_end":39691,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":31},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,117,56,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"u8","qualname":"::u8","value":"src/libcore/num/u8.rs","parent":null,"children":[{"krate":0,"index":3577},{"krate":0,"index":3578}],"decl_id":null,"docs":" The 8-bit unsigned integer type.","sig":null,"attributes":[{"value":"path = \"num/u8.rs\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5102,"byte_end":5123,"line_start":137,"line_end":137,"column_start":1,"column_end":22}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,117,56,46,114,115],"byte_start":40297,"byte_end":40343,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":32},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,117,49,54,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"u16","qualname":"::u16","value":"src/libcore/num/u16.rs","parent":null,"children":[{"krate":0,"index":3579},{"krate":0,"index":3580}],"decl_id":null,"docs":" The 16-bit unsigned integer type.","sig":null,"attributes":[{"value":"path = \"num/u16.rs\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5139,"byte_end":5161,"line_start":138,"line_end":138,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,117,49,54,46,114,115],"byte_start":40949,"byte_end":40995,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":33},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,117,51,50,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"u32","qualname":"::u32","value":"src/libcore/num/u32.rs","parent":null,"children":[{"krate":0,"index":3581},{"krate":0,"index":3582}],"decl_id":null,"docs":" The 32-bit unsigned integer type.","sig":null,"attributes":[{"value":"path = \"num/u32.rs\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5177,"byte_end":5199,"line_start":139,"line_end":139,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,117,51,50,46,114,115],"byte_start":41602,"byte_end":41648,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":34},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,117,54,52,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"u64","qualname":"::u64","value":"src/libcore/num/u64.rs","parent":null,"children":[{"krate":0,"index":3583},{"krate":0,"index":3584}],"decl_id":null,"docs":" The 64-bit unsigned integer type.","sig":null,"attributes":[{"value":"path = \"num/u64.rs\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5215,"byte_end":5237,"line_start":140,"line_end":140,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,117,54,52,46,114,115],"byte_start":42255,"byte_end":42301,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":35},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,117,49,50,56,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"u128","qualname":"::u128","value":"src/libcore/num/u128.rs","parent":null,"children":[{"krate":0,"index":3585},{"krate":0,"index":3586}],"decl_id":null,"docs":" The 128-bit unsigned integer type.","sig":null,"attributes":[{"value":"path = \"num/u128.rs\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5253,"byte_end":5276,"line_start":141,"line_end":141,"column_start":1,"column_end":24}},{"value":"unstable(feature = \"i128\", issue = \"35118\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,117,49,50,56,46,114,115],"byte_start":42911,"byte_end":42956,"line_start":15,"line_end":15,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":36},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"f32","qualname":"::f32","value":"src/libcore/num/f32.rs","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":72}],"decl_id":null,"docs":" Operations and constants for 32-bits floats (`f32` type)\n","sig":null,"attributes":[{"value":"path = \"num/f32.rs\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5294,"byte_end":5316,"line_start":143,"line_end":143,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":43560,"byte_end":43606,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Const","id":{"krate":0,"index":41},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":43796,"byte_end":43801,"line_start":22,"line_end":22,"column_start":11,"column_end":16},"name":"RADIX","qualname":"::f32::RADIX","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The radix or base of the internal representation of `f32`.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":43740,"byte_end":43785,"line_start":21,"line_end":21,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":42},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":43913,"byte_end":43928,"line_start":26,"line_end":26,"column_start":11,"column_end":26},"name":"MANTISSA_DIGITS","qualname":"::f32::MANTISSA_DIGITS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Number of significant digits in base 2.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":43857,"byte_end":43902,"line_start":25,"line_end":25,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":43},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44053,"byte_end":44059,"line_start":29,"line_end":29,"column_start":11,"column_end":17},"name":"DIGITS","qualname":"::f32::DIGITS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Approximate number of significant digits in base 10.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":43997,"byte_end":44042,"line_start":28,"line_end":28,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":44},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44199,"byte_end":44206,"line_start":33,"line_end":33,"column_start":11,"column_end":18},"name":"EPSILON","qualname":"::f32::EPSILON","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Difference between `1.0` and the next largest representable number.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44143,"byte_end":44188,"line_start":32,"line_end":32,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":45},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44324,"byte_end":44327,"line_start":37,"line_end":37,"column_start":11,"column_end":14},"name":"MIN","qualname":"::f32::MIN","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Smallest finite `f32` value.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44268,"byte_end":44313,"line_start":36,"line_end":36,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":46},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44454,"byte_end":44466,"line_start":40,"line_end":40,"column_start":11,"column_end":23},"name":"MIN_POSITIVE","qualname":"::f32::MIN_POSITIVE","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Smallest positive normal `f32` value.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44398,"byte_end":44443,"line_start":39,"line_end":39,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":47},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44582,"byte_end":44585,"line_start":43,"line_end":43,"column_start":11,"column_end":14},"name":"MAX","qualname":"::f32::MAX","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Largest finite `f32` value.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44526,"byte_end":44571,"line_start":42,"line_end":42,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":48},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44740,"byte_end":44747,"line_start":47,"line_end":47,"column_start":11,"column_end":18},"name":"MIN_EXP","qualname":"::f32::MIN_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" One greater than the minimum possible normal power of 2 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44684,"byte_end":44729,"line_start":46,"line_end":46,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":49},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44859,"byte_end":44866,"line_start":50,"line_end":50,"column_start":11,"column_end":18},"name":"MAX_EXP","qualname":"::f32::MAX_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Maximum possible power of 2 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44803,"byte_end":44848,"line_start":49,"line_end":49,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":50},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44986,"byte_end":44996,"line_start":54,"line_end":54,"column_start":11,"column_end":21},"name":"MIN_10_EXP","qualname":"::f32::MIN_10_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Minimum possible normal power of 10 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":44930,"byte_end":44975,"line_start":53,"line_end":53,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":51},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45108,"byte_end":45118,"line_start":57,"line_end":57,"column_start":11,"column_end":21},"name":"MAX_10_EXP","qualname":"::f32::MAX_10_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Maximum possible power of 10 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45052,"byte_end":45097,"line_start":56,"line_end":56,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":52},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45211,"byte_end":45214,"line_start":61,"line_end":61,"column_start":11,"column_end":14},"name":"NAN","qualname":"::f32::NAN","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Not a Number (NaN).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45155,"byte_end":45200,"line_start":60,"line_end":60,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":53},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45317,"byte_end":45325,"line_start":64,"line_end":64,"column_start":11,"column_end":19},"name":"INFINITY","qualname":"::f32::INFINITY","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Infinity (∞).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45261,"byte_end":45306,"line_start":63,"line_end":63,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":54},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45438,"byte_end":45450,"line_start":67,"line_end":67,"column_start":11,"column_end":23},"name":"NEG_INFINITY","qualname":"::f32::NEG_INFINITY","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Negative infinity (-∞).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45382,"byte_end":45427,"line_start":66,"line_end":66,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":55},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45567,"byte_end":45573,"line_start":71,"line_end":71,"column_start":9,"column_end":15},"name":"consts","qualname":"::f32::consts","value":"src/libcore/num/f32.rs","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71}],"decl_id":null,"docs":" Basic mathematical constants.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45513,"byte_end":45558,"line_start":70,"line_end":70,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":56},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45737,"byte_end":45739,"line_start":76,"line_end":76,"column_start":15,"column_end":17},"name":"PI","qualname":"::f32::consts::PI","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Archimedes' constant (π)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45677,"byte_end":45722,"line_start":75,"line_end":75,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":57},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45868,"byte_end":45877,"line_start":80,"line_end":80,"column_start":15,"column_end":24},"name":"FRAC_PI_2","qualname":"::f32::consts::FRAC_PI_2","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" π/2\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45808,"byte_end":45853,"line_start":79,"line_end":79,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":58},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46006,"byte_end":46015,"line_start":84,"line_end":84,"column_start":15,"column_end":24},"name":"FRAC_PI_3","qualname":"::f32::consts::FRAC_PI_3","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" π/3\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":45946,"byte_end":45991,"line_start":83,"line_end":83,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":59},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46144,"byte_end":46153,"line_start":88,"line_end":88,"column_start":15,"column_end":24},"name":"FRAC_PI_4","qualname":"::f32::consts::FRAC_PI_4","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" π/4\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46084,"byte_end":46129,"line_start":87,"line_end":87,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":60},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46283,"byte_end":46292,"line_start":92,"line_end":92,"column_start":15,"column_end":24},"name":"FRAC_PI_6","qualname":"::f32::consts::FRAC_PI_6","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" π/6\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46223,"byte_end":46268,"line_start":91,"line_end":91,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":61},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46421,"byte_end":46430,"line_start":96,"line_end":96,"column_start":15,"column_end":24},"name":"FRAC_PI_8","qualname":"::f32::consts::FRAC_PI_8","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" π/8\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46361,"byte_end":46406,"line_start":95,"line_end":95,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":62},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46559,"byte_end":46568,"line_start":100,"line_end":100,"column_start":15,"column_end":24},"name":"FRAC_1_PI","qualname":"::f32::consts::FRAC_1_PI","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" 1/π\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46499,"byte_end":46544,"line_start":99,"line_end":99,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":63},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46698,"byte_end":46707,"line_start":104,"line_end":104,"column_start":15,"column_end":24},"name":"FRAC_2_PI","qualname":"::f32::consts::FRAC_2_PI","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" 2/π\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46638,"byte_end":46683,"line_start":103,"line_end":103,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":64},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46843,"byte_end":46857,"line_start":108,"line_end":108,"column_start":15,"column_end":29},"name":"FRAC_2_SQRT_PI","qualname":"::f32::consts::FRAC_2_SQRT_PI","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" 2/sqrt(π)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46783,"byte_end":46828,"line_start":107,"line_end":107,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":65},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46989,"byte_end":46995,"line_start":112,"line_end":112,"column_start":15,"column_end":21},"name":"SQRT_2","qualname":"::f32::consts::SQRT_2","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" sqrt(2)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":46929,"byte_end":46974,"line_start":111,"line_end":111,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":66},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47129,"byte_end":47142,"line_start":116,"line_end":116,"column_start":15,"column_end":28},"name":"FRAC_1_SQRT_2","qualname":"::f32::consts::FRAC_1_SQRT_2","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" 1/sqrt(2)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47069,"byte_end":47114,"line_start":115,"line_end":115,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":67},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47286,"byte_end":47287,"line_start":120,"line_end":120,"column_start":15,"column_end":16},"name":"E","qualname":"::f32::consts::E","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" Euler's number (e)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47226,"byte_end":47271,"line_start":119,"line_end":119,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":68},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47430,"byte_end":47436,"line_start":124,"line_end":124,"column_start":15,"column_end":21},"name":"LOG2_E","qualname":"::f32::consts::LOG2_E","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" log<sub>2</sub>(e)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47370,"byte_end":47415,"line_start":123,"line_end":123,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":69},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47580,"byte_end":47587,"line_start":128,"line_end":128,"column_start":15,"column_end":22},"name":"LOG10_E","qualname":"::f32::consts::LOG10_E","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" log<sub>10</sub>(e)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47520,"byte_end":47565,"line_start":127,"line_end":127,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":70},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47718,"byte_end":47722,"line_start":132,"line_end":132,"column_start":15,"column_end":19},"name":"LN_2","qualname":"::f32::consts::LN_2","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" ln(2)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47658,"byte_end":47703,"line_start":131,"line_end":131,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":71},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47854,"byte_end":47859,"line_start":136,"line_end":136,"column_start":15,"column_end":20},"name":"LN_10","qualname":"::f32::consts::LN_10","value":"f32","parent":null,"children":[],"decl_id":null,"docs":" ln(10)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,51,50,46,114,115],"byte_start":47794,"byte_end":47839,"line_start":135,"line_end":135,"column_start":5,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":91},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"f64","qualname":"::f64","value":"src/libcore/num/f64.rs","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":127}],"decl_id":null,"docs":" Operations and constants for 64-bits floats (`f64` type)\n","sig":null,"attributes":[{"value":"path = \"num/f64.rs\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5332,"byte_end":5354,"line_start":144,"line_end":144,"column_start":1,"column_end":23}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":53478,"byte_end":53524,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Const","id":{"krate":0,"index":96},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":53714,"byte_end":53719,"line_start":22,"line_end":22,"column_start":11,"column_end":16},"name":"RADIX","qualname":"::f64::RADIX","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The radix or base of the internal representation of `f64`.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":53658,"byte_end":53703,"line_start":21,"line_end":21,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":97},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":53831,"byte_end":53846,"line_start":26,"line_end":26,"column_start":11,"column_end":26},"name":"MANTISSA_DIGITS","qualname":"::f64::MANTISSA_DIGITS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Number of significant digits in base 2.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":53775,"byte_end":53820,"line_start":25,"line_end":25,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":98},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":53971,"byte_end":53977,"line_start":29,"line_end":29,"column_start":11,"column_end":17},"name":"DIGITS","qualname":"::f64::DIGITS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Approximate number of significant digits in base 10.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":53915,"byte_end":53960,"line_start":28,"line_end":28,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":99},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54118,"byte_end":54125,"line_start":33,"line_end":33,"column_start":11,"column_end":18},"name":"EPSILON","qualname":"::f64::EPSILON","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Difference between `1.0` and the next largest representable number.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54062,"byte_end":54107,"line_start":32,"line_end":32,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":100},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54251,"byte_end":54254,"line_start":37,"line_end":37,"column_start":11,"column_end":14},"name":"MIN","qualname":"::f64::MIN","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Smallest finite `f64` value.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54195,"byte_end":54240,"line_start":36,"line_end":36,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":101},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54390,"byte_end":54402,"line_start":40,"line_end":40,"column_start":11,"column_end":23},"name":"MIN_POSITIVE","qualname":"::f64::MIN_POSITIVE","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Smallest positive normal `f64` value.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54334,"byte_end":54379,"line_start":39,"line_end":39,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":102},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54527,"byte_end":54530,"line_start":43,"line_end":43,"column_start":11,"column_end":14},"name":"MAX","qualname":"::f64::MAX","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Largest finite `f64` value.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54471,"byte_end":54516,"line_start":42,"line_end":42,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":103},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54694,"byte_end":54701,"line_start":47,"line_end":47,"column_start":11,"column_end":18},"name":"MIN_EXP","qualname":"::f64::MIN_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" One greater than the minimum possible normal power of 2 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54638,"byte_end":54683,"line_start":46,"line_end":46,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":104},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54814,"byte_end":54821,"line_start":50,"line_end":50,"column_start":11,"column_end":18},"name":"MAX_EXP","qualname":"::f64::MAX_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Maximum possible power of 2 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54758,"byte_end":54803,"line_start":49,"line_end":49,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":105},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54942,"byte_end":54952,"line_start":54,"line_end":54,"column_start":11,"column_end":21},"name":"MIN_10_EXP","qualname":"::f64::MIN_10_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Minimum possible normal power of 10 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":54886,"byte_end":54931,"line_start":53,"line_end":53,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":106},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55065,"byte_end":55075,"line_start":57,"line_end":57,"column_start":11,"column_end":21},"name":"MAX_10_EXP","qualname":"::f64::MAX_10_EXP","value":"i32","parent":null,"children":[],"decl_id":null,"docs":" Maximum possible power of 10 exponent.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55009,"byte_end":55054,"line_start":56,"line_end":56,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":107},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55169,"byte_end":55172,"line_start":61,"line_end":61,"column_start":11,"column_end":14},"name":"NAN","qualname":"::f64::NAN","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Not a Number (NaN).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55113,"byte_end":55158,"line_start":60,"line_end":60,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":108},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55275,"byte_end":55283,"line_start":64,"line_end":64,"column_start":11,"column_end":19},"name":"INFINITY","qualname":"::f64::INFINITY","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Infinity (∞).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55219,"byte_end":55264,"line_start":63,"line_end":63,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":109},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55396,"byte_end":55408,"line_start":67,"line_end":67,"column_start":11,"column_end":23},"name":"NEG_INFINITY","qualname":"::f64::NEG_INFINITY","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Negative infinity (-∞).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55340,"byte_end":55385,"line_start":66,"line_end":66,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":110},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55525,"byte_end":55531,"line_start":71,"line_end":71,"column_start":9,"column_end":15},"name":"consts","qualname":"::f64::consts","value":"src/libcore/num/f64.rs","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126}],"decl_id":null,"docs":" Basic mathematical constants.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55471,"byte_end":55516,"line_start":70,"line_end":70,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":111},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55695,"byte_end":55697,"line_start":76,"line_end":76,"column_start":15,"column_end":17},"name":"PI","qualname":"::f64::consts::PI","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Archimedes' constant (π)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55635,"byte_end":55680,"line_start":75,"line_end":75,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":112},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55826,"byte_end":55835,"line_start":80,"line_end":80,"column_start":15,"column_end":24},"name":"FRAC_PI_2","qualname":"::f64::consts::FRAC_PI_2","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" π/2\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55766,"byte_end":55811,"line_start":79,"line_end":79,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":113},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55964,"byte_end":55973,"line_start":84,"line_end":84,"column_start":15,"column_end":24},"name":"FRAC_PI_3","qualname":"::f64::consts::FRAC_PI_3","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" π/3\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":55904,"byte_end":55949,"line_start":83,"line_end":83,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":114},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56102,"byte_end":56111,"line_start":88,"line_end":88,"column_start":15,"column_end":24},"name":"FRAC_PI_4","qualname":"::f64::consts::FRAC_PI_4","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" π/4\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56042,"byte_end":56087,"line_start":87,"line_end":87,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":115},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56241,"byte_end":56250,"line_start":92,"line_end":92,"column_start":15,"column_end":24},"name":"FRAC_PI_6","qualname":"::f64::consts::FRAC_PI_6","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" π/6\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56181,"byte_end":56226,"line_start":91,"line_end":91,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":116},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56379,"byte_end":56388,"line_start":96,"line_end":96,"column_start":15,"column_end":24},"name":"FRAC_PI_8","qualname":"::f64::consts::FRAC_PI_8","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" π/8\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56319,"byte_end":56364,"line_start":95,"line_end":95,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":117},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56517,"byte_end":56526,"line_start":100,"line_end":100,"column_start":15,"column_end":24},"name":"FRAC_1_PI","qualname":"::f64::consts::FRAC_1_PI","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" 1/π\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56457,"byte_end":56502,"line_start":99,"line_end":99,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":118},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56656,"byte_end":56665,"line_start":104,"line_end":104,"column_start":15,"column_end":24},"name":"FRAC_2_PI","qualname":"::f64::consts::FRAC_2_PI","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" 2/π\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56596,"byte_end":56641,"line_start":103,"line_end":103,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":119},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56801,"byte_end":56815,"line_start":108,"line_end":108,"column_start":15,"column_end":29},"name":"FRAC_2_SQRT_PI","qualname":"::f64::consts::FRAC_2_SQRT_PI","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" 2/sqrt(π)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56741,"byte_end":56786,"line_start":107,"line_end":107,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":120},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56947,"byte_end":56953,"line_start":112,"line_end":112,"column_start":15,"column_end":21},"name":"SQRT_2","qualname":"::f64::consts::SQRT_2","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" sqrt(2)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":56887,"byte_end":56932,"line_start":111,"line_end":111,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":121},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57087,"byte_end":57100,"line_start":116,"line_end":116,"column_start":15,"column_end":28},"name":"FRAC_1_SQRT_2","qualname":"::f64::consts::FRAC_1_SQRT_2","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" 1/sqrt(2)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57027,"byte_end":57072,"line_start":115,"line_end":115,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":122},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57244,"byte_end":57245,"line_start":120,"line_end":120,"column_start":15,"column_end":16},"name":"E","qualname":"::f64::consts::E","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" Euler's number (e)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57184,"byte_end":57229,"line_start":119,"line_end":119,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":123},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57388,"byte_end":57394,"line_start":124,"line_end":124,"column_start":15,"column_end":21},"name":"LOG2_E","qualname":"::f64::consts::LOG2_E","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" log<sub>2</sub>(e)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57328,"byte_end":57373,"line_start":123,"line_end":123,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":124},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57538,"byte_end":57545,"line_start":128,"line_end":128,"column_start":15,"column_end":22},"name":"LOG10_E","qualname":"::f64::consts::LOG10_E","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" log<sub>10</sub>(e)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57478,"byte_end":57523,"line_start":127,"line_end":127,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":125},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57676,"byte_end":57680,"line_start":132,"line_end":132,"column_start":15,"column_end":19},"name":"LN_2","qualname":"::f64::consts::LN_2","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" ln(2)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57616,"byte_end":57661,"line_start":131,"line_end":131,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":126},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57812,"byte_end":57817,"line_start":136,"line_end":136,"column_start":15,"column_end":20},"name":"LN_10","qualname":"::f64::consts::LN_10","value":"f64","parent":null,"children":[],"decl_id":null,"docs":" ln(10)\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,54,52,46,114,115],"byte_start":57752,"byte_end":57797,"line_start":135,"line_end":135,"column_start":5,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":146},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"num","qualname":"::num","value":"src/libcore/num/mod.rs","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":3587},{"krate":0,"index":3605},{"krate":0,"index":3603},{"krate":0,"index":3597},{"krate":0,"index":3595},{"krate":0,"index":3593},{"krate":0,"index":3592},{"krate":0,"index":3590},{"krate":0,"index":3588},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":159},{"krate":0,"index":161},{"krate":0,"index":163},{"krate":0,"index":165},{"krate":0,"index":186},{"krate":0,"index":276},{"krate":0,"index":445},{"krate":0,"index":458},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":6229},{"krate":0,"index":6238},{"krate":0,"index":6236},{"krate":0,"index":6234},{"krate":0,"index":6232},{"krate":0,"index":6230},{"krate":0,"index":478},{"krate":0,"index":494},{"krate":0,"index":6239},{"krate":0,"index":6242},{"krate":0,"index":6245},{"krate":0,"index":6248},{"krate":0,"index":6251},{"krate":0,"index":6254},{"krate":0,"index":6257},{"krate":0,"index":6260},{"krate":0,"index":6263},{"krate":0,"index":6266},{"krate":0,"index":6269},{"krate":0,"index":6272},{"krate":0,"index":6275},{"krate":0,"index":6279},{"krate":0,"index":6278},{"krate":0,"index":6276},{"krate":0,"index":495},{"krate":0,"index":497},{"krate":0,"index":499},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":6281},{"krate":0,"index":6284},{"krate":0,"index":6287},{"krate":0,"index":6290},{"krate":0,"index":6293},{"krate":0,"index":6296},{"krate":0,"index":6299},{"krate":0,"index":6302},{"krate":0,"index":6305},{"krate":0,"index":6308},{"krate":0,"index":6311},{"krate":0,"index":6314},{"krate":0,"index":6317},{"krate":0,"index":6320},{"krate":0,"index":6323},{"krate":0,"index":6326},{"krate":0,"index":6329},{"krate":0,"index":6332},{"krate":0,"index":6335},{"krate":0,"index":6338},{"krate":0,"index":6341},{"krate":0,"index":6344},{"krate":0,"index":6347},{"krate":0,"index":6350},{"krate":0,"index":6353},{"krate":0,"index":6356},{"krate":0,"index":6359},{"krate":0,"index":6362},{"krate":0,"index":6365},{"krate":0,"index":6368},{"krate":0,"index":6371},{"krate":0,"index":6374},{"krate":0,"index":6377},{"krate":0,"index":6380},{"krate":0,"index":6383},{"krate":0,"index":6386},{"krate":0,"index":6389},{"krate":0,"index":6392},{"krate":0,"index":6395},{"krate":0,"index":6398},{"krate":0,"index":6401},{"krate":0,"index":6404},{"krate":0,"index":6407},{"krate":0,"index":6410},{"krate":0,"index":6413},{"krate":0,"index":6416},{"krate":0,"index":6419},{"krate":0,"index":6422},{"krate":0,"index":6425},{"krate":0,"index":6428},{"krate":0,"index":6431},{"krate":0,"index":6434},{"krate":0,"index":6437},{"krate":0,"index":6440},{"krate":0,"index":6443},{"krate":0,"index":6446},{"krate":0,"index":6449},{"krate":0,"index":6452},{"krate":0,"index":6455},{"krate":0,"index":6458},{"krate":0,"index":6461},{"krate":0,"index":6464},{"krate":0,"index":506},{"krate":0,"index":511},{"krate":0,"index":518},{"krate":0,"index":6581},{"krate":0,"index":6588},{"krate":0,"index":6595},{"krate":0,"index":6602},{"krate":0,"index":6609},{"krate":0,"index":6616},{"krate":0,"index":6623},{"krate":0,"index":6630},{"krate":0,"index":6637},{"krate":0,"index":6644},{"krate":0,"index":6651},{"krate":0,"index":6658},{"krate":0,"index":519},{"krate":0,"index":6665},{"krate":0,"index":6673},{"krate":0,"index":6671},{"krate":0,"index":6668},{"krate":0,"index":6666},{"krate":0,"index":6675},{"krate":0,"index":6682},{"krate":0,"index":6680},{"krate":0,"index":6678},{"krate":0,"index":6676},{"krate":0,"index":522},{"krate":0,"index":524},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":6684},{"krate":0,"index":6686},{"krate":0,"index":6688},{"krate":0,"index":6690},{"krate":0,"index":6692},{"krate":0,"index":6694},{"krate":0,"index":6696},{"krate":0,"index":6698},{"krate":0,"index":6700},{"krate":0,"index":6702},{"krate":0,"index":6704},{"krate":0,"index":6706},{"krate":0,"index":6708},{"krate":0,"index":6710},{"krate":0,"index":6712},{"krate":0,"index":6714},{"krate":0,"index":6716},{"krate":0,"index":6718},{"krate":0,"index":6720},{"krate":0,"index":6722},{"krate":0,"index":6724},{"krate":0,"index":6726},{"krate":0,"index":6728},{"krate":0,"index":6730},{"krate":0,"index":6732},{"krate":0,"index":6734},{"krate":0,"index":6736},{"krate":0,"index":6738},{"krate":0,"index":6740},{"krate":0,"index":6742},{"krate":0,"index":6744},{"krate":0,"index":6746},{"krate":0,"index":6748},{"krate":0,"index":6750},{"krate":0,"index":6752},{"krate":0,"index":6754},{"krate":0,"index":6756},{"krate":0,"index":6758},{"krate":0,"index":6760},{"krate":0,"index":6762},{"krate":0,"index":6764},{"krate":0,"index":6766},{"krate":0,"index":6768}],"decl_id":null,"docs":" Numeric traits and functions for the built-in numeric types.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5371,"byte_end":5383,"line_start":146,"line_end":146,"column_start":1,"column_end":13}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":63321,"byte_end":63367,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":3587},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":64362,"byte_end":64370,"line_start":45,"line_end":45,"column_start":12,"column_end":20},"name":"Wrapping","qualname":"::num::Wrapping","value":"","parent":null,"children":[],"decl_id":null,"docs":" Provides intentionally-wrapped arithmetic on `T`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":64235,"byte_end":64280,"line_start":43,"line_end":43,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":64351,"byte_end":64450,"line_start":45,"line_end":46,"column_start":1,"column_end":31}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":64351,"byte_end":64450,"line_start":45,"line_end":46,"column_start":1,"column_end":31}}]},{"kind":"Const","id":{"krate":0,"index":174},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":172222,"byte_end":172227,"line_start":342,"line_end":342,"column_start":19,"column_end":24},"name":"usize","qualname":"::num::wrapping::shift_max::platform::usize","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":175},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":172265,"byte_end":172270,"line_start":343,"line_end":343,"column_start":19,"column_end":24},"name":"isize","qualname":"::num::wrapping::shift_max::platform::isize","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":176},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":172311,"byte_end":172313,"line_start":346,"line_end":346,"column_start":15,"column_end":17},"name":"i8","qualname":"::num::wrapping::shift_max::i8","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":177},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":172349,"byte_end":172352,"line_start":347,"line_end":347,"column_start":15,"column_end":18},"name":"i16","qualname":"::num::wrapping::shift_max::i16","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":178},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":172388,"byte_end":172391,"line_start":348,"line_end":348,"column_start":15,"column_end":18},"name":"i32","qualname":"::num::wrapping::shift_max::i32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":179},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":172427,"byte_end":172430,"line_start":349,"line_end":349,"column_start":15,"column_end":18},"name":"i64","qualname":"::num::wrapping::shift_max::i64","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":181},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":172502,"byte_end":172504,"line_start":352,"line_end":352,"column_start":15,"column_end":17},"name":"u8","qualname":"::num::wrapping::shift_max::u8","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":182},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":172530,"byte_end":172533,"line_start":353,"line_end":353,"column_start":15,"column_end":18},"name":"u16","qualname":"::num::wrapping::shift_max::u16","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":183},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":172560,"byte_end":172563,"line_start":354,"line_end":354,"column_start":15,"column_end":18},"name":"u32","qualname":"::num::wrapping::shift_max::u32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":184},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":172590,"byte_end":172593,"line_start":355,"line_end":355,"column_start":15,"column_end":18},"name":"u64","qualname":"::num::wrapping::shift_max::u64","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":186},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flt2dec","qualname":"::num::flt2dec","value":"src/libcore/num/flt2dec/mod.rs","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":195},{"krate":0,"index":208},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":5450},{"krate":0,"index":5460},{"krate":0,"index":5458},{"krate":0,"index":5455},{"krate":0,"index":5453},{"krate":0,"index":5451},{"krate":0,"index":262},{"krate":0,"index":5461},{"krate":0,"index":5462},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":5464},{"krate":0,"index":5473},{"krate":0,"index":5471},{"krate":0,"index":5469},{"krate":0,"index":5467},{"krate":0,"index":5465},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275}],"decl_id":null,"docs":"Floating-point number to decimal conversion routines.","sig":null,"attributes":[{"value":"unstable(feature = \"flt2dec\",\n           reason = \"internal routines only exposed for testing\",\n           issue = \"0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":178647,"byte_end":178772,"line_start":129,"line_end":131,"column_start":1,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":193},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,101,115,116,105,109,97,116,111,114,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"estimator","qualname":"::num::flt2dec::estimator","value":"src/libcore/num/flt2dec/estimator.rs","parent":null,"children":[{"krate":0,"index":194}],"decl_id":null,"docs":" The exponent estimator.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":194},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,101,115,116,105,109,97,116,111,114,46,114,115],"byte_start":202324,"byte_end":202347,"line_start":18,"line_end":18,"column_start":8,"column_end":31},"name":"estimate_scaling_factor","qualname":"::num::flt2dec::estimator::estimate_scaling_factor","value":"fn (mant: u64, exp: i16) -> i16","parent":null,"children":[],"decl_id":null,"docs":" Finds `k_0` such that `10^(k_0-1) < mant * 2^exp <= 10^(k_0+1)`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":195},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"decoder","qualname":"::num::flt2dec::decoder","value":"src/libcore/num/flt2dec/decoder.rs","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":5428},{"krate":0,"index":5438},{"krate":0,"index":5436},{"krate":0,"index":5434},{"krate":0,"index":5431},{"krate":0,"index":5429},{"krate":0,"index":5439},{"krate":0,"index":5449},{"krate":0,"index":5447},{"krate":0,"index":5445},{"krate":0,"index":5442},{"krate":0,"index":5440},{"krate":0,"index":201},{"krate":0,"index":203},{"krate":0,"index":205},{"krate":0,"index":207}],"decl_id":null,"docs":" Decodes a floating-point value into individual parts and error ranges.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5428},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":203609,"byte_end":203616,"line_start":25,"line_end":25,"column_start":12,"column_end":19},"name":"Decoded","qualname":"::num::flt2dec::decoder::Decoded","value":"Decoded { mant, minus, plus, exp, inclusive }","parent":null,"children":[{"krate":0,"index":2147486284},{"krate":0,"index":2147486285},{"krate":0,"index":2147486286},{"krate":0,"index":2147486287},{"krate":0,"index":2147486288}],"decl_id":null,"docs":" Decoded unsigned finite value, such that:","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":203598,"byte_end":203978,"line_start":25,"line_end":38,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":203598,"byte_end":203978,"line_start":25,"line_end":38,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":2147486284},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":203656,"byte_end":203660,"line_start":27,"line_end":27,"column_start":9,"column_end":13},"name":"mant","qualname":"::num::flt2dec::decoder::Decoded::mant","value":"u64","parent":{"krate":0,"index":5428},"children":[],"decl_id":null,"docs":" The scaled mantissa.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2147486285},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":203706,"byte_end":203711,"line_start":29,"line_end":29,"column_start":9,"column_end":14},"name":"minus","qualname":"::num::flt2dec::decoder::Decoded::minus","value":"u64","parent":{"krate":0,"index":5428},"children":[],"decl_id":null,"docs":" The lower error range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2147486286},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":203757,"byte_end":203761,"line_start":31,"line_end":31,"column_start":9,"column_end":13},"name":"plus","qualname":"::num::flt2dec::decoder::Decoded::plus","value":"u64","parent":{"krate":0,"index":5428},"children":[],"decl_id":null,"docs":" The upper error range.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2147486287},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":203815,"byte_end":203818,"line_start":33,"line_end":33,"column_start":9,"column_end":12},"name":"exp","qualname":"::num::flt2dec::decoder::Decoded::exp","value":"i16","parent":{"krate":0,"index":5428},"children":[],"decl_id":null,"docs":" The shared exponent in base 2.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2147486288},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":203960,"byte_end":203969,"line_start":37,"line_end":37,"column_start":9,"column_end":18},"name":"inclusive","qualname":"::num::flt2dec::decoder::Decoded::inclusive","value":"bool","parent":{"krate":0,"index":5428},"children":[],"decl_id":null,"docs":" True when the error range is inclusive.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486289},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":204102,"byte_end":204105,"line_start":44,"line_end":44,"column_start":5,"column_end":8},"name":"Nan","qualname":"::num::flt2dec::decoder::FullDecoded::Nan","value":"FullDecoded::Nan","parent":{"krate":0,"index":5439},"children":[],"decl_id":null,"docs":" Not-a-number.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486290},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":204160,"byte_end":204168,"line_start":46,"line_end":46,"column_start":5,"column_end":13},"name":"Infinite","qualname":"::num::flt2dec::decoder::FullDecoded::Infinite","value":"FullDecoded::Infinite","parent":{"krate":0,"index":5439},"children":[],"decl_id":null,"docs":" Infinities, either positive or negative.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486291},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":204217,"byte_end":204221,"line_start":48,"line_end":48,"column_start":5,"column_end":9},"name":"Zero","qualname":"::num::flt2dec::decoder::FullDecoded::Zero","value":"FullDecoded::Zero","parent":{"krate":0,"index":5439},"children":[],"decl_id":null,"docs":" Zero, either positive or negative.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486292},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":204279,"byte_end":204285,"line_start":50,"line_end":50,"column_start":5,"column_end":11},"name":"Finite","qualname":"::num::flt2dec::decoder::FullDecoded::Finite","value":"FullDecoded::Finite(Decoded)","parent":{"krate":0,"index":5439},"children":[],"decl_id":null,"docs":" Finite numbers with further decoded fields.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5439},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":204062,"byte_end":204073,"line_start":42,"line_end":42,"column_start":10,"column_end":21},"name":"FullDecoded","qualname":"::num::flt2dec::decoder::FullDecoded","value":"FullDecoded::{Nan, Infinite, Zero, Finite}","parent":null,"children":[{"krate":0,"index":2147486289},{"krate":0,"index":2147486290},{"krate":0,"index":2147486291},{"krate":0,"index":2147486292}],"decl_id":null,"docs":" Decoded unsigned value.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":204053,"byte_end":204297,"line_start":42,"line_end":51,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":204053,"byte_end":204297,"line_start":42,"line_end":51,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":201},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":204359,"byte_end":204373,"line_start":54,"line_end":54,"column_start":11,"column_end":25},"name":"DecodableFloat","qualname":"::num::flt2dec::decoder::DecodableFloat","value":"DecodableFloat:  RawFloat + Copy","parent":null,"children":[{"krate":0,"index":202}],"decl_id":null,"docs":" A floating point type which can be `decode`d.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":204447,"byte_end":204465,"line_start":56,"line_end":56,"column_start":8,"column_end":26},"name":"min_pos_norm_value","qualname":"::num::flt2dec::decoder::DecodableFloat::min_pos_norm_value","value":"fn () -> Self","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" A floating point type which can be `decode`d.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":207},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":204771,"byte_end":204777,"line_start":69,"line_end":69,"column_start":8,"column_end":14},"name":"decode","qualname":"::num::flt2dec::decoder::decode","value":"fn <T> (v: T) -> (bool, FullDecoded)","parent":null,"children":[],"decl_id":null,"docs":" Returns a sign (true when negative) and `FullDecoded` value\n from given floating point number.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":208},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":178933,"byte_end":178941,"line_start":140,"line_end":140,"column_start":9,"column_end":17},"name":"strategy","qualname":"::num::flt2dec::strategy","value":"src/libcore/num/flt2dec/mod.rs","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":230}],"decl_id":null,"docs":" Digit-generation algorithms.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":209},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,100,114,97,103,111,110,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dragon","qualname":"::num::flt2dec::strategy::dragon","value":"src/libcore/num/flt2dec/strategy/dragon.rs","parent":null,"children":[{"krate":0,"index":210},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229}],"decl_id":null,"docs":"Almost direct (but slightly optimized) Rust translation of Figure 3 of [1].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":225},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,100,114,97,103,111,110,46,114,115],"byte_start":208214,"byte_end":208223,"line_start":43,"line_end":43,"column_start":8,"column_end":17},"name":"mul_pow10","qualname":"::num::flt2dec::strategy::dragon::mul_pow10","value":"fn (x: &mut Big, n: usize) -> &mut Big","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":228},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,100,114,97,103,111,110,46,114,115],"byte_start":209405,"byte_end":209420,"line_start":78,"line_end":78,"column_start":8,"column_end":23},"name":"format_shortest","qualname":"::num::flt2dec::strategy::dragon::format_shortest","value":"fn (d: &Decoded, buf: &mut [u8]) -> (usize, i16)","parent":null,"children":[],"decl_id":null,"docs":" The shortest mode implementation for Dragon.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":229},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,100,114,97,103,111,110,46,114,115],"byte_start":216326,"byte_end":216338,"line_start":228,"line_end":228,"column_start":8,"column_end":20},"name":"format_exact","qualname":"::num::flt2dec::strategy::dragon::format_exact","value":"fn (d: &Decoded, buf: &mut [u8], limit: i16) -> (usize, i16)","parent":null,"children":[],"decl_id":null,"docs":" The exact and fixed mode implementation for Dragon.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":230},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"grisu","qualname":"::num::flt2dec::strategy::grisu","value":"src/libcore/num/flt2dec/strategy/grisu.rs","parent":null,"children":[{"krate":0,"index":231},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258}],"decl_id":null,"docs":"Rust adaptation of Grisu3 algorithm described in [1]. It uses about\n1KB of precomputed table, and in turn, it's very quick for most inputs.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":236},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":221468,"byte_end":221473,"line_start":24,"line_end":24,"column_start":26,"column_end":31},"name":"ALPHA","qualname":"::num::flt2dec::strategy::grisu::ALPHA","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":237},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":221511,"byte_end":221516,"line_start":25,"line_end":25,"column_start":26,"column_end":31},"name":"GAMMA","qualname":"::num::flt2dec::strategy::grisu::GAMMA","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Static","id":{"krate":0,"index":238},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":221850,"byte_end":221862,"line_start":38,"line_end":38,"column_start":12,"column_end":24},"name":"CACHED_POW10","qualname":"::num::flt2dec::strategy::grisu::CACHED_POW10","value":"[(u64, i16, i16); 81]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":239},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":225091,"byte_end":225111,"line_start":122,"line_end":122,"column_start":26,"column_end":46},"name":"CACHED_POW10_FIRST_E","qualname":"::num::flt2dec::strategy::grisu::CACHED_POW10_FIRST_E","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":240},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":225151,"byte_end":225170,"line_start":123,"line_end":123,"column_start":26,"column_end":45},"name":"CACHED_POW10_LAST_E","qualname":"::num::flt2dec::strategy::grisu::CACHED_POW10_LAST_E","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":241},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":225207,"byte_end":225219,"line_start":126,"line_end":126,"column_start":8,"column_end":20},"name":"cached_power","qualname":"::num::flt2dec::strategy::grisu::cached_power","value":"fn (alpha: i16, gamma: i16) -> (i16, Fp)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":242},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":225700,"byte_end":225722,"line_start":138,"line_end":138,"column_start":8,"column_end":30},"name":"max_pow10_no_more_than","qualname":"::num::flt2dec::strategy::grisu::max_pow10_no_more_than","value":"fn (x: u32) -> (u8, u32)","parent":null,"children":[],"decl_id":null,"docs":" Given `x > 0`, returns `(k, 10^k)` such that `10^k <= x < 10^(k+1)`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":252},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":226557,"byte_end":226576,"line_start":164,"line_end":164,"column_start":8,"column_end":27},"name":"format_shortest_opt","qualname":"::num::flt2dec::strategy::grisu::format_shortest_opt","value":"fn (d: &Decoded, buf: &mut [u8]) -> Option<(usize, i16)>","parent":null,"children":[],"decl_id":null,"docs":" The shortest mode implementation for Grisu.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":254},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":240766,"byte_end":240781,"line_start":431,"line_end":431,"column_start":8,"column_end":23},"name":"format_shortest","qualname":"::num::flt2dec::strategy::grisu::format_shortest","value":"fn (d: &Decoded, buf: &mut [u8]) -> (usize, i16)","parent":null,"children":[],"decl_id":null,"docs":" The shortest mode implementation for Grisu with Dragon fallback.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":256},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":241173,"byte_end":241189,"line_start":442,"line_end":442,"column_start":8,"column_end":24},"name":"format_exact_opt","qualname":"::num::flt2dec::strategy::grisu::format_exact_opt","value":"fn (d: &Decoded, buf: &mut [u8], limit: i16) -> Option<(usize, i16)>","parent":null,"children":[],"decl_id":null,"docs":" The exact and fixed mode implementation for Grisu.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":258},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,115,116,114,97,116,101,103,121,47,103,114,105,115,117,46,114,115],"byte_start":252404,"byte_end":252416,"line_start":688,"line_end":688,"column_start":8,"column_end":20},"name":"format_exact","qualname":"::num::flt2dec::strategy::grisu::format_exact","value":"fn (d: &Decoded, buf: &mut [u8], limit: i16) -> (usize, i16)","parent":null,"children":[],"decl_id":null,"docs":" The exact and fixed mode implementation for Grisu with Dragon fallback.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":260},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":179298,"byte_end":179312,"line_start":150,"line_end":150,"column_start":11,"column_end":25},"name":"MAX_SIG_DIGITS","qualname":"::num::flt2dec::MAX_SIG_DIGITS","value":"usize","parent":null,"children":[],"decl_id":null,"docs":" The minimum size of buffer necessary for the shortest mode.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":261},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":179496,"byte_end":179504,"line_start":155,"line_end":155,"column_start":8,"column_end":16},"name":"round_up","qualname":"::num::flt2dec::round_up","value":"fn (d: &mut [u8], n: usize) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" When `d[..n]` contains decimal digits, increase the last digit and propagate carry.\n Returns a next digit when it causes the length change.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486294},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":180173,"byte_end":180177,"line_start":177,"line_end":177,"column_start":5,"column_end":9},"name":"Zero","qualname":"::num::flt2dec::Part::Zero","value":"Part::Zero(usize)","parent":{"krate":0,"index":5450},"children":[],"decl_id":null,"docs":" Given number of zero digits.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486296},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":180231,"byte_end":180234,"line_start":179,"line_end":179,"column_start":5,"column_end":8},"name":"Num","qualname":"::num::flt2dec::Part::Num","value":"Part::Num(u16)","parent":{"krate":0,"index":5450},"children":[],"decl_id":null,"docs":" A literal number up to 5 digits.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486298},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":180285,"byte_end":180289,"line_start":181,"line_end":181,"column_start":5,"column_end":9},"name":"Copy","qualname":"::num::flt2dec::Part::Copy","value":"Part::Copy(&'a [u8])","parent":{"krate":0,"index":5450},"children":[],"decl_id":null,"docs":" A verbatim copy of given bytes.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5450},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":180121,"byte_end":180125,"line_start":175,"line_end":175,"column_start":10,"column_end":14},"name":"Part","qualname":"::num::flt2dec::Part","value":"Part::{Zero, Num, Copy}","parent":null,"children":[{"krate":0,"index":2147486294},{"krate":0,"index":2147486296},{"krate":0,"index":2147486298}],"decl_id":null,"docs":" Formatted parts.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":180112,"byte_end":180302,"line_start":175,"line_end":182,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":180112,"byte_end":180302,"line_start":175,"line_end":182,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":180388,"byte_end":180391,"line_start":186,"line_end":186,"column_start":12,"column_end":15},"name":"len","qualname":"<Part<'a>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":180930,"byte_end":180935,"line_start":198,"line_end":198,"column_start":12,"column_end":17},"name":"write","qualname":"<Part<'a>>::write","value":"fn (&self, out: &mut [u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5461},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":181812,"byte_end":181821,"line_start":226,"line_end":226,"column_start":12,"column_end":21},"name":"Formatted","qualname":"::num::flt2dec::Formatted","value":"Formatted { sign, parts }","parent":null,"children":[{"krate":0,"index":2147486306},{"krate":0,"index":2147486307}],"decl_id":null,"docs":" Formatted result containing one or more parts.\n This can be written to the byte buffer or converted to the allocated string.\n","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":181744,"byte_end":181783,"line_start":224,"line_end":224,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":2147486306},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":181907,"byte_end":181911,"line_start":228,"line_end":228,"column_start":9,"column_end":13},"name":"sign","qualname":"::num::flt2dec::Formatted::sign","value":"&'static [u8]","parent":{"krate":0,"index":5461},"children":[],"decl_id":null,"docs":" A byte slice representing a sign, either `\"\"`, `\"-\"` or `\"+\"`.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2147486307},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":182015,"byte_end":182020,"line_start":230,"line_end":230,"column_start":9,"column_end":14},"name":"parts","qualname":"::num::flt2dec::Formatted::parts","value":"&'a [num::flt2dec::Part<'a>]","parent":{"krate":0,"index":5461},"children":[],"decl_id":null,"docs":" Formatted parts to be rendered after a sign and optional zero padding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":182145,"byte_end":182148,"line_start":235,"line_end":235,"column_start":12,"column_end":15},"name":"len","qualname":"<Formatted<'a>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":182544,"byte_end":182549,"line_start":246,"line_end":246,"column_start":12,"column_end":17},"name":"write","qualname":"<Formatted<'a>>::write","value":"fn (&self, out: &mut [u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486310},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":187627,"byte_end":187632,"line_start":374,"line_end":374,"column_start":5,"column_end":10},"name":"Minus","qualname":"::num::flt2dec::Sign::Minus","value":"Sign::Minus","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Prints `-` only for the negative non-zero values.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486311},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":187753,"byte_end":187761,"line_start":376,"line_end":376,"column_start":5,"column_end":13},"name":"MinusRaw","qualname":"::num::flt2dec::Sign::MinusRaw","value":"Sign::MinusRaw","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Prints `-` only for any negative values (including the negative zero).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486312},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":187871,"byte_end":187880,"line_start":378,"line_end":378,"column_start":5,"column_end":14},"name":"MinusPlus","qualname":"::num::flt2dec::Sign::MinusPlus","value":"Sign::MinusPlus","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Prints `-` for the negative non-zero values, or `+` otherwise.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486313},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":188010,"byte_end":188022,"line_start":380,"line_end":380,"column_start":5,"column_end":17},"name":"MinusPlusRaw","qualname":"::num::flt2dec::Sign::MinusPlusRaw","value":"Sign::MinusPlusRaw","parent":{"krate":0,"index":5464},"children":[],"decl_id":null,"docs":" Prints `-` for any negative values (including the negative zero), or `+` otherwise.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5464},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":187558,"byte_end":187562,"line_start":372,"line_end":372,"column_start":10,"column_end":14},"name":"Sign","qualname":"::num::flt2dec::Sign","value":"Sign::{Minus, MinusRaw, MinusPlus, MinusPlusRaw}","parent":null,"children":[{"krate":0,"index":2147486310},{"krate":0,"index":2147486311},{"krate":0,"index":2147486312},{"krate":0,"index":2147486313}],"decl_id":null,"docs":" Sign formatting options.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":187549,"byte_end":188054,"line_start":372,"line_end":381,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":187549,"byte_end":188054,"line_start":372,"line_end":381,"column_start":1,"column_end":2}}]},{"kind":"Function","id":{"krate":0,"index":271},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":189917,"byte_end":189932,"line_start":415,"line_end":415,"column_start":8,"column_end":23},"name":"to_shortest_str","qualname":"::num::flt2dec::to_shortest_str","value":"fn <'a, T, F> (mut format_shortest: F, v: T, sign: Sign, frac_digits: usize, _upper: bool, buf: &'a mut [u8], parts: &'a mut [Part<'a>]) -> Formatted<'a>","parent":null,"children":[],"decl_id":null,"docs":" Formats given floating point number into the decimal form with at least\n given number of fractional digits. The result is stored to the supplied parts\n array while utilizing given byte buffer as a scratch. `upper` is currently\n unused but left for the future decision to change the case of non-finite values,\n i.e. `inf` and `nan`. The first part to be rendered is always a `Part::Sign`\n (which can be an empty string if no sign is rendered).","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":272},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":192470,"byte_end":192489,"line_start":470,"line_end":470,"column_start":8,"column_end":27},"name":"to_shortest_exp_str","qualname":"::num::flt2dec::to_shortest_exp_str","value":"fn <'a, T, F> (mut format_shortest: F, v: T, sign: Sign, dec_bounds: (i16, i16), upper: bool, buf: &'a mut [u8], parts: &'a mut [Part<'a>]) -> Formatted<'a>","parent":null,"children":[],"decl_id":null,"docs":" Formats given floating point number into the decimal form or\n the exponential form, depending on the resulting exponent. The result is\n stored to the supplied parts array while utilizing given byte buffer\n as a scratch. `upper` is used to determine the case of non-finite values\n (`inf` and `nan`) or the case of the exponent prefix (`e` or `E`).\n The first part to be rendered is always a `Part::Sign` (which can be\n an empty string if no sign is rendered).","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":274},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":196277,"byte_end":196293,"line_start":549,"line_end":549,"column_start":8,"column_end":24},"name":"to_exact_exp_str","qualname":"::num::flt2dec::to_exact_exp_str","value":"fn <'a, T, F> (mut format_exact: F, v: T, sign: Sign, ndigits: usize, upper: bool, buf: &'a mut [u8], parts: &'a mut [Part<'a>]) -> Formatted<'a>","parent":null,"children":[],"decl_id":null,"docs":" Formats given floating point number into the exponential form with\n exactly given number of significant digits. The result is stored to\n the supplied parts array while utilizing given byte buffer as a scratch.\n `upper` is used to determine the case of the exponent prefix (`e` or `E`).\n The first part to be rendered is always a `Part::Sign` (which can be\n an empty string if no sign is rendered).","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":275},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":199001,"byte_end":199019,"line_start":605,"line_end":605,"column_start":8,"column_end":26},"name":"to_exact_fixed_str","qualname":"::num::flt2dec::to_exact_fixed_str","value":"fn <'a, T, F> (mut format_exact: F, v: T, sign: Sign, frac_digits: usize, _upper: bool, buf: &'a mut [u8], parts: &'a mut [Part<'a>]) -> Formatted<'a>","parent":null,"children":[],"decl_id":null,"docs":" Formats given floating point number into the decimal form with exactly\n given number of fractional digits. The result is stored to the supplied parts\n array while utilizing given byte buffer as a scratch. `upper` is currently\n unused but left for the future decision to change the case of non-finite values,\n i.e. `inf` and `nan`. The first part to be rendered is always a `Part::Sign`\n (which can be an empty string if no sign is rendered).","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":276},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dec2flt","qualname":"::num::dec2flt","value":"src/libcore/num/dec2flt/mod.rs","parent":null,"children":[{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":316},{"krate":0,"index":322},{"krate":0,"index":334},{"krate":0,"index":420},{"krate":0,"index":432},{"krate":0,"index":5521},{"krate":0,"index":5524},{"krate":0,"index":5527},{"krate":0,"index":5535},{"krate":0,"index":5533},{"krate":0,"index":5530},{"krate":0,"index":5528},{"krate":0,"index":5537},{"krate":0,"index":5544},{"krate":0,"index":5542},{"krate":0,"index":5540},{"krate":0,"index":5538},{"krate":0,"index":433},{"krate":0,"index":435},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444}],"decl_id":null,"docs":" Converting decimal strings into IEEE 754 binary floating point numbers.","sig":null,"attributes":[{"value":"unstable(feature = \"dec2flt\",\n           reason = \"internal routines only exposed for testing\",\n           issue = \"0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":258154,"byte_end":258279,"line_start":91,"line_end":93,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":307},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,97,108,103,111,114,105,116,104,109,46,114,115],"byte_start":268940,"byte_end":268953,"line_start":38,"line_end":38,"column_start":12,"column_end":25},"name":"set_precision","qualname":"::num::dec2flt::algorithm::fpu_precision::set_precision","value":"fn <T> () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":308},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,97,108,103,111,114,105,116,104,109,46,114,115],"byte_start":271848,"byte_end":271857,"line_start":107,"line_end":107,"column_start":8,"column_end":17},"name":"fast_path","qualname":"::num::dec2flt::algorithm::fast_path","value":"fn <T> (integral: &[u8], fractional: &[u8], e: i64) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" The fast path of Bellerophon using machine-sized integers and floats.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":309},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,97,108,103,111,114,105,116,104,109,46,114,115],"byte_start":274443,"byte_end":274454,"line_start":155,"line_end":155,"column_start":8,"column_end":19},"name":"bellerophon","qualname":"::num::dec2flt::algorithm::bellerophon","value":"fn <T> (f: &Big, e: i16) -> T","parent":null,"children":[],"decl_id":null,"docs":" Algorithm Bellerophon is trivial code justified by non-trivial numeric analysis.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":312},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,97,108,103,111,114,105,116,104,109,46,114,115],"byte_start":280251,"byte_end":280262,"line_start":287,"line_end":287,"column_start":8,"column_end":19},"name":"algorithm_m","qualname":"::num::dec2flt::algorithm::algorithm_m","value":"fn <T> (f: &Big, e: i16) -> T","parent":null,"children":[],"decl_id":null,"docs":" Conceptually, Algorithm M is the simplest way to convert a decimal to a float.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":317},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,116,97,98,108,101,46,114,115],"byte_start":285915,"byte_end":285920,"line_start":14,"line_end":14,"column_start":11,"column_end":16},"name":"MIN_E","qualname":"::num::dec2flt::table::MIN_E","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":318},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,116,97,98,108,101,46,114,115],"byte_start":285944,"byte_end":285949,"line_start":15,"line_end":15,"column_start":11,"column_end":16},"name":"MAX_E","qualname":"::num::dec2flt::table::MAX_E","value":"i16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":319},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,116,97,98,108,101,46,114,115],"byte_start":285973,"byte_end":285979,"line_start":17,"line_end":17,"column_start":11,"column_end":17},"name":"POWERS","qualname":"::num::dec2flt::table::POWERS","value":"([u64; 611], [i16; 611])","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":320},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,116,97,98,108,101,46,114,115],"byte_start":306477,"byte_end":306493,"line_start":1243,"line_end":1243,"column_start":11,"column_end":27},"name":"F32_SHORT_POWERS","qualname":"::num::dec2flt::table::F32_SHORT_POWERS","value":"[f32; 11]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":321},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,116,97,98,108,101,46,114,115],"byte_start":306623,"byte_end":306639,"line_start":1257,"line_end":1257,"column_start":11,"column_end":27},"name":"F64_SHORT_POWERS","qualname":"::num::dec2flt::table::F64_SHORT_POWERS","value":"[f64; 23]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":329},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,110,117,109,46,114,115],"byte_start":307768,"byte_end":307789,"line_start":21,"line_end":21,"column_start":8,"column_end":29},"name":"compare_with_half_ulp","qualname":"::num::dec2flt::num::compare_with_half_ulp","value":"fn (f: &Big, ones_place: usize) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":" Test whether truncating all bits less significant than `ones_place` introduces\n a relative error less, equal, or greater than 0.5 ULP.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":330},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,110,117,109,46,114,115],"byte_start":308832,"byte_end":308850,"line_start":49,"line_end":49,"column_start":8,"column_end":26},"name":"from_str_unchecked","qualname":"::num::dec2flt::num::from_str_unchecked","value":"fn <'a, T> (bytes: T) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Convert an ASCII string containing only decimal digits to a `u64`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":331},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,110,117,109,46,114,115],"byte_start":309182,"byte_end":309195,"line_start":60,"line_end":60,"column_start":8,"column_end":21},"name":"digits_to_big","qualname":"::num::dec2flt::num::digits_to_big","value":"fn (integral: &[u8], fractional: &[u8]) -> Big","parent":null,"children":[],"decl_id":null,"docs":" Convert a string of ASCII digits into a bignum.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":332},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,110,117,109,46,114,115],"byte_start":309512,"byte_end":309518,"line_start":71,"line_end":71,"column_start":8,"column_end":14},"name":"to_u64","qualname":"::num::dec2flt::num::to_u64","value":"fn (x: &Big) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Unwraps a bignum into a 64 bit integer. Panics if the number is too large.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":333},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,110,117,109,46,114,115],"byte_start":309888,"byte_end":309896,"line_start":86,"line_end":86,"column_start":8,"column_end":16},"name":"get_bits","qualname":"::num::dec2flt::num::get_bits","value":"fn (x: &Big, start: usize, end: usize) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Extract a range of bits.\n Index 0 is the least significant bit and the range is half-open as usual.\n Panics if asked to extract more bits than fit into the return type.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":334},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rawfp","qualname":"::num::dec2flt::rawfp","value":"src/libcore/num/dec2flt/rawfp.rs","parent":null,"children":[{"krate":0,"index":335},{"krate":0,"index":339},{"krate":0,"index":343},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":5474},{"krate":0,"index":5479},{"krate":0,"index":5477},{"krate":0,"index":5475},{"krate":0,"index":360},{"krate":0,"index":362},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":400},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419}],"decl_id":null,"docs":" Bit fiddling on positive IEEE 754 floats. Negative numbers aren't and needn't be handled.\n Normal floating point numbers have a canonical representation as (frac, exp) such that the\n value is 2<sup>exp</sup> * (1 + sum(frac[N-i] / 2<sup>i</sup>)) where N is the number of bits.\n Subnormals are slightly different and weird, but the same principle applies.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5474},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":312028,"byte_end":312036,"line_start":42,"line_end":42,"column_start":12,"column_end":20},"name":"Unpacked","qualname":"::num::dec2flt::rawfp::Unpacked","value":"Unpacked { sig, k }","parent":null,"children":[{"krate":0,"index":2147486314},{"krate":0,"index":2147486315}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":312017,"byte_end":312074,"line_start":42,"line_end":45,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":2147486314},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":312047,"byte_end":312050,"line_start":43,"line_end":43,"column_start":9,"column_end":12},"name":"sig","qualname":"::num::dec2flt::rawfp::Unpacked::sig","value":"u64","parent":{"krate":0,"index":5474},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2147486315},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":312065,"byte_end":312066,"line_start":44,"line_end":44,"column_start":9,"column_end":10},"name":"k","qualname":"::num::dec2flt::rawfp::Unpacked::k","value":"i16","parent":{"krate":0,"index":5474},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":312103,"byte_end":312106,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<Unpacked>::new","value":"fn (sig: u64, k: i16) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":362},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":312553,"byte_end":312561,"line_start":59,"line_end":59,"column_start":11,"column_end":19},"name":"RawFloat","qualname":"::num::dec2flt::rawfp::RawFloat","value":"RawFloat:  Float + Copy + Debug + LowerExp + Mul<Output = Self> + Div<Output = Self> +\nNeg<Output = Self>","parent":null,"children":[{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385}],"decl_id":null,"docs":" A helper trait to avoid duplicating basically all the conversion code for `f32` and `f64`.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":363},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":312685,"byte_end":312693,"line_start":62,"line_end":62,"column_start":11,"column_end":19},"name":"INFINITY","qualname":"::num::dec2flt::rawfp::RawFloat::INFINITY","value":"Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":364},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":312711,"byte_end":312714,"line_start":63,"line_end":63,"column_start":11,"column_end":14},"name":"NAN","qualname":"::num::dec2flt::rawfp::RawFloat::NAN","value":"Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":365},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":312732,"byte_end":312736,"line_start":64,"line_end":64,"column_start":11,"column_end":15},"name":"ZERO","qualname":"::num::dec2flt::rawfp::RawFloat::ZERO","value":"Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":312813,"byte_end":312827,"line_start":67,"line_end":67,"column_start":8,"column_end":22},"name":"integer_decode","qualname":"::num::dec2flt::rawfp::RawFloat::integer_decode","value":"fn (self) -> (u64, i16, i8)","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" A helper trait to avoid duplicating basically all the conversion code for `f32` and `f64`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":312917,"byte_end":312926,"line_start":70,"line_end":70,"column_start":8,"column_end":17},"name":"transmute","qualname":"::num::dec2flt::rawfp::RawFloat::transmute","value":"fn (self) -> u64","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" A helper trait to avoid duplicating basically all the conversion code for `f32` and `f64`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":313011,"byte_end":313020,"line_start":73,"line_end":73,"column_start":8,"column_end":17},"name":"from_bits","qualname":"::num::dec2flt::rawfp::RawFloat::from_bits","value":"fn (bits: u64) -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" A helper trait to avoid duplicating basically all the conversion code for `f32` and `f64`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":369},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":313075,"byte_end":313081,"line_start":76,"line_end":76,"column_start":8,"column_end":14},"name":"unpack","qualname":"::num::dec2flt::rawfp::RawFloat::unpack","value":"fn (self) -> Unpacked","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" A helper trait to avoid duplicating basically all the conversion code for `f32` and `f64`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":313295,"byte_end":313303,"line_start":80,"line_end":80,"column_start":8,"column_end":16},"name":"from_int","qualname":"::num::dec2flt::rawfp::RawFloat::from_int","value":"fn (x: u64) -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" A helper trait to avoid duplicating basically all the conversion code for `f32` and `f64`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":313441,"byte_end":313457,"line_start":84,"line_end":84,"column_start":8,"column_end":24},"name":"short_fast_pow10","qualname":"::num::dec2flt::rawfp::RawFloat::short_fast_pow10","value":"fn (e: usize) -> Self","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" A helper trait to avoid duplicating basically all the conversion code for `f32` and `f64`.","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":372},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":313609,"byte_end":313629,"line_start":88,"line_end":88,"column_start":11,"column_end":31},"name":"CEIL_LOG5_OF_MAX_SIG","qualname":"::num::dec2flt::rawfp::RawFloat::CEIL_LOG5_OF_MAX_SIG","value":"i16","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" What the name says. It's easier to hard code than juggling intrinsics and\n hoping LLVM constant folds it.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":373},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":313841,"byte_end":313858,"line_start":92,"line_end":92,"column_start":11,"column_end":28},"name":"MAX_NORMAL_DIGITS","qualname":"::num::dec2flt::rawfp::RawFloat::MAX_NORMAL_DIGITS","value":"usize","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" subnormals. Probably the decimal exponent of the maximum normal value, hence the name.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":374},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":314016,"byte_end":314026,"line_start":96,"line_end":96,"column_start":11,"column_end":21},"name":"INF_CUTOFF","qualname":"::num::dec2flt::rawfp::RawFloat::INF_CUTOFF","value":"i64","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" When the most significant decimal digit has a place value greater than this, the number\n is certainly rounded to infinity.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":375},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":314175,"byte_end":314186,"line_start":100,"line_end":100,"column_start":11,"column_end":22},"name":"ZERO_CUTOFF","qualname":"::num::dec2flt::rawfp::RawFloat::ZERO_CUTOFF","value":"i64","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" When the most significant decimal digit has a place value less than this, the number\n is certainly rounded to zero.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":376},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":314248,"byte_end":314256,"line_start":103,"line_end":103,"column_start":11,"column_end":19},"name":"EXP_BITS","qualname":"::num::dec2flt::rawfp::RawFloat::EXP_BITS","value":"u8","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" The number of bits in the exponent.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":377},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":314348,"byte_end":314356,"line_start":106,"line_end":106,"column_start":11,"column_end":19},"name":"SIG_BITS","qualname":"::num::dec2flt::rawfp::RawFloat::SIG_BITS","value":"u8","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" The number of bits in the significand, *including* the hidden bit.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":378},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":314448,"byte_end":314465,"line_start":109,"line_end":109,"column_start":11,"column_end":28},"name":"EXPLICIT_SIG_BITS","qualname":"::num::dec2flt::rawfp::RawFloat::EXPLICIT_SIG_BITS","value":"u8","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" The number of bits in the significand, *excluding* the hidden bit.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":379},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":314547,"byte_end":314554,"line_start":112,"line_end":112,"column_start":11,"column_end":18},"name":"MAX_EXP","qualname":"::num::dec2flt::rawfp::RawFloat::MAX_EXP","value":"i16","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" The maximum legal exponent in fractional representation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":380},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":314659,"byte_end":314666,"line_start":115,"line_end":115,"column_start":11,"column_end":18},"name":"MIN_EXP","qualname":"::num::dec2flt::rawfp::RawFloat::MIN_EXP","value":"i16","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" The minimum legal exponent in fractional representation, excluding subnormals.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":381},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":314761,"byte_end":314772,"line_start":118,"line_end":118,"column_start":11,"column_end":22},"name":"MAX_EXP_INT","qualname":"::num::dec2flt::rawfp::RawFloat::MAX_EXP_INT","value":"i16","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" `MAX_EXP` for integral representation, i.e., with the shift applied.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":382},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":314841,"byte_end":314856,"line_start":121,"line_end":121,"column_start":11,"column_end":26},"name":"MAX_ENCODED_EXP","qualname":"::num::dec2flt::rawfp::RawFloat::MAX_ENCODED_EXP","value":"i16","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" `MAX_EXP` encoded (i.e., with offset bias)\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":383},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":314951,"byte_end":314962,"line_start":124,"line_end":124,"column_start":11,"column_end":22},"name":"MIN_EXP_INT","qualname":"::num::dec2flt::rawfp::RawFloat::MIN_EXP_INT","value":"i16","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" `MIN_EXP` for integral representation, i.e., with the shift applied.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":384},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":315051,"byte_end":315058,"line_start":127,"line_end":127,"column_start":11,"column_end":18},"name":"MAX_SIG","qualname":"::num::dec2flt::rawfp::RawFloat::MAX_SIG","value":"u64","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" The maximum normalized significand in integral representation.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":385},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":315147,"byte_end":315154,"line_start":130,"line_end":130,"column_start":11,"column_end":18},"name":"MIN_SIG","qualname":"::num::dec2flt::rawfp::RawFloat::MIN_SIG","value":"u64","parent":{"krate":0,"index":362},"children":[],"decl_id":null,"docs":" The minimal normalized significand in integral representation.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":413},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":318930,"byte_end":318941,"line_start":253,"line_end":253,"column_start":8,"column_end":19},"name":"fp_to_float","qualname":"::num::dec2flt::rawfp::fp_to_float","value":"fn <T> (x: Fp) -> T","parent":null,"children":[],"decl_id":null,"docs":" Convert an Fp to the closest machine float type.\n Does not handle subnormal results.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":414},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":319426,"byte_end":319438,"line_start":268,"line_end":268,"column_start":8,"column_end":20},"name":"round_normal","qualname":"::num::dec2flt::rawfp::round_normal","value":"fn <T> (x: Fp) -> Unpacked","parent":null,"children":[],"decl_id":null,"docs":" Round the 64-bit significand to T::SIG_BITS bits with half-to-even.\n Does not handle exponent overflow.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":415},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":320106,"byte_end":320119,"line_start":288,"line_end":288,"column_start":8,"column_end":21},"name":"encode_normal","qualname":"::num::dec2flt::rawfp::encode_normal","value":"fn <T> (x: Unpacked) -> T","parent":null,"children":[],"decl_id":null,"docs":" Inverse of `RawFloat::unpack()` for normalized numbers.\n Panics if the significand or exponent are not valid for normalized numbers.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":416},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":320827,"byte_end":320843,"line_start":303,"line_end":303,"column_start":8,"column_end":24},"name":"encode_subnormal","qualname":"::num::dec2flt::rawfp::encode_subnormal","value":"fn <T> (significand: u64) -> T","parent":null,"children":[],"decl_id":null,"docs":" Construct a subnormal. A mantissa of 0 is allowed and constructs zero.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":417},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":321173,"byte_end":321182,"line_start":310,"line_end":310,"column_start":8,"column_end":17},"name":"big_to_fp","qualname":"::num::dec2flt::rawfp::big_to_fp","value":"fn (f: &Big) -> Fp","parent":null,"children":[],"decl_id":null,"docs":" Approximate a bignum with an Fp. Rounds within 0.5 ULP with half-to-even.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":418},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":322145,"byte_end":322155,"line_start":332,"line_end":332,"column_start":8,"column_end":18},"name":"prev_float","qualname":"::num::dec2flt::rawfp::prev_float","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Find the largest floating point number strictly smaller than the argument.\n Does not handle subnormals, zero, or exponent underflow.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":419},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":323056,"byte_end":323066,"line_start":353,"line_end":353,"column_start":8,"column_end":18},"name":"next_float","qualname":"::num::dec2flt::rawfp::next_float","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":420},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"parse","qualname":"::num::dec2flt::parse","value":"src/libcore/num/dec2flt/parse.rs","parent":null,"children":[{"krate":0,"index":421},{"krate":0,"index":426},{"krate":0,"index":5502},{"krate":0,"index":5503},{"krate":0,"index":5505},{"krate":0,"index":5511},{"krate":0,"index":5508},{"krate":0,"index":5506},{"krate":0,"index":427},{"krate":0,"index":5513},{"krate":0,"index":5519},{"krate":0,"index":5516},{"krate":0,"index":5514},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431}],"decl_id":null,"docs":" Validating and decomposing a decimal string of the form:","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486338},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":325305,"byte_end":325313,"line_start":28,"line_end":28,"column_start":5,"column_end":13},"name":"Positive","qualname":"::num::dec2flt::parse::Sign::Positive","value":"Sign::Positive","parent":{"krate":0,"index":5502},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486339},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":325319,"byte_end":325327,"line_start":29,"line_end":29,"column_start":5,"column_end":13},"name":"Negative","qualname":"::num::dec2flt::parse::Sign::Negative","value":"Sign::Negative","parent":{"krate":0,"index":5502},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5502},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":325294,"byte_end":325298,"line_start":27,"line_end":27,"column_start":10,"column_end":14},"name":"Sign","qualname":"::num::dec2flt::parse::Sign","value":"Sign::{Positive, Negative}","parent":null,"children":[{"krate":0,"index":2147486338},{"krate":0,"index":2147486339}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5505},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":325422,"byte_end":325429,"line_start":34,"line_end":34,"column_start":12,"column_end":19},"name":"Decimal","qualname":"::num::dec2flt::parse::Decimal","value":"Decimal { integral, fractional, exp }","parent":null,"children":[{"krate":0,"index":2147486340},{"krate":0,"index":2147486341},{"krate":0,"index":2147486342}],"decl_id":null,"docs":" The interesting parts of a decimal string.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":325411,"byte_end":325592,"line_start":34,"line_end":39,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":2147486340},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":325444,"byte_end":325452,"line_start":35,"line_end":35,"column_start":9,"column_end":17},"name":"integral","qualname":"::num::dec2flt::parse::Decimal::integral","value":"&'a [u8]","parent":{"krate":0,"index":5505},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2147486341},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":325472,"byte_end":325482,"line_start":36,"line_end":36,"column_start":9,"column_end":19},"name":"fractional","qualname":"::num::dec2flt::parse::Decimal::fractional","value":"&'a [u8]","parent":{"krate":0,"index":5505},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2147486342},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":325581,"byte_end":325584,"line_start":38,"line_end":38,"column_start":9,"column_end":12},"name":"exp","qualname":"::num::dec2flt::parse::Decimal::exp","value":"i64","parent":{"krate":0,"index":5505},"children":[],"decl_id":null,"docs":" The decimal exponent, guaranteed to have fewer than 18 decimal digits.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":325628,"byte_end":325631,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<Decimal<'a>>::new","value":"fn (integral: &'a [u8], fractional: &'a [u8], exp: i64) -> Decimal<'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486347},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":325846,"byte_end":325851,"line_start":49,"line_end":49,"column_start":5,"column_end":10},"name":"Valid","qualname":"::num::dec2flt::parse::ParseResult::Valid","value":"ParseResult::Valid(Decimal<'a>)","parent":{"krate":0,"index":5513},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486349},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":325870,"byte_end":325883,"line_start":50,"line_end":50,"column_start":5,"column_end":18},"name":"ShortcutToInf","qualname":"::num::dec2flt::parse::ParseResult::ShortcutToInf","value":"ParseResult::ShortcutToInf","parent":{"krate":0,"index":5513},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486350},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":325889,"byte_end":325903,"line_start":51,"line_end":51,"column_start":5,"column_end":19},"name":"ShortcutToZero","qualname":"::num::dec2flt::parse::ParseResult::ShortcutToZero","value":"ParseResult::ShortcutToZero","parent":{"krate":0,"index":5513},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486351},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":325909,"byte_end":325916,"line_start":52,"line_end":52,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::num::dec2flt::parse::ParseResult::Invalid","value":"ParseResult::Invalid","parent":{"krate":0,"index":5513},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":5513},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":325824,"byte_end":325835,"line_start":48,"line_end":48,"column_start":10,"column_end":21},"name":"ParseResult","qualname":"::num::dec2flt::parse::ParseResult","value":"ParseResult::{Valid, ShortcutToInf, ShortcutToZero, Invalid}","parent":null,"children":[{"krate":0,"index":2147486347},{"krate":0,"index":2147486349},{"krate":0,"index":2147486350},{"krate":0,"index":2147486351}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":325815,"byte_end":325919,"line_start":48,"line_end":53,"column_start":1,"column_end":2}}]},{"kind":"Function","id":{"krate":0,"index":429},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":326100,"byte_end":326113,"line_start":57,"line_end":57,"column_start":8,"column_end":21},"name":"parse_decimal","qualname":"::num::dec2flt::parse::parse_decimal","value":"fn (s: &str) -> ParseResult","parent":null,"children":[],"decl_id":null,"docs":" Check if the input string is a valid floating point number and if so, locate the integral\n part, the fractional part, and the exponent in it. Does not handle signs.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":5527},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":260189,"byte_end":260204,"line_start":159,"line_end":159,"column_start":12,"column_end":27},"name":"ParseFloatError","qualname":"::num::dec2flt::ParseFloatError","value":"ParseFloatError {  }","parent":null,"children":[{"krate":0,"index":2147486356}],"decl_id":null,"docs":" An error which can be returned when parsing a float.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":260132,"byte_end":260177,"line_start":158,"line_end":158,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":260178,"byte_end":260233,"line_start":159,"line_end":161,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":260584,"byte_end":260597,"line_start":175,"line_end":175,"column_start":12,"column_end":25},"name":"__description","qualname":"<ParseFloatError>::__description","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":445},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bignum","qualname":"::num::bignum","value":"src/libcore/num/bignum.rs","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":453},{"krate":0,"index":5546},{"krate":0,"index":5551},{"krate":0,"index":5556},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":5561},{"krate":0,"index":5562},{"krate":0,"index":5594},{"krate":0,"index":5596},{"krate":0,"index":5597},{"krate":0,"index":5599},{"krate":0,"index":5602},{"krate":0,"index":5604},{"krate":0,"index":457}],"decl_id":null,"docs":" Custom arbitrary-precision number (bignum) implementation.","sig":null,"attributes":[{"value":"unstable(feature = \"core_private_bignum\",\n           reason = \"internal routines only exposed for testing\",\n           issue = \"0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":329979,"byte_end":330116,"line_start":25,"line_end":27,"column_start":1,"column_end":26}},{"value":"macro_use","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":330117,"byte_end":330130,"line_start":28,"line_end":28,"column_start":1,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":448},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":330215,"byte_end":330222,"line_start":34,"line_end":34,"column_start":11,"column_end":18},"name":"FullOps","qualname":"::num::bignum::FullOps","value":"FullOps:  Sized","parent":null,"children":[{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452}],"decl_id":null,"docs":" Arithmetic operations required by bignums.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":330375,"byte_end":330383,"line_start":37,"line_end":37,"column_start":8,"column_end":16},"name":"full_add","qualname":"::num::bignum::FullOps::full_add","value":"fn (self, other: Self, carry: bool) -> (bool, Self)","parent":{"krate":0,"index":448},"children":[],"decl_id":null,"docs":" Arithmetic operations required by bignums.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":330589,"byte_end":330597,"line_start":41,"line_end":41,"column_start":8,"column_end":16},"name":"full_mul","qualname":"::num::bignum::FullOps::full_mul","value":"fn (self, other: Self, carry: Self) -> (Self, Self)","parent":{"krate":0,"index":448},"children":[],"decl_id":null,"docs":" Arithmetic operations required by bignums.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":330812,"byte_end":330824,"line_start":45,"line_end":45,"column_start":8,"column_end":20},"name":"full_mul_add","qualname":"::num::bignum::FullOps::full_mul_add","value":"fn (self, other: Self, other2: Self, carry: Self) -> (Self, Self)","parent":{"krate":0,"index":448},"children":[],"decl_id":null,"docs":" Arithmetic operations required by bignums.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":331064,"byte_end":331076,"line_start":49,"line_end":49,"column_start":8,"column_end":20},"name":"full_div_rem","qualname":"::num::bignum::FullOps::full_div_rem","value":"fn (self, other: Self, borrow: Self) -> (Self, Self)","parent":{"krate":0,"index":448},"children":[],"decl_id":null,"docs":" Arithmetic operations required by bignums.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":456},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":348355,"byte_end":348362,"line_start":487,"line_end":487,"column_start":10,"column_end":17},"name":"Digit32","qualname":"::num::bignum::Digit32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The digit type for `Big32x40`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":457},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":348479,"byte_end":348484,"line_start":493,"line_end":493,"column_start":9,"column_end":14},"name":"tests","qualname":"::num::bignum::tests","value":"src/libcore/num/bignum.rs","parent":null,"children":[{"krate":0,"index":5607},{"krate":0,"index":5608},{"krate":0,"index":5640},{"krate":0,"index":5642},{"krate":0,"index":5643},{"krate":0,"index":5645},{"krate":0,"index":5648},{"krate":0,"index":5650}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":458},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"diy_float","qualname":"::num::diy_float","value":"src/libcore/num/diy_float.rs","parent":null,"children":[{"krate":0,"index":5653},{"krate":0,"index":5658},{"krate":0,"index":5656},{"krate":0,"index":5654},{"krate":0,"index":459}],"decl_id":null,"docs":" Extended precision \"soft float\", for internal use only.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_private_diy_float\",\n           reason = \"internal routines only exposed for testing\",\n           issue = \"0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":349207,"byte_end":349347,"line_start":16,"line_end":18,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":5653},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":349470,"byte_end":349472,"line_start":23,"line_end":23,"column_start":12,"column_end":14},"name":"Fp","qualname":"::num::diy_float::Fp","value":"Fp { f, e }","parent":null,"children":[{"krate":0,"index":2147486389},{"krate":0,"index":2147486390}],"decl_id":null,"docs":" A custom 64-bit floating point type, representing `f * 2^e`.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":349459,"byte_end":349570,"line_start":23,"line_end":28,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":2147486389},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":349513,"byte_end":349514,"line_start":25,"line_end":25,"column_start":9,"column_end":10},"name":"f","qualname":"::num::diy_float::Fp::f","value":"u64","parent":{"krate":0,"index":5653},"children":[],"decl_id":null,"docs":" The integer mantissa.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2147486390},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":349561,"byte_end":349562,"line_start":27,"line_end":27,"column_start":9,"column_end":10},"name":"e","qualname":"::num::diy_float::Fp::e","value":"i16","parent":{"krate":0,"index":5653},"children":[],"decl_id":null,"docs":" The exponent in base 2.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":349660,"byte_end":349663,"line_start":32,"line_end":32,"column_start":12,"column_end":15},"name":"mul","qualname":"<Fp>::mul","value":"fn (&self, other: &Fp) -> Fp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":350251,"byte_end":350260,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"normalize","qualname":"<Fp>::normalize","value":"fn (&self) -> Fp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":351050,"byte_end":351062,"line_start":82,"line_end":82,"column_start":12,"column_end":24},"name":"normalize_to","qualname":"<Fp>::normalize_to","value":"fn (&self, e: i16) -> Fp","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486397},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140341,"byte_end":140344,"line_start":2386,"line_end":2386,"column_start":5,"column_end":8},"name":"Nan","qualname":"::num::FpCategory::Nan","value":"FpCategory::Nan","parent":{"krate":0,"index":6229},"children":[],"decl_id":null,"docs":" \"Not a Number\", often obtained by dividing by zero.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140291,"byte_end":140336,"line_start":2385,"line_end":2385,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486398},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140440,"byte_end":140448,"line_start":2390,"line_end":2390,"column_start":5,"column_end":13},"name":"Infinite","qualname":"::num::FpCategory::Infinite","value":"FpCategory::Infinite","parent":{"krate":0,"index":6229},"children":[],"decl_id":null,"docs":" Positive or negative infinity.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140390,"byte_end":140435,"line_start":2389,"line_end":2389,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486399},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140540,"byte_end":140544,"line_start":2394,"line_end":2394,"column_start":5,"column_end":9},"name":"Zero","qualname":"::num::FpCategory::Zero","value":"FpCategory::Zero","parent":{"krate":0,"index":6229},"children":[],"decl_id":null,"docs":" Positive or negative zero.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140490,"byte_end":140535,"line_start":2393,"line_end":2393,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486400},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140683,"byte_end":140692,"line_start":2398,"line_end":2398,"column_start":5,"column_end":14},"name":"Subnormal","qualname":"::num::FpCategory::Subnormal","value":"FpCategory::Subnormal","parent":{"krate":0,"index":6229},"children":[],"decl_id":null,"docs":" De-normalized floating point representation (less precise than `Normal`).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140633,"byte_end":140678,"line_start":2397,"line_end":2397,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147486401},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140790,"byte_end":140796,"line_start":2402,"line_end":2402,"column_start":5,"column_end":11},"name":"Normal","qualname":"::num::FpCategory::Normal","value":"FpCategory::Normal","parent":{"krate":0,"index":6229},"children":[],"decl_id":null,"docs":" A regular floating point number.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140740,"byte_end":140785,"line_start":2401,"line_end":2401,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":6229},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140214,"byte_end":140224,"line_start":2383,"line_end":2383,"column_start":10,"column_end":20},"name":"FpCategory","qualname":"::num::FpCategory","value":"FpCategory::{Nan, Infinite, Zero, Subnormal, Normal}","parent":null,"children":[{"krate":0,"index":2147486397},{"krate":0,"index":2147486398},{"krate":0,"index":2147486399},{"krate":0,"index":2147486400},{"krate":0,"index":2147486401}],"decl_id":null,"docs":" A classification of floating point numbers.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140159,"byte_end":140204,"line_start":2382,"line_end":2382,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140205,"byte_end":140799,"line_start":2383,"line_end":2403,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140205,"byte_end":140799,"line_start":2383,"line_end":2403,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":478},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":141007,"byte_end":141012,"line_start":2410,"line_end":2410,"column_start":11,"column_end":16},"name":"Float","qualname":"::num::Float","value":"Float:  Sized","parent":null,"children":[{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493}],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140854,"byte_end":140996,"line_start":2407,"line_end":2409,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":141143,"byte_end":141149,"line_start":2413,"line_end":2413,"column_start":8,"column_end":14},"name":"is_nan","qualname":"::num::Float::is_nan","value":"fn (self) -> bool","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140854,"byte_end":140996,"line_start":2407,"line_end":2409,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":141329,"byte_end":141340,"line_start":2417,"line_end":2417,"column_start":8,"column_end":19},"name":"is_infinite","qualname":"::num::Float::is_infinite","value":"fn (self) -> bool","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140854,"byte_end":140996,"line_start":2407,"line_end":2409,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":141479,"byte_end":141488,"line_start":2420,"line_end":2420,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::num::Float::is_finite","value":"fn (self) -> bool","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140854,"byte_end":140996,"line_start":2407,"line_end":2409,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":141643,"byte_end":141652,"line_start":2423,"line_end":2423,"column_start":8,"column_end":17},"name":"is_normal","qualname":"::num::Float::is_normal","value":"fn (self) -> bool","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140854,"byte_end":140996,"line_start":2407,"line_end":2409,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":141782,"byte_end":141790,"line_start":2426,"line_end":2426,"column_start":8,"column_end":16},"name":"classify","qualname":"::num::Float::classify","value":"fn (self) -> FpCategory","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140854,"byte_end":140996,"line_start":2407,"line_end":2409,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":141980,"byte_end":141983,"line_start":2431,"line_end":2431,"column_start":8,"column_end":11},"name":"abs","qualname":"::num::Float::abs","value":"fn (self) -> Self","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140854,"byte_end":140996,"line_start":2407,"line_end":2409,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":142332,"byte_end":142338,"line_start":2438,"line_end":2438,"column_start":8,"column_end":14},"name":"signum","qualname":"::num::Float::signum","value":"fn (self) -> Self","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140854,"byte_end":140996,"line_start":2407,"line_end":2409,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":142507,"byte_end":142523,"line_start":2443,"line_end":2443,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::num::Float::is_sign_positive","value":"fn (self) -> bool","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140854,"byte_end":140996,"line_start":2407,"line_end":2409,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":142695,"byte_end":142711,"line_start":2447,"line_end":2447,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::num::Float::is_sign_negative","value":"fn (self) -> bool","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140854,"byte_end":140996,"line_start":2407,"line_end":2409,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":142842,"byte_end":142847,"line_start":2451,"line_end":2451,"column_start":8,"column_end":13},"name":"recip","qualname":"::num::Float::recip","value":"fn (self) -> Self","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140854,"byte_end":140996,"line_start":2407,"line_end":2409,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":143038,"byte_end":143042,"line_start":2457,"line_end":2457,"column_start":8,"column_end":12},"name":"powi","qualname":"::num::Float::powi","value":"fn (self, n: i32) -> Self","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140854,"byte_end":140996,"line_start":2407,"line_end":2409,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":143172,"byte_end":143182,"line_start":2461,"line_end":2461,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::num::Float::to_degrees","value":"fn (self) -> Self","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140854,"byte_end":140996,"line_start":2407,"line_end":2409,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":143303,"byte_end":143313,"line_start":2464,"line_end":2464,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::num::Float::to_radians","value":"fn (self) -> Self","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140854,"byte_end":140996,"line_start":2407,"line_end":2409,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":143447,"byte_end":143450,"line_start":2468,"line_end":2468,"column_start":8,"column_end":11},"name":"max","qualname":"::num::Float::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140854,"byte_end":140996,"line_start":2407,"line_end":2409,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":143596,"byte_end":143599,"line_start":2471,"line_end":2471,"column_start":8,"column_end":11},"name":"min","qualname":"::num::Float::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":478},"children":[],"decl_id":null,"docs":" A built-in floating point number.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_float\",\n           reason = \"stable interface is via `impl f{32,64}` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":140854,"byte_end":140996,"line_start":2407,"line_end":2409,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":6275},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":144206,"byte_end":144221,"line_start":2490,"line_end":2490,"column_start":12,"column_end":27},"name":"TryFromIntError","qualname":"::num::TryFromIntError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type returned when a checked integral type conversion fails.\n","sig":null,"attributes":[{"value":"unstable(feature = \"try_from\", issue = \"33417\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":144114,"byte_end":144164,"line_start":2488,"line_end":2488,"column_start":1,"column_end":51}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":144195,"byte_end":144226,"line_start":2490,"line_end":2490,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":144489,"byte_end":144502,"line_start":2498,"line_end":2498,"column_start":12,"column_end":25},"name":"__description","qualname":"<TryFromIntError>::__description","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":151233,"byte_end":151242,"line_start":2711,"line_end":2711,"column_start":8,"column_end":17},"name":"min_value","qualname":"::num::FromStrRadixHelper::min_value","value":"fn () -> Self","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":151261,"byte_end":151270,"line_start":2712,"line_end":2712,"column_start":8,"column_end":17},"name":"max_value","qualname":"::num::FromStrRadixHelper::max_value","value":"fn () -> Self","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":151289,"byte_end":151297,"line_start":2713,"line_end":2713,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::num::FromStrRadixHelper::from_u32","value":"fn (u: u32) -> Self","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":151322,"byte_end":151333,"line_start":2714,"line_end":2714,"column_start":8,"column_end":19},"name":"checked_mul","qualname":"::num::FromStrRadixHelper::checked_mul","value":"fn (&self, other: u32) -> Option<Self>","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":151377,"byte_end":151388,"line_start":2715,"line_end":2715,"column_start":8,"column_end":19},"name":"checked_sub","qualname":"::num::FromStrRadixHelper::checked_sub","value":"fn (&self, other: u32) -> Option<Self>","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":517},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":151432,"byte_end":151443,"line_start":2716,"line_end":2716,"column_start":8,"column_end":19},"name":"checked_add","qualname":"::num::FromStrRadixHelper::checked_add","value":"fn (&self, other: u32) -> Option<Self>","parent":{"krate":0,"index":511},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6665},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":154866,"byte_end":154879,"line_start":2818,"line_end":2818,"column_start":12,"column_end":25},"name":"ParseIntError","qualname":"::num::ParseIntError","value":"ParseIntError {  }","parent":null,"children":[{"krate":0,"index":2147486404}],"decl_id":null,"docs":" An error which can be returned when parsing an integer.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":154809,"byte_end":154854,"line_start":2817,"line_end":2817,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":154855,"byte_end":154907,"line_start":2818,"line_end":2820,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":155288,"byte_end":155301,"line_start":2836,"line_end":2836,"column_start":12,"column_end":25},"name":"__description","qualname":"<ParseIntError>::__description","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":528},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"src/libcore/prelude/mod.rs","parent":null,"children":[{"krate":0,"index":529}],"decl_id":null,"docs":" The libcore prelude\n","sig":null,"attributes":[{"value":"stable(feature = \"core_prelude\", since = \"1.4.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,109,111,100,46,114,115],"byte_start":351815,"byte_end":351868,"line_start":13,"line_end":13,"column_start":1,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":529},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"v1","qualname":"::prelude::v1","value":"src/libcore/prelude/v1.rs","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":546},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":556},{"krate":0,"index":559},{"krate":0,"index":563},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570}],"decl_id":null,"docs":" The core prelude","sig":null,"attributes":[{"value":"stable(feature = \"core_prelude\", since = \"1.4.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,118,49,46,114,115],"byte_start":352585,"byte_end":352638,"line_start":17,"line_end":17,"column_start":1,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":571},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"intrinsics","qualname":"::intrinsics","value":"src/libcore/intrinsics.rs","parent":null,"children":[{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574}],"decl_id":null,"docs":" rustc compiler intrinsics.","sig":null,"attributes":[{"value":"unstable(feature = \"core_intrinsics\",\n           reason =\n               \"intrinsics are unlikely to ever be stabilized, instead they should be used through stabilized interfaces in the rest of the standard library\",\n           issue = \"0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":355941,"byte_end":356220,"line_start":42,"line_end":46,"column_start":1,"column_end":26}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":356221,"byte_end":356244,"line_start":47,"line_end":47,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":2147483734},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":357158,"byte_end":357170,"line_start":66,"line_end":66,"column_start":12,"column_end":24},"name":"atomic_cxchg","qualname":"::intrinsics::::atomic_cxchg","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as both the `success` and `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483736},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":357758,"byte_end":357774,"line_start":75,"line_end":75,"column_start":12,"column_end":28},"name":"atomic_cxchg_acq","qualname":"::intrinsics::::atomic_cxchg_acq","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as both the `success` and `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483738},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":358444,"byte_end":358460,"line_start":86,"line_end":86,"column_start":12,"column_end":28},"name":"atomic_cxchg_rel","qualname":"::intrinsics::::atomic_cxchg_rel","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483740},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":359129,"byte_end":359148,"line_start":97,"line_end":97,"column_start":12,"column_end":31},"name":"atomic_cxchg_acqrel","qualname":"::intrinsics::::atomic_cxchg_acqrel","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483742},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":359736,"byte_end":359756,"line_start":106,"line_end":106,"column_start":12,"column_end":32},"name":"atomic_cxchg_relaxed","qualname":"::intrinsics::::atomic_cxchg_relaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as both the `success` and `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483744},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":360425,"byte_end":360449,"line_start":117,"line_end":117,"column_start":12,"column_end":36},"name":"atomic_cxchg_failrelaxed","qualname":"::intrinsics::::atomic_cxchg_failrelaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483746},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":361118,"byte_end":361138,"line_start":128,"line_end":128,"column_start":12,"column_end":32},"name":"atomic_cxchg_failacq","qualname":"::intrinsics::::atomic_cxchg_failacq","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483748},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":361808,"byte_end":361836,"line_start":139,"line_end":139,"column_start":12,"column_end":40},"name":"atomic_cxchg_acq_failrelaxed","qualname":"::intrinsics::::atomic_cxchg_acq_failrelaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483750},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":362505,"byte_end":362536,"line_start":150,"line_end":150,"column_start":12,"column_end":43},"name":"atomic_cxchg_acqrel_failrelaxed","qualname":"::intrinsics::::atomic_cxchg_acqrel_failrelaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange`][compare_exchange].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483752},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":363113,"byte_end":363129,"line_start":160,"line_end":160,"column_start":12,"column_end":28},"name":"atomic_cxchgweak","qualname":"::intrinsics::::atomic_cxchgweak","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as both the `success` and `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483754},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":363706,"byte_end":363726,"line_start":169,"line_end":169,"column_start":12,"column_end":32},"name":"atomic_cxchgweak_acq","qualname":"::intrinsics::::atomic_cxchgweak_acq","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as both the `success` and `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483756},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":364385,"byte_end":364405,"line_start":180,"line_end":180,"column_start":12,"column_end":32},"name":"atomic_cxchgweak_rel","qualname":"::intrinsics::::atomic_cxchgweak_rel","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483758},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":365063,"byte_end":365086,"line_start":191,"line_end":191,"column_start":12,"column_end":35},"name":"atomic_cxchgweak_acqrel","qualname":"::intrinsics::::atomic_cxchgweak_acqrel","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483760},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":365663,"byte_end":365687,"line_start":200,"line_end":200,"column_start":12,"column_end":36},"name":"atomic_cxchgweak_relaxed","qualname":"::intrinsics::::atomic_cxchgweak_relaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as both the `success` and `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483762},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":366345,"byte_end":366373,"line_start":211,"line_end":211,"column_start":12,"column_end":40},"name":"atomic_cxchgweak_failrelaxed","qualname":"::intrinsics::::atomic_cxchgweak_failrelaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483764},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":367031,"byte_end":367055,"line_start":222,"line_end":222,"column_start":12,"column_end":36},"name":"atomic_cxchgweak_failacq","qualname":"::intrinsics::::atomic_cxchgweak_failacq","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483766},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":367714,"byte_end":367746,"line_start":233,"line_end":233,"column_start":12,"column_end":44},"name":"atomic_cxchgweak_acq_failrelaxed","qualname":"::intrinsics::::atomic_cxchgweak_acq_failrelaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483768},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":368404,"byte_end":368439,"line_start":244,"line_end":244,"column_start":12,"column_end":47},"name":"atomic_cxchgweak_acqrel_failrelaxed","qualname":"::intrinsics::::atomic_cxchgweak_acqrel_failrelaxed","value":"fn <T> (dst: *mut T, old: T, src: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Stores a value if the current value is the same as the `old` value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `success` and\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `failure` parameters. For example,\n [`AtomicBool::compare_exchange_weak`][cew].","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483770},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":368878,"byte_end":368889,"line_start":252,"line_end":252,"column_start":12,"column_end":23},"name":"atomic_load","qualname":"::intrinsics::::atomic_load","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Loads the current value of the pointer.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `load` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483772},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":369306,"byte_end":369321,"line_start":259,"line_end":259,"column_start":12,"column_end":27},"name":"atomic_load_acq","qualname":"::intrinsics::::atomic_load_acq","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Loads the current value of the pointer.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `load` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483774},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":369738,"byte_end":369757,"line_start":266,"line_end":266,"column_start":12,"column_end":31},"name":"atomic_load_relaxed","qualname":"::intrinsics::::atomic_load_relaxed","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Loads the current value of the pointer.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `load` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483776},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":369793,"byte_end":369814,"line_start":267,"line_end":267,"column_start":12,"column_end":33},"name":"atomic_load_unordered","qualname":"::intrinsics::::atomic_load_unordered","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483778},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":370245,"byte_end":370257,"line_start":275,"line_end":275,"column_start":12,"column_end":24},"name":"atomic_store","qualname":"::intrinsics::::atomic_store","value":"fn <T> (dst: *mut T, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `store` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483780},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":370689,"byte_end":370705,"line_start":282,"line_end":282,"column_start":12,"column_end":28},"name":"atomic_store_rel","qualname":"::intrinsics::::atomic_store_rel","value":"fn <T> (dst: *mut T, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `store` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483782},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":371137,"byte_end":371157,"line_start":289,"line_end":289,"column_start":12,"column_end":32},"name":"atomic_store_relaxed","qualname":"::intrinsics::::atomic_store_relaxed","value":"fn <T> (dst: *mut T, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `store` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483784},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":371194,"byte_end":371216,"line_start":290,"line_end":290,"column_start":12,"column_end":34},"name":"atomic_store_unordered","qualname":"::intrinsics::::atomic_store_unordered","value":"fn <T> (dst: *mut T, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483786},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":371670,"byte_end":371681,"line_start":298,"line_end":298,"column_start":12,"column_end":23},"name":"atomic_xchg","qualname":"::intrinsics::::atomic_xchg","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location, returning the old value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `swap` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483788},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":372140,"byte_end":372155,"line_start":305,"line_end":305,"column_start":12,"column_end":27},"name":"atomic_xchg_acq","qualname":"::intrinsics::::atomic_xchg_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location, returning the old value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `swap` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483790},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":372614,"byte_end":372629,"line_start":312,"line_end":312,"column_start":12,"column_end":27},"name":"atomic_xchg_rel","qualname":"::intrinsics::::atomic_xchg_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location, returning the old value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `swap` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483792},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":373087,"byte_end":373105,"line_start":319,"line_end":319,"column_start":12,"column_end":30},"name":"atomic_xchg_acqrel","qualname":"::intrinsics::::atomic_xchg_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location, returning the old value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `swap` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483794},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":373564,"byte_end":373583,"line_start":326,"line_end":326,"column_start":12,"column_end":31},"name":"atomic_xchg_relaxed","qualname":"::intrinsics::::atomic_xchg_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Stores the value at the specified memory location, returning the old value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `swap` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483796},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":374039,"byte_end":374050,"line_start":334,"line_end":334,"column_start":12,"column_end":23},"name":"atomic_xadd","qualname":"::intrinsics::::atomic_xadd","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Add to the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_add` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483798},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":374506,"byte_end":374521,"line_start":341,"line_end":341,"column_start":12,"column_end":27},"name":"atomic_xadd_acq","qualname":"::intrinsics::::atomic_xadd_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Add to the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_add` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483800},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":374977,"byte_end":374992,"line_start":348,"line_end":348,"column_start":12,"column_end":27},"name":"atomic_xadd_rel","qualname":"::intrinsics::::atomic_xadd_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Add to the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_add` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483802},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":375447,"byte_end":375465,"line_start":355,"line_end":355,"column_start":12,"column_end":30},"name":"atomic_xadd_acqrel","qualname":"::intrinsics::::atomic_xadd_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Add to the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_add` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483804},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":375921,"byte_end":375940,"line_start":362,"line_end":362,"column_start":12,"column_end":31},"name":"atomic_xadd_relaxed","qualname":"::intrinsics::::atomic_xadd_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Add to the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_add` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483806},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":376403,"byte_end":376414,"line_start":370,"line_end":370,"column_start":12,"column_end":23},"name":"atomic_xsub","qualname":"::intrinsics::::atomic_xsub","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Subtract from the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_sub` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483808},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":376877,"byte_end":376892,"line_start":377,"line_end":377,"column_start":12,"column_end":27},"name":"atomic_xsub_acq","qualname":"::intrinsics::::atomic_xsub_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Subtract from the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_sub` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483810},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":377355,"byte_end":377370,"line_start":384,"line_end":384,"column_start":12,"column_end":27},"name":"atomic_xsub_rel","qualname":"::intrinsics::::atomic_xsub_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Subtract from the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_sub` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483812},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":377832,"byte_end":377850,"line_start":391,"line_end":391,"column_start":12,"column_end":30},"name":"atomic_xsub_acqrel","qualname":"::intrinsics::::atomic_xsub_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Subtract from the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_sub` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483814},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":378313,"byte_end":378332,"line_start":398,"line_end":398,"column_start":12,"column_end":31},"name":"atomic_xsub_relaxed","qualname":"::intrinsics::::atomic_xsub_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Subtract from the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_sub` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483816},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":378796,"byte_end":378806,"line_start":406,"line_end":406,"column_start":12,"column_end":22},"name":"atomic_and","qualname":"::intrinsics::::atomic_and","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise and with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_and` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483818},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":379270,"byte_end":379284,"line_start":413,"line_end":413,"column_start":12,"column_end":26},"name":"atomic_and_acq","qualname":"::intrinsics::::atomic_and_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise and with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_and` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483820},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":379748,"byte_end":379762,"line_start":420,"line_end":420,"column_start":12,"column_end":26},"name":"atomic_and_rel","qualname":"::intrinsics::::atomic_and_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise and with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_and` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483822},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":380225,"byte_end":380242,"line_start":427,"line_end":427,"column_start":12,"column_end":29},"name":"atomic_and_acqrel","qualname":"::intrinsics::::atomic_and_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise and with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_and` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483824},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":380706,"byte_end":380724,"line_start":434,"line_end":434,"column_start":12,"column_end":30},"name":"atomic_and_relaxed","qualname":"::intrinsics::::atomic_and_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise and with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_and` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483826},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":381203,"byte_end":381214,"line_start":442,"line_end":442,"column_start":12,"column_end":23},"name":"atomic_nand","qualname":"::intrinsics::::atomic_nand","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise nand with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483828},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":381693,"byte_end":381708,"line_start":449,"line_end":449,"column_start":12,"column_end":27},"name":"atomic_nand_acq","qualname":"::intrinsics::::atomic_nand_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise nand with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483830},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":382187,"byte_end":382202,"line_start":456,"line_end":456,"column_start":12,"column_end":27},"name":"atomic_nand_rel","qualname":"::intrinsics::::atomic_nand_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise nand with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483832},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":382680,"byte_end":382698,"line_start":463,"line_end":463,"column_start":12,"column_end":30},"name":"atomic_nand_acqrel","qualname":"::intrinsics::::atomic_nand_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise nand with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483834},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":383177,"byte_end":383196,"line_start":470,"line_end":470,"column_start":12,"column_end":31},"name":"atomic_nand_relaxed","qualname":"::intrinsics::::atomic_nand_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise nand with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483836},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":383656,"byte_end":383665,"line_start":478,"line_end":478,"column_start":12,"column_end":21},"name":"atomic_or","qualname":"::intrinsics::::atomic_or","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise or with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_or` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483838},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":384125,"byte_end":384138,"line_start":485,"line_end":485,"column_start":12,"column_end":25},"name":"atomic_or_acq","qualname":"::intrinsics::::atomic_or_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise or with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_or` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483840},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":384598,"byte_end":384611,"line_start":492,"line_end":492,"column_start":12,"column_end":25},"name":"atomic_or_rel","qualname":"::intrinsics::::atomic_or_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise or with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_or` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483842},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":385070,"byte_end":385086,"line_start":499,"line_end":499,"column_start":12,"column_end":28},"name":"atomic_or_acqrel","qualname":"::intrinsics::::atomic_or_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise or with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_or` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483844},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":385546,"byte_end":385563,"line_start":506,"line_end":506,"column_start":12,"column_end":29},"name":"atomic_or_relaxed","qualname":"::intrinsics::::atomic_or_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise or with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_or` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483846},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":386027,"byte_end":386037,"line_start":514,"line_end":514,"column_start":12,"column_end":22},"name":"atomic_xor","qualname":"::intrinsics::::atomic_xor","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise xor with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_xor` method by passing\n [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483848},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":386501,"byte_end":386515,"line_start":521,"line_end":521,"column_start":12,"column_end":26},"name":"atomic_xor_acq","qualname":"::intrinsics::::atomic_xor_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise xor with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_xor` method by passing\n [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483850},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":386979,"byte_end":386993,"line_start":528,"line_end":528,"column_start":12,"column_end":26},"name":"atomic_xor_rel","qualname":"::intrinsics::::atomic_xor_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise xor with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_xor` method by passing\n [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483852},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":387456,"byte_end":387473,"line_start":535,"line_end":535,"column_start":12,"column_end":29},"name":"atomic_xor_acqrel","qualname":"::intrinsics::::atomic_xor_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise xor with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_xor` method by passing\n [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483854},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":387937,"byte_end":387955,"line_start":542,"line_end":542,"column_start":12,"column_end":30},"name":"atomic_xor_relaxed","qualname":"::intrinsics::::atomic_xor_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Bitwise xor with the current value, returning the previous value.\n The stabilized version of this intrinsic is available on the\n `std::sync::atomic` types via the `fetch_xor` method by passing\n [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n as the `order`. For example,\n [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483856},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":387998,"byte_end":388008,"line_start":544,"line_end":544,"column_start":12,"column_end":22},"name":"atomic_max","qualname":"::intrinsics::::atomic_max","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483858},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":388050,"byte_end":388064,"line_start":545,"line_end":545,"column_start":12,"column_end":26},"name":"atomic_max_acq","qualname":"::intrinsics::::atomic_max_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483860},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":388106,"byte_end":388120,"line_start":546,"line_end":546,"column_start":12,"column_end":26},"name":"atomic_max_rel","qualname":"::intrinsics::::atomic_max_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483862},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":388162,"byte_end":388179,"line_start":547,"line_end":547,"column_start":12,"column_end":29},"name":"atomic_max_acqrel","qualname":"::intrinsics::::atomic_max_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483864},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":388221,"byte_end":388239,"line_start":548,"line_end":548,"column_start":12,"column_end":30},"name":"atomic_max_relaxed","qualname":"::intrinsics::::atomic_max_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483866},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":388282,"byte_end":388292,"line_start":550,"line_end":550,"column_start":12,"column_end":22},"name":"atomic_min","qualname":"::intrinsics::::atomic_min","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483868},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":388334,"byte_end":388348,"line_start":551,"line_end":551,"column_start":12,"column_end":26},"name":"atomic_min_acq","qualname":"::intrinsics::::atomic_min_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483870},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":388390,"byte_end":388404,"line_start":552,"line_end":552,"column_start":12,"column_end":26},"name":"atomic_min_rel","qualname":"::intrinsics::::atomic_min_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483872},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":388446,"byte_end":388463,"line_start":553,"line_end":553,"column_start":12,"column_end":29},"name":"atomic_min_acqrel","qualname":"::intrinsics::::atomic_min_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483874},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":388505,"byte_end":388523,"line_start":554,"line_end":554,"column_start":12,"column_end":30},"name":"atomic_min_relaxed","qualname":"::intrinsics::::atomic_min_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483876},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":388566,"byte_end":388577,"line_start":556,"line_end":556,"column_start":12,"column_end":23},"name":"atomic_umin","qualname":"::intrinsics::::atomic_umin","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483878},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":388619,"byte_end":388634,"line_start":557,"line_end":557,"column_start":12,"column_end":27},"name":"atomic_umin_acq","qualname":"::intrinsics::::atomic_umin_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483880},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":388676,"byte_end":388691,"line_start":558,"line_end":558,"column_start":12,"column_end":27},"name":"atomic_umin_rel","qualname":"::intrinsics::::atomic_umin_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483882},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":388733,"byte_end":388751,"line_start":559,"line_end":559,"column_start":12,"column_end":30},"name":"atomic_umin_acqrel","qualname":"::intrinsics::::atomic_umin_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483884},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":388793,"byte_end":388812,"line_start":560,"line_end":560,"column_start":12,"column_end":31},"name":"atomic_umin_relaxed","qualname":"::intrinsics::::atomic_umin_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483886},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":388855,"byte_end":388866,"line_start":562,"line_end":562,"column_start":12,"column_end":23},"name":"atomic_umax","qualname":"::intrinsics::::atomic_umax","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483888},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":388908,"byte_end":388923,"line_start":563,"line_end":563,"column_start":12,"column_end":27},"name":"atomic_umax_acq","qualname":"::intrinsics::::atomic_umax_acq","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483890},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":388965,"byte_end":388980,"line_start":564,"line_end":564,"column_start":12,"column_end":27},"name":"atomic_umax_rel","qualname":"::intrinsics::::atomic_umax_rel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483892},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":389022,"byte_end":389040,"line_start":565,"line_end":565,"column_start":12,"column_end":30},"name":"atomic_umax_acqrel","qualname":"::intrinsics::::atomic_umax_acqrel","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483894},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":389082,"byte_end":389101,"line_start":566,"line_end":566,"column_start":12,"column_end":31},"name":"atomic_umax_relaxed","qualname":"::intrinsics::::atomic_umax_relaxed","value":"fn <T> (dst: *mut T, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483896},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":389593,"byte_end":389611,"line_start":575,"line_end":575,"column_start":12,"column_end":30},"name":"prefetch_read_data","qualname":"::intrinsics::::prefetch_read_data","value":"fn <T> (data: *const T, locality: i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n if supported; otherwise, it is a noop.\n Prefetches have no effect on the behavior of the program but can change its performance\n characteristics.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483898},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":390107,"byte_end":390126,"line_start":583,"line_end":583,"column_start":12,"column_end":31},"name":"prefetch_write_data","qualname":"::intrinsics::::prefetch_write_data","value":"fn <T> (data: *const T, locality: i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n if supported; otherwise, it is a noop.\n Prefetches have no effect on the behavior of the program but can change its performance\n characteristics.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483900},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":390622,"byte_end":390647,"line_start":591,"line_end":591,"column_start":12,"column_end":37},"name":"prefetch_read_instruction","qualname":"::intrinsics::::prefetch_read_instruction","value":"fn <T> (data: *const T, locality: i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n if supported; otherwise, it is a noop.\n Prefetches have no effect on the behavior of the program but can change its performance\n characteristics.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483902},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":391143,"byte_end":391169,"line_start":599,"line_end":599,"column_start":12,"column_end":38},"name":"prefetch_write_instruction","qualname":"::intrinsics::::prefetch_write_instruction","value":"fn <T> (data: *const T, locality: i32) -> ()","parent":null,"children":[],"decl_id":null,"docs":" The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n if supported; otherwise, it is a noop.\n Prefetches have no effect on the behavior of the program but can change its performance\n characteristics.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483904},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":391246,"byte_end":391258,"line_start":604,"line_end":604,"column_start":12,"column_end":24},"name":"atomic_fence","qualname":"::intrinsics::::atomic_fence","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483905},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":391273,"byte_end":391289,"line_start":605,"line_end":605,"column_start":12,"column_end":28},"name":"atomic_fence_acq","qualname":"::intrinsics::::atomic_fence_acq","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483906},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":391304,"byte_end":391320,"line_start":606,"line_end":606,"column_start":12,"column_end":28},"name":"atomic_fence_rel","qualname":"::intrinsics::::atomic_fence_rel","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483907},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":391335,"byte_end":391354,"line_start":607,"line_end":607,"column_start":12,"column_end":31},"name":"atomic_fence_acqrel","qualname":"::intrinsics::::atomic_fence_acqrel","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483908},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":391695,"byte_end":391719,"line_start":615,"line_end":615,"column_start":12,"column_end":36},"name":"atomic_singlethreadfence","qualname":"::intrinsics::::atomic_singlethreadfence","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":" A compiler-only memory barrier.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483909},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":391734,"byte_end":391762,"line_start":616,"line_end":616,"column_start":12,"column_end":40},"name":"atomic_singlethreadfence_acq","qualname":"::intrinsics::::atomic_singlethreadfence_acq","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483910},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":391777,"byte_end":391805,"line_start":617,"line_end":617,"column_start":12,"column_end":40},"name":"atomic_singlethreadfence_rel","qualname":"::intrinsics::::atomic_singlethreadfence_rel","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483911},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":391820,"byte_end":391851,"line_start":618,"line_end":618,"column_start":12,"column_end":43},"name":"atomic_singlethreadfence_acqrel","qualname":"::intrinsics::::atomic_singlethreadfence_acqrel","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483912},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":392235,"byte_end":392245,"line_start":627,"line_end":627,"column_start":12,"column_end":22},"name":"rustc_peek","qualname":"::intrinsics::::rustc_peek","value":"fn <T> (_: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Magic intrinsic that derives its meaning from attributes\n attached to the function.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483914},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":392318,"byte_end":392323,"line_start":630,"line_end":630,"column_start":12,"column_end":17},"name":"abort","qualname":"::intrinsics::::abort","value":"fn () -> !","parent":null,"children":[],"decl_id":null,"docs":" Aborts the execution of the process.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483915},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":392661,"byte_end":392672,"line_start":638,"line_end":638,"column_start":12,"column_end":23},"name":"unreachable","qualname":"::intrinsics::::unreachable","value":"fn () -> !","parent":null,"children":[],"decl_id":null,"docs":" Tells LLVM that this point in the code is not reachable, enabling\n further optimizations.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483916},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":393209,"byte_end":393215,"line_start":648,"line_end":648,"column_start":12,"column_end":18},"name":"assume","qualname":"::intrinsics::::assume","value":"fn (b: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Informs the optimizer that a condition is always true.\n If the condition is false, the behavior is undefined.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483917},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":393442,"byte_end":393448,"line_start":654,"line_end":654,"column_start":12,"column_end":18},"name":"likely","qualname":"::intrinsics::::likely","value":"fn (b: bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Hints to the compiler that branch condition is likely to be true.\n Returns the value passed to it.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483918},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":393684,"byte_end":393692,"line_start":660,"line_end":660,"column_start":12,"column_end":20},"name":"unlikely","qualname":"::intrinsics::::unlikely","value":"fn (b: bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Hints to the compiler that branch condition is likely to be false.\n Returns the value passed to it.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483919},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":393789,"byte_end":393799,"line_start":663,"line_end":663,"column_start":12,"column_end":22},"name":"breakpoint","qualname":"::intrinsics::::breakpoint","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":" Executes a breakpoint trap, for inspection by a debugger.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483920},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":393995,"byte_end":394002,"line_start":669,"line_end":669,"column_start":12,"column_end":19},"name":"size_of","qualname":"::intrinsics::::size_of","value":"fn <T> () -> usize","parent":null,"children":[],"decl_id":null,"docs":" The size of a type in bytes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483922},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":394146,"byte_end":394159,"line_start":674,"line_end":674,"column_start":12,"column_end":25},"name":"move_val_init","qualname":"::intrinsics::::move_val_init","value":"fn <T> (dst: *mut T, src: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Moves a value to an uninitialized memory location.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483924},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":394197,"byte_end":394209,"line_start":676,"line_end":676,"column_start":12,"column_end":24},"name":"min_align_of","qualname":"::intrinsics::::min_align_of","value":"fn <T> () -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483926},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":394236,"byte_end":394249,"line_start":677,"line_end":677,"column_start":12,"column_end":25},"name":"pref_align_of","qualname":"::intrinsics::::pref_align_of","value":"fn <T> () -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483928},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":394458,"byte_end":394469,"line_start":683,"line_end":683,"column_start":12,"column_end":23},"name":"size_of_val","qualname":"::intrinsics::::size_of_val","value":"fn <T> (_: &T) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The size of the referenced value in bytes.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483930},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":394509,"byte_end":394525,"line_start":684,"line_end":684,"column_start":12,"column_end":28},"name":"min_align_of_val","qualname":"::intrinsics::::min_align_of_val","value":"fn <T> (_: &T) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483932},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":394632,"byte_end":394641,"line_start":687,"line_end":687,"column_start":12,"column_end":21},"name":"type_name","qualname":"::intrinsics::::type_name","value":"fn <T> () -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Gets a static string slice containing the name of a type.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483934},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":394875,"byte_end":394882,"line_start":692,"line_end":692,"column_start":12,"column_end":19},"name":"type_id","qualname":"::intrinsics::::type_id","value":"fn <T> () -> u64","parent":null,"children":[],"decl_id":null,"docs":" Gets an identifier which is globally unique to the specified type. This\n function will return the same value for a type regardless of whichever\n crate it is invoked in.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483936},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":395218,"byte_end":395222,"line_start":700,"line_end":700,"column_start":12,"column_end":16},"name":"init","qualname":"::intrinsics::::init","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Creates a value initialized to zero.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483938},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":395623,"byte_end":395629,"line_start":709,"line_end":709,"column_start":12,"column_end":18},"name":"uninit","qualname":"::intrinsics::::uninit","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Creates an uninitialized value.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483940},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":403684,"byte_end":403693,"line_start":920,"line_end":920,"column_start":12,"column_end":21},"name":"transmute","qualname":"::intrinsics::::transmute","value":"fn <T, U> (e: T) -> U","parent":null,"children":[],"decl_id":null,"docs":" Reinterprets the bits of a value of one type as another type.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":403627,"byte_end":403672,"line_start":919,"line_end":919,"column_start":5,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2147483943},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":404142,"byte_end":404152,"line_start":931,"line_end":931,"column_start":12,"column_end":22},"name":"needs_drop","qualname":"::intrinsics::::needs_drop","value":"fn <T> () -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the actual type given as `T` requires drop\n glue; returns `false` if the actual type provided for `T`\n implements `Copy`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483945},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":404711,"byte_end":404717,"line_start":944,"line_end":944,"column_start":12,"column_end":18},"name":"offset","qualname":"::intrinsics::::offset","value":"fn <T> (dst: *const T, offset: isize) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483947},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":405345,"byte_end":405357,"line_start":957,"line_end":957,"column_start":12,"column_end":24},"name":"arith_offset","qualname":"::intrinsics::::arith_offset","value":"fn <T> (dst: *const T, offset: isize) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer, potentially wrapping.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483949},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":406934,"byte_end":406953,"line_start":999,"line_end":999,"column_start":12,"column_end":31},"name":"copy_nonoverlapping","qualname":"::intrinsics::::copy_nonoverlapping","value":"fn <T> (src: *const T, dst: *mut T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Copies `count * size_of<T>` bytes from `src` to `dst`. The source\n and destination may *not* overlap.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":406877,"byte_end":406922,"line_start":998,"line_end":998,"column_start":5,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2147483951},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":407970,"byte_end":407974,"line_start":1030,"line_end":1030,"column_start":12,"column_end":16},"name":"copy","qualname":"::intrinsics::::copy","value":"fn <T> (src: *const T, dst: *mut T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Copies `count * size_of<T>` bytes from `src` to `dst`. The source\n and destination may overlap.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":407913,"byte_end":407958,"line_start":1029,"line_end":1029,"column_start":5,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2147483953},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":408504,"byte_end":408515,"line_start":1048,"line_end":1048,"column_start":12,"column_end":23},"name":"write_bytes","qualname":"::intrinsics::::write_bytes","value":"fn <T> (dst: *mut T, val: u8, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Invokes memset on the specified pointer, setting `count * size_of::<T>()`\n bytes of memory starting at `dst` to `val`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":408447,"byte_end":408492,"line_start":1047,"line_end":1047,"column_start":5,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":2147483955},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":408869,"byte_end":408904,"line_start":1056,"line_end":1056,"column_start":12,"column_end":47},"name":"volatile_copy_nonoverlapping_memory","qualname":"::intrinsics::::volatile_copy_nonoverlapping_memory","value":"fn <T> (dst: *mut T, src: *const T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\n a size of `count` * `size_of::<T>()` and an alignment of\n `min_align_of::<T>()`","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483957},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":409315,"byte_end":409335,"line_start":1064,"line_end":1064,"column_start":12,"column_end":32},"name":"volatile_copy_memory","qualname":"::intrinsics::::volatile_copy_memory","value":"fn <T> (dst: *mut T, src: *const T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\n a size of `count` * `size_of::<T>()` and an alignment of\n `min_align_of::<T>()`","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483959},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":409691,"byte_end":409710,"line_start":1071,"line_end":1071,"column_start":12,"column_end":31},"name":"volatile_set_memory","qualname":"::intrinsics::::volatile_set_memory","value":"fn <T> (dst: *mut T, val: u8, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\n size of `count` * `size_of::<T>()` and an alignment of\n `min_align_of::<T>()`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483961},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":409945,"byte_end":409958,"line_start":1076,"line_end":1076,"column_start":12,"column_end":25},"name":"volatile_load","qualname":"::intrinsics::::volatile_load","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Perform a volatile load from the `src` pointer.\n The stabilized version of this intrinsic is\n [`std::ptr::read_volatile`](../../std/ptr/fn.read_volatile.html).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483963},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":410177,"byte_end":410191,"line_start":1080,"line_end":1080,"column_start":12,"column_end":26},"name":"volatile_store","qualname":"::intrinsics::::volatile_store","value":"fn <T> (dst: *mut T, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Perform a volatile store to the `dst` pointer.\n The stabilized version of this intrinsic is\n [`std::ptr::write_volatile`](../../std/ptr/fn.write_volatile.html).\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483965},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":410273,"byte_end":410280,"line_start":1083,"line_end":1083,"column_start":12,"column_end":19},"name":"sqrtf32","qualname":"::intrinsics::::sqrtf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the square root of an `f32`\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483966},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":410352,"byte_end":410359,"line_start":1085,"line_end":1085,"column_start":12,"column_end":19},"name":"sqrtf64","qualname":"::intrinsics::::sqrtf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the square root of an `f64`\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483967},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":410433,"byte_end":410440,"line_start":1088,"line_end":1088,"column_start":12,"column_end":19},"name":"powif32","qualname":"::intrinsics::::powif32","value":"fn (a: f32, x: i32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Raises an `f32` to an integer power.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483968},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":410521,"byte_end":410528,"line_start":1090,"line_end":1090,"column_start":12,"column_end":19},"name":"powif64","qualname":"::intrinsics::::powif64","value":"fn (a: f64, x: i32) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Raises an `f64` to an integer power.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483969},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":410603,"byte_end":410609,"line_start":1093,"line_end":1093,"column_start":12,"column_end":18},"name":"sinf32","qualname":"::intrinsics::::sinf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the sine of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483970},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":410675,"byte_end":410681,"line_start":1095,"line_end":1095,"column_start":12,"column_end":18},"name":"sinf64","qualname":"::intrinsics::::sinf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the sine of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483971},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":410750,"byte_end":410756,"line_start":1098,"line_end":1098,"column_start":12,"column_end":18},"name":"cosf32","qualname":"::intrinsics::::cosf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the cosine of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483972},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":410824,"byte_end":410830,"line_start":1100,"line_end":1100,"column_start":12,"column_end":18},"name":"cosf64","qualname":"::intrinsics::::cosf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the cosine of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483973},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":410902,"byte_end":410908,"line_start":1103,"line_end":1103,"column_start":12,"column_end":18},"name":"powf32","qualname":"::intrinsics::::powf32","value":"fn (a: f32, x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Raises an `f32` to an `f32` power.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483974},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":410987,"byte_end":410993,"line_start":1105,"line_end":1105,"column_start":12,"column_end":18},"name":"powf64","qualname":"::intrinsics::::powf64","value":"fn (a: f64, x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Raises an `f64` to an `f64` power.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483975},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":411075,"byte_end":411081,"line_start":1108,"line_end":1108,"column_start":12,"column_end":18},"name":"expf32","qualname":"::intrinsics::::expf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the exponential of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483976},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":411154,"byte_end":411160,"line_start":1110,"line_end":1110,"column_start":12,"column_end":18},"name":"expf64","qualname":"::intrinsics::::expf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the exponential of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483977},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":411240,"byte_end":411247,"line_start":1113,"line_end":1113,"column_start":12,"column_end":19},"name":"exp2f32","qualname":"::intrinsics::::exp2f32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns 2 raised to the power of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483978},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":411326,"byte_end":411333,"line_start":1115,"line_end":1115,"column_start":12,"column_end":19},"name":"exp2f64","qualname":"::intrinsics::::exp2f64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns 2 raised to the power of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483979},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":411413,"byte_end":411419,"line_start":1118,"line_end":1118,"column_start":12,"column_end":18},"name":"logf32","qualname":"::intrinsics::::logf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the natural logarithm of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483980},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":411498,"byte_end":411504,"line_start":1120,"line_end":1120,"column_start":12,"column_end":18},"name":"logf64","qualname":"::intrinsics::::logf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the natural logarithm of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483981},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":411584,"byte_end":411592,"line_start":1123,"line_end":1123,"column_start":12,"column_end":20},"name":"log10f32","qualname":"::intrinsics::::log10f32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the base 10 logarithm of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483982},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":411671,"byte_end":411679,"line_start":1125,"line_end":1125,"column_start":12,"column_end":20},"name":"log10f64","qualname":"::intrinsics::::log10f64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the base 10 logarithm of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483983},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":411758,"byte_end":411765,"line_start":1128,"line_end":1128,"column_start":12,"column_end":19},"name":"log2f32","qualname":"::intrinsics::::log2f32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the base 2 logarithm of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483984},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":411843,"byte_end":411850,"line_start":1130,"line_end":1130,"column_start":12,"column_end":19},"name":"log2f64","qualname":"::intrinsics::::log2f64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the base 2 logarithm of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483985},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":411925,"byte_end":411931,"line_start":1133,"line_end":1133,"column_start":12,"column_end":18},"name":"fmaf32","qualname":"::intrinsics::::fmaf32","value":"fn (a: f32, b: f32, c: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns `a * b + c` for `f32` values.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483986},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":412021,"byte_end":412027,"line_start":1135,"line_end":1135,"column_start":12,"column_end":18},"name":"fmaf64","qualname":"::intrinsics::::fmaf64","value":"fn (a: f64, b: f64, c: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns `a * b + c` for `f64` values.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483987},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":412120,"byte_end":412127,"line_start":1138,"line_end":1138,"column_start":12,"column_end":19},"name":"fabsf32","qualname":"::intrinsics::::fabsf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the absolute value of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483988},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":412203,"byte_end":412210,"line_start":1140,"line_end":1140,"column_start":12,"column_end":19},"name":"fabsf64","qualname":"::intrinsics::::fabsf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the absolute value of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483989},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":412297,"byte_end":412308,"line_start":1143,"line_end":1143,"column_start":12,"column_end":23},"name":"copysignf32","qualname":"::intrinsics::::copysignf32","value":"fn (x: f32, y: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Copies the sign from `y` to `x` for `f32` values.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483990},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":412402,"byte_end":412413,"line_start":1145,"line_end":1145,"column_start":12,"column_end":23},"name":"copysignf64","qualname":"::intrinsics::::copysignf64","value":"fn (x: f64, y: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Copies the sign from `y` to `x` for `f64` values.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483991},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":412518,"byte_end":412526,"line_start":1148,"line_end":1148,"column_start":12,"column_end":20},"name":"floorf32","qualname":"::intrinsics::::floorf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483992},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":412622,"byte_end":412630,"line_start":1150,"line_end":1150,"column_start":12,"column_end":20},"name":"floorf64","qualname":"::intrinsics::::floorf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483993},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":412731,"byte_end":412738,"line_start":1153,"line_end":1153,"column_start":12,"column_end":19},"name":"ceilf32","qualname":"::intrinsics::::ceilf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483994},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":412838,"byte_end":412845,"line_start":1155,"line_end":1155,"column_start":12,"column_end":19},"name":"ceilf64","qualname":"::intrinsics::::ceilf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483995},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":412920,"byte_end":412928,"line_start":1158,"line_end":1158,"column_start":12,"column_end":20},"name":"truncf32","qualname":"::intrinsics::::truncf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the integer part of an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483996},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":413002,"byte_end":413010,"line_start":1160,"line_end":1160,"column_start":12,"column_end":20},"name":"truncf64","qualname":"::intrinsics::::truncf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the integer part of an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483997},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":413177,"byte_end":413184,"line_start":1164,"line_end":1164,"column_start":12,"column_end":19},"name":"rintf32","qualname":"::intrinsics::::rintf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\n if the argument is not an integer.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483998},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":413350,"byte_end":413357,"line_start":1167,"line_end":1167,"column_start":12,"column_end":19},"name":"rintf64","qualname":"::intrinsics::::rintf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\n if the argument is not an integer.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147483999},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":413435,"byte_end":413447,"line_start":1170,"line_end":1170,"column_start":12,"column_end":24},"name":"nearbyintf32","qualname":"::intrinsics::::nearbyintf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest integer to an `f32`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484000},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":413524,"byte_end":413536,"line_start":1172,"line_end":1172,"column_start":12,"column_end":24},"name":"nearbyintf64","qualname":"::intrinsics::::nearbyintf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest integer to an `f64`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484001},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":413652,"byte_end":413660,"line_start":1175,"line_end":1175,"column_start":12,"column_end":20},"name":"roundf32","qualname":"::intrinsics::::roundf32","value":"fn (x: f32) -> f32","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484002},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":413775,"byte_end":413783,"line_start":1177,"line_end":1177,"column_start":12,"column_end":20},"name":"roundf64","qualname":"::intrinsics::::roundf64","value":"fn (x: f64) -> f64","parent":null,"children":[],"decl_id":null,"docs":" Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484003},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":413925,"byte_end":413934,"line_start":1181,"line_end":1181,"column_start":12,"column_end":21},"name":"fadd_fast","qualname":"::intrinsics::::fadd_fast","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Float addition that allows optimizations based on algebraic rules.\n May assume inputs are finite.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484005},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":414084,"byte_end":414093,"line_start":1185,"line_end":1185,"column_start":12,"column_end":21},"name":"fsub_fast","qualname":"::intrinsics::::fsub_fast","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Float subtraction that allows optimizations based on algebraic rules.\n May assume inputs are finite.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484007},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":414246,"byte_end":414255,"line_start":1189,"line_end":1189,"column_start":12,"column_end":21},"name":"fmul_fast","qualname":"::intrinsics::::fmul_fast","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Float multiplication that allows optimizations based on algebraic rules.\n May assume inputs are finite.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484009},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":414402,"byte_end":414411,"line_start":1193,"line_end":1193,"column_start":12,"column_end":21},"name":"fdiv_fast","qualname":"::intrinsics::::fdiv_fast","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Float division that allows optimizations based on algebraic rules.\n May assume inputs are finite.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484011},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":414559,"byte_end":414568,"line_start":1197,"line_end":1197,"column_start":12,"column_end":21},"name":"frem_fast","qualname":"::intrinsics::::frem_fast","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Float remainder that allows optimizations based on algebraic rules.\n May assume inputs are finite.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484013},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":414665,"byte_end":414670,"line_start":1201,"line_end":1201,"column_start":12,"column_end":17},"name":"ctpop","qualname":"::intrinsics::::ctpop","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits set in an integer type `T`\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484015},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":415338,"byte_end":415342,"line_start":1228,"line_end":1228,"column_start":12,"column_end":16},"name":"ctlz","qualname":"::intrinsics::::ctlz","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of leading unset bits (zeroes) in an integer type `T`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484017},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":415749,"byte_end":415761,"line_start":1244,"line_end":1244,"column_start":12,"column_end":24},"name":"ctlz_nonzero","qualname":"::intrinsics::::ctlz_nonzero","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Like `ctlz`, but extra-unsafe as it returns `undef` when\n given an `x` with value `0`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484019},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":416434,"byte_end":416438,"line_start":1271,"line_end":1271,"column_start":12,"column_end":16},"name":"cttz","qualname":"::intrinsics::::cttz","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of trailing unset bits (zeroes) in an integer type `T`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484021},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":416847,"byte_end":416859,"line_start":1287,"line_end":1287,"column_start":12,"column_end":24},"name":"cttz_nonzero","qualname":"::intrinsics::::cttz_nonzero","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Like `cttz`, but extra-unsafe as it returns `undef` when\n given an `x` with value `0`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484023},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":416938,"byte_end":416943,"line_start":1290,"line_end":1290,"column_start":12,"column_end":17},"name":"bswap","qualname":"::intrinsics::::bswap","value":"fn <T> (x: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reverses the bytes in an integer type `T`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484025},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":417250,"byte_end":417267,"line_start":1296,"line_end":1296,"column_start":12,"column_end":29},"name":"add_with_overflow","qualname":"::intrinsics::::add_with_overflow","value":"fn <T> (x: T, y: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Performs checked integer addition.\n The stabilized versions of this intrinsic are available on the integer\n primitives via the `overflowing_add` method. For example,\n [`std::u32::overflowing_add`](../../std/primitive.u32.html#method.overflowing_add)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484027},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":417590,"byte_end":417607,"line_start":1302,"line_end":1302,"column_start":12,"column_end":29},"name":"sub_with_overflow","qualname":"::intrinsics::::sub_with_overflow","value":"fn <T> (x: T, y: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Performs checked integer subtraction\n The stabilized versions of this intrinsic are available on the integer\n primitives via the `overflowing_sub` method. For example,\n [`std::u32::overflowing_sub`](../../std/primitive.u32.html#method.overflowing_sub)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484029},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":417933,"byte_end":417950,"line_start":1308,"line_end":1308,"column_start":12,"column_end":29},"name":"mul_with_overflow","qualname":"::intrinsics::::mul_with_overflow","value":"fn <T> (x: T, y: T) -> (T, bool)","parent":null,"children":[],"decl_id":null,"docs":" Performs checked integer multiplication\n The stabilized versions of this intrinsic are available on the integer\n primitives via the `overflowing_mul` method. For example,\n [`std::u32::overflowing_mul`](../../std/primitive.u32.html#method.overflowing_mul)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484031},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":418119,"byte_end":418132,"line_start":1312,"line_end":1312,"column_start":12,"column_end":25},"name":"unchecked_div","qualname":"::intrinsics::::unchecked_div","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Performs an unchecked division, resulting in undefined behavior\n where y = 0 or x = `T::min_value()` and y = -1\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484033},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":418308,"byte_end":418321,"line_start":1315,"line_end":1315,"column_start":12,"column_end":25},"name":"unchecked_rem","qualname":"::intrinsics::::unchecked_rem","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of an unchecked division, resulting in\n undefined behavior where y = 0 or x = `T::min_value()` and y = -1\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484035},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":418494,"byte_end":418507,"line_start":1319,"line_end":1319,"column_start":12,"column_end":25},"name":"unchecked_shl","qualname":"::intrinsics::::unchecked_shl","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Performs an unchecked left shift, resulting in undefined behavior when\n y < 0 or y >= N, where N is the width of T in bits.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484037},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":418680,"byte_end":418693,"line_start":1322,"line_end":1322,"column_start":12,"column_end":25},"name":"unchecked_shr","qualname":"::intrinsics::::unchecked_shr","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Performs an unchecked right shift, resulting in undefined behavior when\n y < 0 or y >= N, where N is the width of T in bits.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484039},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":419032,"byte_end":419047,"line_start":1328,"line_end":1328,"column_start":12,"column_end":27},"name":"overflowing_add","qualname":"::intrinsics::::overflowing_add","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits.\n The stabilized versions of this intrinsic are available on the integer\n primitives via the `wrapping_add` method. For example,\n [`std::u32::wrapping_add`](../../std/primitive.u32.html#method.wrapping_add)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484041},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":419385,"byte_end":419400,"line_start":1333,"line_end":1333,"column_start":12,"column_end":27},"name":"overflowing_sub","qualname":"::intrinsics::::overflowing_sub","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n The stabilized versions of this intrinsic are available on the integer\n primitives via the `wrapping_sub` method. For example,\n [`std::u32::wrapping_sub`](../../std/primitive.u32.html#method.wrapping_sub)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484043},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":419738,"byte_end":419753,"line_start":1338,"line_end":1338,"column_start":12,"column_end":27},"name":"overflowing_mul","qualname":"::intrinsics::::overflowing_mul","value":"fn <T> (a: T, b: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n The stabilized versions of this intrinsic are available on the integer\n primitives via the `wrapping_mul` method. For example,\n [`std::u32::wrapping_mul`](../../std/primitive.u32.html#method.wrapping_mul)\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484045},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":419921,"byte_end":419939,"line_start":1342,"line_end":1342,"column_start":12,"column_end":30},"name":"discriminant_value","qualname":"::intrinsics::::discriminant_value","value":"fn <T> (v: &T) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the value of the discriminant for the variant in 'v',\n cast to a `u64`; if `T` has no discriminant, returns 0.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484047},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":420466,"byte_end":420469,"line_start":1352,"line_end":1352,"column_start":12,"column_end":15},"name":"try","qualname":"::intrinsics::::try","value":"fn (f: fn(*mut u8), data: *mut u8, local_ptr: *mut u8) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Rust's \"try catch\" construct which invokes the function pointer `f` with\n the data pointer `data`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2147484048},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,110,116,114,105,110,115,105,99,115,46,114,115],"byte_start":421764,"byte_end":421776,"line_start":1386,"line_end":1386,"column_start":12,"column_end":24},"name":"align_offset","qualname":"::intrinsics::::align_offset","value":"fn (ptr: *const (), align: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the byte offset that needs to be applied to `ptr` in order to\n make it aligned to `align`.\n If it is not possible to align `ptr`, the implementation returns\n `usize::max_value()`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":575},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mem","qualname":"::mem","value":"src/libcore/mem.rs","parent":null,"children":[{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606},{"krate":0,"index":608},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":613},{"krate":0,"index":615},{"krate":0,"index":6770},{"krate":0,"index":6771},{"krate":0,"index":616},{"krate":0,"index":620},{"krate":0,"index":623},{"krate":0,"index":625},{"krate":0,"index":627},{"krate":0,"index":630},{"krate":0,"index":632},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":642},{"krate":0,"index":644},{"krate":0,"index":646}],"decl_id":null,"docs":" Basic functions for dealing with memory.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":422465,"byte_end":422511,"line_start":16,"line_end":16,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":590},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":427431,"byte_end":427437,"line_start":174,"line_end":174,"column_start":8,"column_end":14},"name":"forget","qualname":"::mem::forget","value":"fn <T> (t: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Leaks a value: takes ownership and \"forgets\" about the value **without running\n its destructor**.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":427368,"byte_end":427377,"line_start":172,"line_end":172,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":427378,"byte_end":427423,"line_start":173,"line_end":173,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":591},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":431770,"byte_end":431777,"line_start":315,"line_end":315,"column_start":14,"column_end":21},"name":"size_of","qualname":"::mem::size_of","value":"fn <T> () -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the size of a type in bytes.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":431650,"byte_end":431659,"line_start":312,"line_end":312,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":431660,"byte_end":431705,"line_start":313,"line_end":313,"column_start":1,"column_end":46}},{"value":"rustc_const_unstable(feature = \"const_size_of\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":431706,"byte_end":431756,"line_start":314,"line_end":314,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":592},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":432500,"byte_end":432511,"line_start":341,"line_end":341,"column_start":8,"column_end":19},"name":"size_of_val","qualname":"::mem::size_of_val","value":"fn <T> (val: &T) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the size of the pointed-to value in bytes.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":432437,"byte_end":432446,"line_start":339,"line_end":339,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":432447,"byte_end":432492,"line_start":340,"line_end":340,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":593},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":433183,"byte_end":433195,"line_start":364,"line_end":364,"column_start":8,"column_end":20},"name":"min_align_of","qualname":"::mem::min_align_of","value":"fn <T> () -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the [ABI]-required minimum alignment of a type.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":433048,"byte_end":433057,"line_start":361,"line_end":361,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":433058,"byte_end":433103,"line_start":362,"line_end":362,"column_start":1,"column_end":46}},{"value":"rustc_deprecated(reason = \"use `align_of` instead\", since = \"1.2.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":433104,"byte_end":433175,"line_start":363,"line_end":363,"column_start":1,"column_end":72}}]},{"kind":"Function","id":{"krate":0,"index":594},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":433795,"byte_end":433811,"line_start":385,"line_end":385,"column_start":8,"column_end":24},"name":"min_align_of_val","qualname":"::mem::min_align_of_val","value":"fn <T> (val: &T) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":433656,"byte_end":433665,"line_start":382,"line_end":382,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":433666,"byte_end":433711,"line_start":383,"line_end":383,"column_start":1,"column_end":46}},{"value":"rustc_deprecated(reason = \"use `align_of_val` instead\", since = \"1.2.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":433712,"byte_end":433787,"line_start":384,"line_end":384,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":595},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":434442,"byte_end":434450,"line_start":407,"line_end":407,"column_start":14,"column_end":22},"name":"align_of","qualname":"::mem::align_of","value":"fn <T> () -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the [ABI]-required minimum alignment of a type.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":434321,"byte_end":434330,"line_start":404,"line_end":404,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":434331,"byte_end":434376,"line_start":405,"line_end":405,"column_start":1,"column_end":46}},{"value":"rustc_const_unstable(feature = \"const_align_of\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":434377,"byte_end":434428,"line_start":406,"line_end":406,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":596},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":434942,"byte_end":434954,"line_start":426,"line_end":426,"column_start":8,"column_end":20},"name":"align_of_val","qualname":"::mem::align_of_val","value":"fn <T> (val: &T) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the [ABI]-required minimum alignment of the type of the value that `val` points to.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":434879,"byte_end":434888,"line_start":424,"line_end":424,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":434889,"byte_end":434934,"line_start":425,"line_end":425,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":597},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":437170,"byte_end":437180,"line_start":486,"line_end":486,"column_start":8,"column_end":18},"name":"needs_drop","qualname":"::mem::needs_drop","value":"fn <T> () -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether dropping values of type `T` matters.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":437101,"byte_end":437110,"line_start":484,"line_end":484,"column_start":1,"column_end":10}},{"value":"stable(feature = \"needs_drop\", since = \"1.21.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":437111,"byte_end":437162,"line_start":485,"line_end":485,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":598},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":438252,"byte_end":438258,"line_start":518,"line_end":518,"column_start":15,"column_end":21},"name":"zeroed","qualname":"::mem::zeroed","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Creates a value whose bytes are all zero.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":438182,"byte_end":438191,"line_start":516,"line_end":516,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":438192,"byte_end":438237,"line_start":517,"line_end":517,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":599},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":441845,"byte_end":441858,"line_start":612,"line_end":612,"column_start":15,"column_end":28},"name":"uninitialized","qualname":"::mem::uninitialized","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Bypasses Rust's normal memory-initialization checks by pretending to\n produce a value of type `T`, while doing nothing at all.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":441775,"byte_end":441784,"line_start":610,"line_end":610,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":441785,"byte_end":441830,"line_start":611,"line_end":611,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":600},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":442228,"byte_end":442232,"line_start":633,"line_end":633,"column_start":8,"column_end":12},"name":"swap","qualname":"::mem::swap","value":"fn <T> (x: &mut T, y: &mut T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Swaps the values at two mutable locations, without deinitializing either one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":442165,"byte_end":442174,"line_start":631,"line_end":631,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":442175,"byte_end":442220,"line_start":632,"line_end":632,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":601},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":443758,"byte_end":443765,"line_start":691,"line_end":691,"column_start":8,"column_end":15},"name":"replace","qualname":"::mem::replace","value":"fn <T> (dest: &mut T, mut src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Replaces the value at a mutable location with a new one, returning the old value, without\n deinitializing either one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":443695,"byte_end":443704,"line_start":689,"line_end":689,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":443705,"byte_end":443750,"line_start":690,"line_end":690,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":602},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":446200,"byte_end":446204,"line_start":788,"line_end":788,"column_start":8,"column_end":12},"name":"drop","qualname":"::mem::drop","value":"fn <T> (_x: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Disposes of a value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":446137,"byte_end":446146,"line_start":786,"line_end":786,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":446147,"byte_end":446192,"line_start":787,"line_end":787,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":603},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":447563,"byte_end":447577,"line_start":833,"line_end":833,"column_start":15,"column_end":29},"name":"transmute_copy","qualname":"::mem::transmute_copy","value":"fn <T, U> (src: &T) -> U","parent":null,"children":[],"decl_id":null,"docs":" Interprets `src` as having type `&U`, and then reads `src` without moving\n the contained value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":447493,"byte_end":447502,"line_start":831,"line_end":831,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":447503,"byte_end":447548,"line_start":832,"line_end":832,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":604},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":447852,"byte_end":447864,"line_start":841,"line_end":841,"column_start":12,"column_end":24},"name":"Discriminant","qualname":"::mem::Discriminant","value":"","parent":null,"children":[],"decl_id":null,"docs":" Opaque type representing the discriminant of an enum.","sig":null,"attributes":[{"value":"stable(feature = \"discriminant_value\", since = \"1.21.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":447781,"byte_end":447840,"line_start":840,"line_end":840,"column_start":1,"column_end":60}}]},{"kind":"Function","id":{"krate":0,"index":615},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":449902,"byte_end":449914,"line_start":906,"line_end":906,"column_start":8,"column_end":20},"name":"discriminant","qualname":"::mem::discriminant","value":"fn <T> (v: &T) -> Discriminant<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a value uniquely identifying the enum variant in `v`.","sig":null,"attributes":[{"value":"stable(feature = \"discriminant_value\", since = \"1.21.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":449835,"byte_end":449894,"line_start":905,"line_end":905,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":451783,"byte_end":451786,"line_start":964,"line_end":964,"column_start":12,"column_end":15},"name":"new","qualname":"<ManuallyDrop<T>>::new","value":"fn (value: T) -> ManuallyDrop<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":452208,"byte_end":452218,"line_start":979,"line_end":979,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ManuallyDrop<T>>::into_inner","value":"fn (slot: ManuallyDrop<T>) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":452708,"byte_end":452712,"line_start":994,"line_end":994,"column_start":19,"column_end":23},"name":"drop","qualname":"<ManuallyDrop<T>>::drop","value":"fn (slot: &mut ManuallyDrop<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":646},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":455667,"byte_end":455678,"line_start":1106,"line_end":1106,"column_start":15,"column_end":26},"name":"unreachable","qualname":"::mem::unreachable","value":"fn () -> !","parent":null,"children":[],"decl_id":null,"docs":" Tells LLVM that this point in the code is not reachable, enabling further\n optimizations.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":455589,"byte_end":455598,"line_start":1104,"line_end":1104,"column_start":1,"column_end":10}},{"value":"unstable(feature = \"unreachable\", issue = \"43751\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":455599,"byte_end":455652,"line_start":1105,"line_end":1105,"column_start":1,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":647},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nonzero","qualname":"::nonzero","value":"src/libcore/nonzero.rs","parent":null,"children":[{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":6772},{"krate":0,"index":6774},{"krate":0,"index":6776},{"krate":0,"index":6778},{"krate":0,"index":6780},{"krate":0,"index":6782},{"krate":0,"index":6784},{"krate":0,"index":6786},{"krate":0,"index":6788},{"krate":0,"index":6790},{"krate":0,"index":6792},{"krate":0,"index":6794},{"krate":0,"index":6796},{"krate":0,"index":6798},{"krate":0,"index":6800},{"krate":0,"index":6820},{"krate":0,"index":6818},{"krate":0,"index":6816},{"krate":0,"index":6813},{"krate":0,"index":6811},{"krate":0,"index":6805},{"krate":0,"index":6803},{"krate":0,"index":6801},{"krate":0,"index":653},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":660},{"krate":0,"index":662}],"decl_id":null,"docs":" Exposes the NonZero lang item which provides optimization hints.\n","sig":null,"attributes":[{"value":"unstable(feature = \"nonzero\",\n           reason = \"needs an RFC to flesh out the design\",\n           issue = \"27730\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":456262,"byte_end":456385,"line_start":12,"line_end":14,"column_start":1,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":649},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":456504,"byte_end":456512,"line_start":19,"line_end":19,"column_start":18,"column_end":26},"name":"Zeroable","qualname":"::nonzero::Zeroable","value":"Zeroable","parent":null,"children":[{"krate":0,"index":650}],"decl_id":null,"docs":" Unsafe trait to indicate what types are usable with the NonZero struct\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":456557,"byte_end":456564,"line_start":21,"line_end":21,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::nonzero::Zeroable::is_zero","value":"fn (&self) -> bool","parent":{"krate":0,"index":649},"children":[],"decl_id":null,"docs":" Unsafe trait to indicate what types are usable with the NonZero struct\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":6800},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":457739,"byte_end":457746,"line_start":66,"line_end":66,"column_start":12,"column_end":19},"name":"NonZero","qualname":"::nonzero::NonZero","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper type for raw pointers and integers that will never be\n NULL or 0 that might allow certain optimizations.\n","sig":null,"attributes":[{"value":"lang = \"non_zero\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":457639,"byte_end":457659,"line_start":64,"line_end":64,"column_start":1,"column_end":21}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":457728,"byte_end":457763,"line_start":66,"line_end":66,"column_start":1,"column_end":36}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":457728,"byte_end":457763,"line_start":66,"line_end":66,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":458160,"byte_end":458173,"line_start":76,"line_end":76,"column_start":25,"column_end":38},"name":"new_unchecked","qualname":"<NonZero<T>>::new_unchecked","value":"fn (inner: T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":458313,"byte_end":458316,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<NonZero<T>>::new","value":"fn (inner: T) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":458499,"byte_end":458502,"line_start":91,"line_end":91,"column_start":12,"column_end":15},"name":"get","qualname":"<NonZero<T>>::get","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":664},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ptr","qualname":"::ptr","value":"src/libcore/ptr.rs","parent":null,"children":[{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":688},{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":714},{"krate":0,"index":740},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":6821},{"krate":0,"index":6823},{"krate":0,"index":6824},{"krate":0,"index":6826},{"krate":0,"index":6828},{"krate":0,"index":6830},{"krate":0,"index":6832},{"krate":0,"index":6834},{"krate":0,"index":6836},{"krate":0,"index":6837},{"krate":0,"index":6839},{"krate":0,"index":6841},{"krate":0,"index":6843},{"krate":0,"index":6845},{"krate":0,"index":6847},{"krate":0,"index":6849},{"krate":0,"index":6850},{"krate":0,"index":6852},{"krate":0,"index":6854},{"krate":0,"index":6856},{"krate":0,"index":6858},{"krate":0,"index":6860},{"krate":0,"index":6862},{"krate":0,"index":6863},{"krate":0,"index":6865},{"krate":0,"index":6867},{"krate":0,"index":6869},{"krate":0,"index":6871},{"krate":0,"index":6873},{"krate":0,"index":6875},{"krate":0,"index":6876},{"krate":0,"index":6878},{"krate":0,"index":6880},{"krate":0,"index":6882},{"krate":0,"index":6884},{"krate":0,"index":6886},{"krate":0,"index":6888},{"krate":0,"index":6889},{"krate":0,"index":6891},{"krate":0,"index":6893},{"krate":0,"index":6895},{"krate":0,"index":6897},{"krate":0,"index":6899},{"krate":0,"index":6901},{"krate":0,"index":6902},{"krate":0,"index":6904},{"krate":0,"index":6906},{"krate":0,"index":6908},{"krate":0,"index":6910},{"krate":0,"index":6912},{"krate":0,"index":6914},{"krate":0,"index":6915},{"krate":0,"index":6917},{"krate":0,"index":6919},{"krate":0,"index":6921},{"krate":0,"index":6923},{"krate":0,"index":6925},{"krate":0,"index":6927},{"krate":0,"index":6928},{"krate":0,"index":6930},{"krate":0,"index":6932},{"krate":0,"index":6934},{"krate":0,"index":6936},{"krate":0,"index":6938},{"krate":0,"index":6940},{"krate":0,"index":6941},{"krate":0,"index":6943},{"krate":0,"index":6945},{"krate":0,"index":6947},{"krate":0,"index":6949},{"krate":0,"index":6951},{"krate":0,"index":6953},{"krate":0,"index":6954},{"krate":0,"index":6956},{"krate":0,"index":6958},{"krate":0,"index":6960},{"krate":0,"index":6962},{"krate":0,"index":6964},{"krate":0,"index":6966},{"krate":0,"index":6967},{"krate":0,"index":6969},{"krate":0,"index":6971},{"krate":0,"index":6973},{"krate":0,"index":6975},{"krate":0,"index":6977},{"krate":0,"index":6979},{"krate":0,"index":6980},{"krate":0,"index":6982},{"krate":0,"index":6984},{"krate":0,"index":6986},{"krate":0,"index":6988},{"krate":0,"index":6990},{"krate":0,"index":6992},{"krate":0,"index":6993},{"krate":0,"index":6995},{"krate":0,"index":6997},{"krate":0,"index":6999},{"krate":0,"index":7001},{"krate":0,"index":7003},{"krate":0,"index":7005},{"krate":0,"index":7006},{"krate":0,"index":7008},{"krate":0,"index":7010},{"krate":0,"index":7012},{"krate":0,"index":7014},{"krate":0,"index":7016},{"krate":0,"index":7018},{"krate":0,"index":7019},{"krate":0,"index":7021},{"krate":0,"index":7023},{"krate":0,"index":7025},{"krate":0,"index":7027},{"krate":0,"index":7029},{"krate":0,"index":7031},{"krate":0,"index":7032},{"krate":0,"index":7034},{"krate":0,"index":7036},{"krate":0,"index":7038},{"krate":0,"index":7040},{"krate":0,"index":7042},{"krate":0,"index":7044},{"krate":0,"index":7045},{"krate":0,"index":7047},{"krate":0,"index":7049},{"krate":0,"index":7051},{"krate":0,"index":7053},{"krate":0,"index":7055},{"krate":0,"index":7057},{"krate":0,"index":7058},{"krate":0,"index":7060},{"krate":0,"index":7062},{"krate":0,"index":7064},{"krate":0,"index":7066},{"krate":0,"index":7068},{"krate":0,"index":7070},{"krate":0,"index":7071},{"krate":0,"index":7073},{"krate":0,"index":7075},{"krate":0,"index":7077},{"krate":0,"index":7079},{"krate":0,"index":7081},{"krate":0,"index":7083},{"krate":0,"index":7084},{"krate":0,"index":7086},{"krate":0,"index":7088},{"krate":0,"index":7090},{"krate":0,"index":7092},{"krate":0,"index":7094},{"krate":0,"index":7096},{"krate":0,"index":7097},{"krate":0,"index":7099},{"krate":0,"index":7101},{"krate":0,"index":7103},{"krate":0,"index":7105},{"krate":0,"index":7107},{"krate":0,"index":7109},{"krate":0,"index":7110},{"krate":0,"index":7112},{"krate":0,"index":7114},{"krate":0,"index":7116},{"krate":0,"index":7118},{"krate":0,"index":7120},{"krate":0,"index":7122},{"krate":0,"index":7123},{"krate":0,"index":7125},{"krate":0,"index":7127},{"krate":0,"index":7129},{"krate":0,"index":7131},{"krate":0,"index":7133},{"krate":0,"index":7135},{"krate":0,"index":7136},{"krate":0,"index":7138},{"krate":0,"index":7140},{"krate":0,"index":7142},{"krate":0,"index":7144},{"krate":0,"index":7146},{"krate":0,"index":7148},{"krate":0,"index":7149},{"krate":0,"index":7151},{"krate":0,"index":7153},{"krate":0,"index":7155},{"krate":0,"index":7157},{"krate":0,"index":7159},{"krate":0,"index":7161},{"krate":0,"index":7162},{"krate":0,"index":7164},{"krate":0,"index":7166},{"krate":0,"index":7168},{"krate":0,"index":7170},{"krate":0,"index":7172},{"krate":0,"index":7174},{"krate":0,"index":7175},{"krate":0,"index":7177},{"krate":0,"index":7179},{"krate":0,"index":7181},{"krate":0,"index":7183},{"krate":0,"index":7185},{"krate":0,"index":7187},{"krate":0,"index":7188},{"krate":0,"index":7190},{"krate":0,"index":7192},{"krate":0,"index":7194},{"krate":0,"index":7196},{"krate":0,"index":7198},{"krate":0,"index":7200},{"krate":0,"index":7201},{"krate":0,"index":7203},{"krate":0,"index":7205},{"krate":0,"index":7207},{"krate":0,"index":7209},{"krate":0,"index":7211},{"krate":0,"index":7213},{"krate":0,"index":7214},{"krate":0,"index":7216},{"krate":0,"index":7218},{"krate":0,"index":7220},{"krate":0,"index":7222},{"krate":0,"index":7224},{"krate":0,"index":7226},{"krate":0,"index":7227},{"krate":0,"index":7229},{"krate":0,"index":7231},{"krate":0,"index":7233},{"krate":0,"index":7235},{"krate":0,"index":7237},{"krate":0,"index":7239},{"krate":0,"index":7240},{"krate":0,"index":7242},{"krate":0,"index":7244},{"krate":0,"index":7246},{"krate":0,"index":7248},{"krate":0,"index":7250},{"krate":0,"index":7252},{"krate":0,"index":7253},{"krate":0,"index":7255},{"krate":0,"index":7257},{"krate":0,"index":7259},{"krate":0,"index":7261},{"krate":0,"index":7263},{"krate":0,"index":7265},{"krate":0,"index":7266},{"krate":0,"index":7268},{"krate":0,"index":7270},{"krate":0,"index":7272},{"krate":0,"index":7274},{"krate":0,"index":7276},{"krate":0,"index":7278},{"krate":0,"index":7279},{"krate":0,"index":7281},{"krate":0,"index":7283},{"krate":0,"index":7285},{"krate":0,"index":7287},{"krate":0,"index":7289},{"krate":0,"index":7291},{"krate":0,"index":7292},{"krate":0,"index":7294},{"krate":0,"index":7296},{"krate":0,"index":7298},{"krate":0,"index":7300},{"krate":0,"index":7302},{"krate":0,"index":7304},{"krate":0,"index":7305},{"krate":0,"index":7307},{"krate":0,"index":7309},{"krate":0,"index":7311},{"krate":0,"index":7313},{"krate":0,"index":7315},{"krate":0,"index":7317},{"krate":0,"index":7318},{"krate":0,"index":7320},{"krate":0,"index":7322},{"krate":0,"index":7324},{"krate":0,"index":7326},{"krate":0,"index":7328},{"krate":0,"index":7330},{"krate":0,"index":7331},{"krate":0,"index":7333},{"krate":0,"index":7335},{"krate":0,"index":7337},{"krate":0,"index":7339},{"krate":0,"index":7341},{"krate":0,"index":7343},{"krate":0,"index":7344},{"krate":0,"index":7346},{"krate":0,"index":7348},{"krate":0,"index":7350},{"krate":0,"index":7352},{"krate":0,"index":7354},{"krate":0,"index":7356},{"krate":0,"index":7357},{"krate":0,"index":7359},{"krate":0,"index":7361},{"krate":0,"index":7363},{"krate":0,"index":7365},{"krate":0,"index":7367},{"krate":0,"index":7369},{"krate":0,"index":7370},{"krate":0,"index":7372},{"krate":0,"index":7374},{"krate":0,"index":7376},{"krate":0,"index":7378},{"krate":0,"index":7380},{"krate":0,"index":7382},{"krate":0,"index":7383},{"krate":0,"index":7385},{"krate":0,"index":7387},{"krate":0,"index":7389},{"krate":0,"index":7391},{"krate":0,"index":7393},{"krate":0,"index":7395},{"krate":0,"index":7396},{"krate":0,"index":7398},{"krate":0,"index":7400},{"krate":0,"index":7402},{"krate":0,"index":7404},{"krate":0,"index":7406},{"krate":0,"index":7408},{"krate":0,"index":7409},{"krate":0,"index":7411},{"krate":0,"index":7413},{"krate":0,"index":7415},{"krate":0,"index":7417},{"krate":0,"index":7419},{"krate":0,"index":7421},{"krate":0,"index":7422},{"krate":0,"index":7424},{"krate":0,"index":7426},{"krate":0,"index":7428},{"krate":0,"index":7430},{"krate":0,"index":7432},{"krate":0,"index":7434},{"krate":0,"index":7435},{"krate":0,"index":7437},{"krate":0,"index":7439},{"krate":0,"index":7441},{"krate":0,"index":7443},{"krate":0,"index":7445},{"krate":0,"index":7447},{"krate":0,"index":7448},{"krate":0,"index":7450},{"krate":0,"index":7452},{"krate":0,"index":7454},{"krate":0,"index":7456},{"krate":0,"index":7458},{"krate":0,"index":7460},{"krate":0,"index":7461},{"krate":0,"index":7463},{"krate":0,"index":7465},{"krate":0,"index":7467},{"krate":0,"index":7469},{"krate":0,"index":7471},{"krate":0,"index":7473},{"krate":0,"index":7474},{"krate":0,"index":7476},{"krate":0,"index":7478},{"krate":0,"index":7480},{"krate":0,"index":7482},{"krate":0,"index":7484},{"krate":0,"index":7486},{"krate":0,"index":7487},{"krate":0,"index":7489},{"krate":0,"index":7491},{"krate":0,"index":7493},{"krate":0,"index":7495},{"krate":0,"index":7497},{"krate":0,"index":7499},{"krate":0,"index":7500},{"krate":0,"index":7502},{"krate":0,"index":7504},{"krate":0,"index":7506},{"krate":0,"index":7508},{"krate":0,"index":7510},{"krate":0,"index":7512},{"krate":0,"index":7513},{"krate":0,"index":7515},{"krate":0,"index":7517},{"krate":0,"index":7519},{"krate":0,"index":7521},{"krate":0,"index":7523},{"krate":0,"index":7525},{"krate":0,"index":7526},{"krate":0,"index":7528},{"krate":0,"index":7530},{"krate":0,"index":7532},{"krate":0,"index":7534},{"krate":0,"index":7536},{"krate":0,"index":7538},{"krate":0,"index":7539},{"krate":0,"index":7541},{"krate":0,"index":7543},{"krate":0,"index":7545},{"krate":0,"index":7547},{"krate":0,"index":7549},{"krate":0,"index":7551},{"krate":0,"index":7552},{"krate":0,"index":7554},{"krate":0,"index":7556},{"krate":0,"index":7558},{"krate":0,"index":7560},{"krate":0,"index":7562},{"krate":0,"index":7564},{"krate":0,"index":7565},{"krate":0,"index":7567},{"krate":0,"index":7569},{"krate":0,"index":7571},{"krate":0,"index":7573},{"krate":0,"index":7575},{"krate":0,"index":7577},{"krate":0,"index":7578},{"krate":0,"index":7580},{"krate":0,"index":7582},{"krate":0,"index":7584},{"krate":0,"index":7586},{"krate":0,"index":7588},{"krate":0,"index":7590},{"krate":0,"index":7591},{"krate":0,"index":7593},{"krate":0,"index":7595},{"krate":0,"index":7597},{"krate":0,"index":7599},{"krate":0,"index":7601},{"krate":0,"index":7603},{"krate":0,"index":7604},{"krate":0,"index":7606},{"krate":0,"index":7608},{"krate":0,"index":7610},{"krate":0,"index":7612},{"krate":0,"index":7614},{"krate":0,"index":7616},{"krate":0,"index":7617},{"krate":0,"index":7619},{"krate":0,"index":7621},{"krate":0,"index":7623},{"krate":0,"index":7625},{"krate":0,"index":7627},{"krate":0,"index":7629},{"krate":0,"index":7630},{"krate":0,"index":7632},{"krate":0,"index":7634},{"krate":0,"index":7636},{"krate":0,"index":7638},{"krate":0,"index":7640},{"krate":0,"index":7642},{"krate":0,"index":7643},{"krate":0,"index":7645},{"krate":0,"index":7647},{"krate":0,"index":7649},{"krate":0,"index":7651},{"krate":0,"index":7653},{"krate":0,"index":7655},{"krate":0,"index":7656},{"krate":0,"index":7658},{"krate":0,"index":7660},{"krate":0,"index":7662},{"krate":0,"index":7664},{"krate":0,"index":7666},{"krate":0,"index":7668},{"krate":0,"index":7669},{"krate":0,"index":7671},{"krate":0,"index":7673},{"krate":0,"index":7675},{"krate":0,"index":7677},{"krate":0,"index":7679},{"krate":0,"index":7681},{"krate":0,"index":7682},{"krate":0,"index":7684},{"krate":0,"index":7686},{"krate":0,"index":7688},{"krate":0,"index":7690},{"krate":0,"index":7692},{"krate":0,"index":7694},{"krate":0,"index":7695},{"krate":0,"index":7697},{"krate":0,"index":7699},{"krate":0,"index":7701},{"krate":0,"index":7703},{"krate":0,"index":7705},{"krate":0,"index":7707},{"krate":0,"index":7708},{"krate":0,"index":7710},{"krate":0,"index":7712},{"krate":0,"index":7714},{"krate":0,"index":7716},{"krate":0,"index":7718},{"krate":0,"index":7720},{"krate":0,"index":7721},{"krate":0,"index":7723},{"krate":0,"index":7725},{"krate":0,"index":7727},{"krate":0,"index":7729},{"krate":0,"index":7731},{"krate":0,"index":7733},{"krate":0,"index":7734},{"krate":0,"index":7736},{"krate":0,"index":7738},{"krate":0,"index":7740},{"krate":0,"index":7742},{"krate":0,"index":7744},{"krate":0,"index":7746},{"krate":0,"index":7747},{"krate":0,"index":7749},{"krate":0,"index":7751},{"krate":0,"index":7753},{"krate":0,"index":7755},{"krate":0,"index":7757},{"krate":0,"index":7759},{"krate":0,"index":7760},{"krate":0,"index":7762},{"krate":0,"index":7764},{"krate":0,"index":7766},{"krate":0,"index":7768},{"krate":0,"index":7770},{"krate":0,"index":7772},{"krate":0,"index":7773},{"krate":0,"index":7775},{"krate":0,"index":7777},{"krate":0,"index":7779},{"krate":0,"index":7781},{"krate":0,"index":7783},{"krate":0,"index":7785},{"krate":0,"index":7786},{"krate":0,"index":7788},{"krate":0,"index":7790},{"krate":0,"index":7792},{"krate":0,"index":7794},{"krate":0,"index":7796},{"krate":0,"index":7798},{"krate":0,"index":7799},{"krate":0,"index":7801},{"krate":0,"index":7803},{"krate":0,"index":7805},{"krate":0,"index":7807},{"krate":0,"index":749},{"krate":0,"index":751},{"krate":0,"index":757},{"krate":0,"index":759},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":776},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":784},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":791},{"krate":0,"index":798},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":804},{"krate":0,"index":806},{"krate":0,"index":808}],"decl_id":null,"docs":" Raw, unsafe pointers, `*const T`, and `*mut T`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":459753,"byte_end":459799,"line_start":17,"line_end":17,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":683},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":461007,"byte_end":461020,"line_start":59,"line_end":59,"column_start":15,"column_end":28},"name":"drop_in_place","qualname":"::ptr::drop_in_place","value":"fn <T> (to_drop: *mut T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Executes the destructor (if any) of the pointed-to value.","sig":null,"attributes":[{"value":"stable(feature = \"drop_in_place\", since = \"1.8.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":460879,"byte_end":460932,"line_start":56,"line_end":56,"column_start":1,"column_end":54}},{"value":"lang = \"drop_in_place\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":460933,"byte_end":460958,"line_start":57,"line_end":57,"column_start":1,"column_end":26}},{"value":"allow(unconditional_recursion)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":460959,"byte_end":460992,"line_start":58,"line_end":58,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":684},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":461457,"byte_end":461461,"line_start":78,"line_end":78,"column_start":14,"column_end":18},"name":"null","qualname":"::ptr::null","value":"fn <T> () -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Creates a null raw pointer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":461336,"byte_end":461345,"line_start":75,"line_end":75,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":461346,"byte_end":461391,"line_start":76,"line_end":76,"column_start":1,"column_end":46}},{"value":"rustc_const_unstable(feature = \"const_ptr_null\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":461392,"byte_end":461443,"line_start":77,"line_end":77,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":685},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":461789,"byte_end":461797,"line_start":93,"line_end":93,"column_start":14,"column_end":22},"name":"null_mut","qualname":"::ptr::null_mut","value":"fn <T> () -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Creates a null mutable raw pointer.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":461664,"byte_end":461673,"line_start":90,"line_end":90,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":461674,"byte_end":461719,"line_start":91,"line_end":91,"column_start":1,"column_end":46}},{"value":"rustc_const_unstable(feature = \"const_ptr_null_mut\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":461720,"byte_end":461775,"line_start":92,"line_end":92,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":686},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":462252,"byte_end":462256,"line_start":107,"line_end":107,"column_start":15,"column_end":19},"name":"swap","qualname":"::ptr::swap","value":"fn <T> (x: *mut T, y: *mut T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Swaps the values at two mutable locations of the same type, without\n deinitializing either. They may overlap, unlike `mem::swap` which is\n otherwise equivalent.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":462182,"byte_end":462191,"line_start":105,"line_end":105,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":462192,"byte_end":462237,"line_start":106,"line_end":106,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":687},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":463340,"byte_end":463359,"line_start":149,"line_end":149,"column_start":15,"column_end":34},"name":"swap_nonoverlapping","qualname":"::ptr::swap_nonoverlapping","value":"fn <T> (x: *mut T, y: *mut T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Swaps a sequence of values at two mutable locations of the same type.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":463254,"byte_end":463263,"line_start":147,"line_end":147,"column_start":1,"column_end":10}},{"value":"unstable(feature = \"swap_nonoverlapping\", issue = \"42818\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":463264,"byte_end":463325,"line_start":148,"line_end":148,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":691},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":465965,"byte_end":465972,"line_start":217,"line_end":217,"column_start":15,"column_end":22},"name":"replace","qualname":"::ptr::replace","value":"fn <T> (dest: *mut T, mut src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Replaces the value at `dest` with `src`, returning the old\n value, without dropping either.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":465895,"byte_end":465904,"line_start":215,"line_end":215,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":465905,"byte_end":465950,"line_start":216,"line_end":216,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":692},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":466971,"byte_end":466975,"line_start":250,"line_end":250,"column_start":15,"column_end":19},"name":"read","qualname":"::ptr::read","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reads the value from `src` without moving it. This leaves the\n memory in `src` unchanged.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":466901,"byte_end":466910,"line_start":248,"line_end":248,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":466911,"byte_end":466956,"line_start":249,"line_end":249,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":693},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":467983,"byte_end":467997,"line_start":284,"line_end":284,"column_start":15,"column_end":29},"name":"read_unaligned","qualname":"::ptr::read_unaligned","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Reads the value from `src` without moving it. This leaves the\n memory in `src` unchanged.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":467904,"byte_end":467913,"line_start":282,"line_end":282,"column_start":1,"column_end":10}},{"value":"stable(feature = \"ptr_unaligned\", since = \"1.17.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":467914,"byte_end":467968,"line_start":283,"line_end":283,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":694},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":469226,"byte_end":469231,"line_start":327,"line_end":327,"column_start":15,"column_end":20},"name":"write","qualname":"::ptr::write","value":"fn <T> (dst: *mut T, src: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Overwrites a memory location with the given value without reading or\n dropping the old value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":469156,"byte_end":469165,"line_start":325,"line_end":325,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":469166,"byte_end":469211,"line_start":326,"line_end":326,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":695},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":470312,"byte_end":470327,"line_start":366,"line_end":366,"column_start":15,"column_end":30},"name":"write_unaligned","qualname":"::ptr::write_unaligned","value":"fn <T> (dst: *mut T, src: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Overwrites a memory location with the given value without reading or\n dropping the old value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":470233,"byte_end":470242,"line_start":364,"line_end":364,"column_start":1,"column_end":10}},{"value":"stable(feature = \"ptr_unaligned\", since = \"1.17.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":470243,"byte_end":470297,"line_start":365,"line_end":365,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":696},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":472176,"byte_end":472189,"line_start":417,"line_end":417,"column_start":15,"column_end":28},"name":"read_volatile","qualname":"::ptr::read_volatile","value":"fn <T> (src: *const T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile read of the value from `src` without moving it. This\n leaves the memory in `src` unchanged.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":472103,"byte_end":472112,"line_start":415,"line_end":415,"column_start":1,"column_end":10}},{"value":"stable(feature = \"volatile\", since = \"1.9.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":472113,"byte_end":472161,"line_start":416,"line_end":416,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":697},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":473906,"byte_end":473920,"line_start":469,"line_end":469,"column_start":15,"column_end":29},"name":"write_volatile","qualname":"::ptr::write_volatile","value":"fn <T> (dst: *mut T, src: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile write of a memory location with the given value without\n reading or dropping the old value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":473833,"byte_end":473842,"line_start":467,"line_end":467,"column_start":1,"column_end":10}},{"value":"stable(feature = \"volatile\", since = \"1.9.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":473843,"byte_end":473891,"line_start":468,"line_end":468,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":699},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":474368,"byte_end":474375,"line_start":488,"line_end":488,"column_start":12,"column_end":19},"name":"is_null","qualname":"<*const T>::is_null","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":473992,"byte_end":474013,"line_start":473,"line_end":473,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":475361,"byte_end":475367,"line_start":520,"line_end":520,"column_start":19,"column_end":25},"name":"as_ref","qualname":"<*const T>::as_ref","value":"fn <'a, > (self) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":473992,"byte_end":474013,"line_start":473,"line_end":473,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":701},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":477708,"byte_end":477714,"line_start":579,"line_end":579,"column_start":19,"column_end":25},"name":"offset","qualname":"<*const T>::offset","value":"fn (self, count: isize) -> *const T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":473992,"byte_end":474013,"line_start":473,"line_end":473,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":478942,"byte_end":478957,"line_start":617,"line_end":617,"column_start":12,"column_end":27},"name":"wrapping_offset","qualname":"<*const T>::wrapping_offset","value":"fn (self, count: isize) -> *const T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":473992,"byte_end":474013,"line_start":473,"line_end":473,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":703},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":480082,"byte_end":480091,"line_start":651,"line_end":651,"column_start":12,"column_end":21},"name":"offset_to","qualname":"<*const T>::offset_to","value":"fn (self, other: *const T) -> Option<isize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":473992,"byte_end":474013,"line_start":473,"line_end":473,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":482634,"byte_end":482637,"line_start":714,"line_end":714,"column_start":19,"column_end":22},"name":"add","qualname":"<*const T>::add","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":473992,"byte_end":474013,"line_start":473,"line_end":473,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":485023,"byte_end":485026,"line_start":773,"line_end":773,"column_start":19,"column_end":22},"name":"sub","qualname":"<*const T>::sub","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":473992,"byte_end":474013,"line_start":473,"line_end":473,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":486367,"byte_end":486379,"line_start":816,"line_end":816,"column_start":12,"column_end":24},"name":"wrapping_add","qualname":"<*const T>::wrapping_add","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":473992,"byte_end":474013,"line_start":473,"line_end":473,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":487776,"byte_end":487788,"line_start":859,"line_end":859,"column_start":12,"column_end":24},"name":"wrapping_sub","qualname":"<*const T>::wrapping_sub","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":473992,"byte_end":474013,"line_start":473,"line_end":473,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":488983,"byte_end":488987,"line_start":895,"line_end":895,"column_start":19,"column_end":23},"name":"read","qualname":"<*const T>::read","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":473992,"byte_end":474013,"line_start":473,"line_end":473,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":490943,"byte_end":490956,"line_start":947,"line_end":947,"column_start":19,"column_end":32},"name":"read_volatile","qualname":"<*const T>::read_volatile","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":473992,"byte_end":474013,"line_start":473,"line_end":473,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":492080,"byte_end":492094,"line_start":983,"line_end":983,"column_start":19,"column_end":33},"name":"read_unaligned","qualname":"<*const T>::read_unaligned","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":473992,"byte_end":474013,"line_start":473,"line_end":473,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":493263,"byte_end":493270,"line_start":1020,"line_end":1020,"column_start":19,"column_end":26},"name":"copy_to","qualname":"<*const T>::copy_to","value":"fn (self, dest: *mut T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":473992,"byte_end":474013,"line_start":473,"line_end":473,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":494686,"byte_end":494708,"line_start":1059,"line_end":1059,"column_start":19,"column_end":41},"name":"copy_to_nonoverlapping","qualname":"<*const T>::copy_to_nonoverlapping","value":"fn (self, dest: *mut T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":473992,"byte_end":474013,"line_start":473,"line_end":473,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496070,"byte_end":496082,"line_start":1097,"line_end":1097,"column_start":12,"column_end":24},"name":"align_offset","qualname":"<*const T>::align_offset","value":"fn (self, align: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"const_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":473992,"byte_end":474013,"line_start":473,"line_end":473,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":715},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496575,"byte_end":496582,"line_start":1119,"line_end":1119,"column_start":12,"column_end":19},"name":"is_null","qualname":"<*mut T>::is_null","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":497572,"byte_end":497578,"line_start":1151,"line_end":1151,"column_start":19,"column_end":25},"name":"as_ref","qualname":"<*mut T>::as_ref","value":"fn <'a, > (self) -> Option<&'a T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":499908,"byte_end":499914,"line_start":1210,"line_end":1210,"column_start":19,"column_end":25},"name":"offset","qualname":"<*mut T>::offset","value":"fn (self, count: isize) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":501141,"byte_end":501156,"line_start":1247,"line_end":1247,"column_start":12,"column_end":27},"name":"wrapping_offset","qualname":"<*mut T>::wrapping_offset","value":"fn (self, count: isize) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":502069,"byte_end":502075,"line_start":1275,"line_end":1275,"column_start":19,"column_end":25},"name":"as_mut","qualname":"<*mut T>::as_mut","value":"fn <'a, > (self) -> Option<&'a mut T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":503231,"byte_end":503240,"line_start":1311,"line_end":1311,"column_start":12,"column_end":21},"name":"offset_to","qualname":"<*mut T>::offset_to","value":"fn (self, other: *const T) -> Option<isize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":721},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":504763,"byte_end":504775,"line_start":1353,"line_end":1353,"column_start":12,"column_end":24},"name":"align_offset","qualname":"<*mut T>::align_offset","value":"fn (self, align: usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":507166,"byte_end":507169,"line_start":1412,"line_end":1412,"column_start":19,"column_end":22},"name":"add","qualname":"<*mut T>::add","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":509555,"byte_end":509558,"line_start":1471,"line_end":1471,"column_start":19,"column_end":22},"name":"sub","qualname":"<*mut T>::sub","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":510899,"byte_end":510911,"line_start":1514,"line_end":1514,"column_start":12,"column_end":24},"name":"wrapping_add","qualname":"<*mut T>::wrapping_add","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":512308,"byte_end":512320,"line_start":1557,"line_end":1557,"column_start":12,"column_end":24},"name":"wrapping_sub","qualname":"<*mut T>::wrapping_sub","value":"fn (self, count: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":513515,"byte_end":513519,"line_start":1593,"line_end":1593,"column_start":19,"column_end":23},"name":"read","qualname":"<*mut T>::read","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":515474,"byte_end":515487,"line_start":1645,"line_end":1645,"column_start":19,"column_end":32},"name":"read_volatile","qualname":"<*mut T>::read_volatile","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":516611,"byte_end":516625,"line_start":1681,"line_end":1681,"column_start":19,"column_end":33},"name":"read_unaligned","qualname":"<*mut T>::read_unaligned","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":517794,"byte_end":517801,"line_start":1718,"line_end":1718,"column_start":19,"column_end":26},"name":"copy_to","qualname":"<*mut T>::copy_to","value":"fn (self, dest: *mut T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":519217,"byte_end":519239,"line_start":1757,"line_end":1757,"column_start":19,"column_end":41},"name":"copy_to_nonoverlapping","qualname":"<*mut T>::copy_to_nonoverlapping","value":"fn (self, dest: *mut T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":520451,"byte_end":520460,"line_start":1794,"line_end":1794,"column_start":19,"column_end":28},"name":"copy_from","qualname":"<*mut T>::copy_from","value":"fn (self, src: *const T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":521878,"byte_end":521902,"line_start":1833,"line_end":1833,"column_start":19,"column_end":43},"name":"copy_from_nonoverlapping","qualname":"<*mut T>::copy_from_nonoverlapping","value":"fn (self, src: *const T, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":522825,"byte_end":522838,"line_start":1858,"line_end":1858,"column_start":19,"column_end":32},"name":"drop_in_place","qualname":"<*mut T>::drop_in_place","value":"fn (self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":524078,"byte_end":524083,"line_start":1899,"line_end":1899,"column_start":19,"column_end":24},"name":"write","qualname":"<*mut T>::write","value":"fn (self, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":524685,"byte_end":524696,"line_start":1922,"line_end":1922,"column_start":19,"column_end":30},"name":"write_bytes","qualname":"<*mut T>::write_bytes","value":"fn (self, val: u8, count: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":526685,"byte_end":526699,"line_start":1978,"line_end":1978,"column_start":19,"column_end":33},"name":"write_volatile","qualname":"<*mut T>::write_volatile","value":"fn (self, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":527970,"byte_end":527985,"line_start":2021,"line_end":2021,"column_start":19,"column_end":34},"name":"write_unaligned","qualname":"<*mut T>::write_unaligned","value":"fn (self, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":528434,"byte_end":528441,"line_start":2036,"line_end":2036,"column_start":19,"column_end":26},"name":"replace","qualname":"<*mut T>::replace","value":"fn (self, src: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":739},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":529011,"byte_end":529015,"line_start":2054,"line_end":2054,"column_start":19,"column_end":23},"name":"swap","qualname":"<*mut T>::swap","value":"fn (self, with: *mut T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"lang = \"mut_ptr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":496212,"byte_end":496231,"line_start":1104,"line_end":1104,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":746},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":530499,"byte_end":530501,"line_start":2109,"line_end":2109,"column_start":8,"column_end":10},"name":"eq","qualname":"::ptr::eq","value":"fn <T> (a: *const T, b: *const T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Compare raw pointers for equality.","sig":null,"attributes":[{"value":"stable(feature = \"ptr_eq\", since = \"1.17.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":530434,"byte_end":530481,"line_start":2107,"line_end":2107,"column_start":1,"column_end":48}},{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":530482,"byte_end":530491,"line_start":2108,"line_end":2108,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":765},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":536739,"byte_end":536745,"line_start":2290,"line_end":2290,"column_start":12,"column_end":18},"name":"Unique","qualname":"::ptr::Unique","value":"Unique {  }","parent":null,"children":[{"krate":0,"index":2147484133},{"krate":0,"index":2147484134}],"decl_id":null,"docs":" A wrapper around a raw non-null `*mut T` that indicates that the possessor\n of this wrapper owns the referent. Useful for building abstractions like\n `Box<T>`, `Vec<T>`, `String`, and `HashMap<K, V>`.","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":536583,"byte_end":536622,"line_start":2287,"line_end":2287,"column_start":1,"column_end":40}},{"value":"unstable(feature = \"unique\",\n           reason = \"needs an RFC to flesh out design\",\n           issue = \"27730\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":536623,"byte_end":536727,"line_start":2288,"line_end":2289,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":538013,"byte_end":538018,"line_start":2320,"line_end":2320,"column_start":12,"column_end":17},"name":"empty","qualname":"<Unique<T>>::empty","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"unique\", issue = \"27730\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":537752,"byte_end":537800,"line_start":2314,"line_end":2314,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":538469,"byte_end":538482,"line_start":2337,"line_end":2337,"column_start":25,"column_end":38},"name":"new_unchecked","qualname":"<Unique<T>>::new_unchecked","value":"fn (ptr: *mut T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"unique\", issue = \"27730\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":538160,"byte_end":538208,"line_start":2328,"line_end":2328,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":538655,"byte_end":538658,"line_start":2342,"line_end":2342,"column_start":12,"column_end":15},"name":"new","qualname":"<Unique<T>>::new","value":"fn (ptr: *mut T) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"unique\", issue = \"27730\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":538160,"byte_end":538208,"line_start":2328,"line_end":2328,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":538849,"byte_end":538855,"line_start":2347,"line_end":2347,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<Unique<T>>::as_ptr","value":"fn (self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"unique\", issue = \"27730\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":538160,"byte_end":538208,"line_start":2328,"line_end":2328,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":539190,"byte_end":539196,"line_start":2356,"line_end":2356,"column_start":19,"column_end":25},"name":"as_ref","qualname":"<Unique<T>>::as_ref","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"unique\", issue = \"27730\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":538160,"byte_end":538208,"line_start":2328,"line_end":2328,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":539527,"byte_end":539533,"line_start":2365,"line_end":2365,"column_start":19,"column_end":25},"name":"as_mut","qualname":"<Unique<T>>::as_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"unique\", issue = \"27730\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":538160,"byte_end":538208,"line_start":2328,"line_end":2328,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":786},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":542139,"byte_end":542145,"line_start":2429,"line_end":2429,"column_start":12,"column_end":18},"name":"Shared","qualname":"::ptr::Shared","value":"Shared {  }","parent":null,"children":[{"krate":0,"index":2147484150},{"krate":0,"index":2147484151}],"decl_id":null,"docs":" A wrapper around a raw `*mut T` that indicates that the possessor\n of this wrapper has shared ownership of the referent. Useful for\n building abstractions like `Rc<T>`, `Arc<T>`, or doubly-linked lists, which\n internally use aliased raw pointers to manage the memory that they own.","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":541983,"byte_end":542022,"line_start":2426,"line_end":2426,"column_start":1,"column_end":40}},{"value":"unstable(feature = \"shared\",\n           reason = \"needs an RFC to flesh out design\",\n           issue = \"27730\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":542023,"byte_end":542127,"line_start":2427,"line_end":2428,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":543251,"byte_end":543256,"line_start":2455,"line_end":2455,"column_start":12,"column_end":17},"name":"empty","qualname":"<Shared<T>>::empty","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"shared\", issue = \"27730\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":542990,"byte_end":543038,"line_start":2449,"line_end":2449,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":543707,"byte_end":543720,"line_start":2472,"line_end":2472,"column_start":25,"column_end":38},"name":"new_unchecked","qualname":"<Shared<T>>::new_unchecked","value":"fn (ptr: *mut T) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"shared\", issue = \"27730\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":543398,"byte_end":543446,"line_start":2463,"line_end":2463,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":793},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":543893,"byte_end":543896,"line_start":2477,"line_end":2477,"column_start":12,"column_end":15},"name":"new","qualname":"<Shared<T>>::new","value":"fn (ptr: *mut T) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"shared\", issue = \"27730\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":543398,"byte_end":543446,"line_start":2463,"line_end":2463,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":544087,"byte_end":544093,"line_start":2482,"line_end":2482,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<Shared<T>>::as_ptr","value":"fn (self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"shared\", issue = \"27730\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":543398,"byte_end":543446,"line_start":2463,"line_end":2463,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":544428,"byte_end":544434,"line_start":2491,"line_end":2491,"column_start":19,"column_end":25},"name":"as_ref","qualname":"<Shared<T>>::as_ref","value":"fn (&self) -> &T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"shared\", issue = \"27730\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":543398,"byte_end":543446,"line_start":2463,"line_end":2463,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":544769,"byte_end":544775,"line_start":2500,"line_end":2500,"column_start":19,"column_end":25},"name":"as_mut","qualname":"<Shared<T>>::as_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"shared\", issue = \"27730\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":543398,"byte_end":543446,"line_start":2463,"line_end":2463,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":545065,"byte_end":545075,"line_start":2507,"line_end":2507,"column_start":19,"column_end":29},"name":"as_mut_ptr","qualname":"<Shared<T>>::as_mut_ptr","value":"fn (&self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"shared\", issue = \"27730\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":543398,"byte_end":543446,"line_start":2463,"line_end":2463,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":810},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"marker","qualname":"::marker","value":"src/libcore/marker.rs","parent":null,"children":[{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":7809},{"krate":0,"index":7811},{"krate":0,"index":7813},{"krate":0,"index":7814},{"krate":0,"index":7816},{"krate":0,"index":7818},{"krate":0,"index":7819},{"krate":0,"index":7821},{"krate":0,"index":828},{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838}],"decl_id":null,"docs":" Primitive traits and types representing basic properties of types.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":547065,"byte_end":547111,"line_start":17,"line_end":17,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":815},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":548166,"byte_end":548170,"line_start":44,"line_end":44,"column_start":18,"column_end":22},"name":"Send","qualname":"::marker::Send","value":"Send","parent":null,"children":[],"decl_id":null,"docs":" Types that can be transferred across thread boundaries.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":548009,"byte_end":548054,"line_start":41,"line_end":41,"column_start":1,"column_end":46}},{"value":"lang = \"send\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":548055,"byte_end":548071,"line_start":42,"line_end":42,"column_start":1,"column_end":17}},{"value":"rustc_on_unimplemented = \"`{Self}` cannot be sent between threads safely\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":548072,"byte_end":548148,"line_start":43,"line_end":43,"column_start":1,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":819},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":549724,"byte_end":549729,"line_start":93,"line_end":93,"column_start":11,"column_end":16},"name":"Sized","qualname":"::marker::Sized","value":"Sized","parent":null,"children":[],"decl_id":null,"docs":" Types with a constant size known at compile time.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":549464,"byte_end":549509,"line_start":89,"line_end":89,"column_start":1,"column_end":46}},{"value":"lang = \"sized\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":549510,"byte_end":549527,"line_start":90,"line_end":90,"column_start":1,"column_end":18}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` does not have a constant size known at compile-time\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":549528,"byte_end":549618,"line_start":91,"line_end":91,"column_start":1,"column_end":91}},{"value":"fundamental","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":549619,"byte_end":549633,"line_start":92,"line_end":92,"column_start":1,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":820},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":551018,"byte_end":551024,"line_start":126,"line_end":126,"column_start":11,"column_end":17},"name":"Unsize","qualname":"::marker::Unsize","value":"Unsize<T: ?Sized>","parent":null,"children":[],"decl_id":null,"docs":" Types that can be \"unsized\" to a dynamically-sized type.","sig":null,"attributes":[{"value":"unstable(feature = \"unsize\", issue = \"27732\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":550940,"byte_end":550988,"line_start":124,"line_end":124,"column_start":1,"column_end":49}},{"value":"lang = \"unsize\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":550989,"byte_end":551007,"line_start":125,"line_end":125,"column_start":1,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":821},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":555760,"byte_end":555764,"line_start":272,"line_end":272,"column_start":11,"column_end":15},"name":"Copy","qualname":"::marker::Copy","value":"Copy:  Clone","parent":null,"children":[],"decl_id":null,"docs":" Types whose values can be duplicated simply by copying bits.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":555687,"byte_end":555732,"line_start":270,"line_end":270,"column_start":1,"column_end":46}},{"value":"lang = \"copy\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":555733,"byte_end":555749,"line_start":271,"line_end":271,"column_start":1,"column_end":17}}]},{"kind":"Trait","id":{"krate":0,"index":822},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":559335,"byte_end":559339,"line_start":347,"line_end":347,"column_start":18,"column_end":22},"name":"Sync","qualname":"::marker::Sync","value":"Sync","parent":null,"children":[],"decl_id":null,"docs":" Types for which it is safe to share references between threads.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":559176,"byte_end":559221,"line_start":344,"line_end":344,"column_start":1,"column_end":46}},{"value":"lang = \"sync\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":559222,"byte_end":559238,"line_start":345,"line_end":345,"column_start":1,"column_end":17}},{"value":"rustc_on_unimplemented = \"`{Self}` cannot be shared between threads safely\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":559239,"byte_end":559317,"line_start":346,"line_end":346,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":827},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":565844,"byte_end":565855,"line_start":547,"line_end":547,"column_start":12,"column_end":23},"name":"PhantomData","qualname":"::marker::PhantomData","value":"","parent":null,"children":[],"decl_id":null,"docs":" Zero-sized type used to mark things that \"act like\" they own a `T`.","sig":null,"attributes":[{"value":"lang = \"phantom_data\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":565762,"byte_end":565786,"line_start":545,"line_end":545,"column_start":1,"column_end":25}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":565787,"byte_end":565832,"line_start":546,"line_end":546,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":839},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ops","qualname":"::ops","value":"src/libcore/ops/mod.rs","parent":null,"children":[{"krate":0,"index":840},{"krate":0,"index":884},{"krate":0,"index":928},{"krate":0,"index":942},{"krate":0,"index":945},{"krate":0,"index":966},{"krate":0,"index":975},{"krate":0,"index":981},{"krate":0,"index":996},{"krate":0,"index":1020},{"krate":0,"index":1027},{"krate":0,"index":1045},{"krate":0,"index":1051},{"krate":0,"index":1058},{"krate":0,"index":1064},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1072},{"krate":0,"index":1075},{"krate":0,"index":1080},{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1087},{"krate":0,"index":1093},{"krate":0,"index":1094}],"decl_id":null,"docs":" Overloadable operators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,109,111,100,46,114,115],"byte_start":572188,"byte_end":572234,"line_start":155,"line_end":155,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":841},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":576032,"byte_end":576035,"line_start":79,"line_end":79,"column_start":11,"column_end":14},"name":"Add","qualname":"::ops::arith::Add","value":"Add<RHS = Self>","parent":null,"children":[{"krate":0,"index":842},{"krate":0,"index":843}],"decl_id":null,"docs":" The addition operator `+`.","sig":null,"attributes":[{"value":"lang = \"add\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":575891,"byte_end":575906,"line_start":76,"line_end":76,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":575907,"byte_end":575952,"line_start":77,"line_end":77,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} + {RHS}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":575953,"byte_end":576021,"line_start":78,"line_end":78,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":842},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":576167,"byte_end":576173,"line_start":82,"line_end":82,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::arith::Add::Output","value":"type Output;","parent":{"krate":0,"index":841},"children":[],"decl_id":null,"docs":" The resulting type after applying the `+` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":576112,"byte_end":576157,"line_start":81,"line_end":81,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":576269,"byte_end":576272,"line_start":86,"line_end":86,"column_start":8,"column_end":11},"name":"add","qualname":"::ops::arith::Add::add","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":841},"children":[],"decl_id":null,"docs":" The addition operator `+`.","sig":null,"attributes":[{"value":"lang = \"add\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":575891,"byte_end":575906,"line_start":76,"line_end":76,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":575907,"byte_end":575952,"line_start":77,"line_end":77,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} + {RHS}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":575953,"byte_end":576021,"line_start":78,"line_end":78,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":845},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":578458,"byte_end":578461,"line_start":174,"line_end":174,"column_start":11,"column_end":14},"name":"Sub","qualname":"::ops::arith::Sub","value":"Sub<RHS = Self>","parent":null,"children":[{"krate":0,"index":846},{"krate":0,"index":847}],"decl_id":null,"docs":" The subtraction operator `-`.","sig":null,"attributes":[{"value":"lang = \"sub\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":578317,"byte_end":578332,"line_start":171,"line_end":171,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":578333,"byte_end":578378,"line_start":172,"line_end":172,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} - {RHS}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":578379,"byte_end":578447,"line_start":173,"line_end":173,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":846},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":578593,"byte_end":578599,"line_start":177,"line_end":177,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::arith::Sub::Output","value":"type Output;","parent":{"krate":0,"index":845},"children":[],"decl_id":null,"docs":" The resulting type after applying the `-` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":578538,"byte_end":578583,"line_start":176,"line_end":176,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":847},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":578695,"byte_end":578698,"line_start":181,"line_end":181,"column_start":8,"column_end":11},"name":"sub","qualname":"::ops::arith::Sub::sub","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":845},"children":[],"decl_id":null,"docs":" The subtraction operator `-`.","sig":null,"attributes":[{"value":"lang = \"sub\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":578317,"byte_end":578332,"line_start":171,"line_end":171,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":578333,"byte_end":578378,"line_start":172,"line_end":172,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} - {RHS}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":578379,"byte_end":578447,"line_start":173,"line_end":173,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":849},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":581755,"byte_end":581758,"line_start":291,"line_end":291,"column_start":11,"column_end":14},"name":"Mul","qualname":"::ops::arith::Mul","value":"Mul<RHS = Self>","parent":null,"children":[{"krate":0,"index":850},{"krate":0,"index":851}],"decl_id":null,"docs":" The multiplication operator `*`.","sig":null,"attributes":[{"value":"lang = \"mul\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":581614,"byte_end":581629,"line_start":288,"line_end":288,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":581630,"byte_end":581675,"line_start":289,"line_end":289,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} * {RHS}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":581676,"byte_end":581744,"line_start":290,"line_end":290,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":850},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":581890,"byte_end":581896,"line_start":294,"line_end":294,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::arith::Mul::Output","value":"type Output;","parent":{"krate":0,"index":849},"children":[],"decl_id":null,"docs":" The resulting type after applying the `*` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":581835,"byte_end":581880,"line_start":293,"line_end":293,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":851},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":581992,"byte_end":581995,"line_start":298,"line_end":298,"column_start":8,"column_end":11},"name":"mul","qualname":"::ops::arith::Mul::mul","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":849},"children":[],"decl_id":null,"docs":" The multiplication operator `*`.","sig":null,"attributes":[{"value":"lang = \"mul\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":581614,"byte_end":581629,"line_start":288,"line_end":288,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":581630,"byte_end":581675,"line_start":289,"line_end":289,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} * {RHS}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":581676,"byte_end":581744,"line_start":290,"line_end":290,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":853},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":585171,"byte_end":585174,"line_start":412,"line_end":412,"column_start":11,"column_end":14},"name":"Div","qualname":"::ops::arith::Div","value":"Div<RHS = Self>","parent":null,"children":[{"krate":0,"index":854},{"krate":0,"index":855}],"decl_id":null,"docs":" The division operator `/`.","sig":null,"attributes":[{"value":"lang = \"div\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":585030,"byte_end":585045,"line_start":409,"line_end":409,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":585046,"byte_end":585091,"line_start":410,"line_end":410,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} / {RHS}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":585092,"byte_end":585160,"line_start":411,"line_end":411,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":854},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":585306,"byte_end":585312,"line_start":415,"line_end":415,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::arith::Div::Output","value":"type Output;","parent":{"krate":0,"index":853},"children":[],"decl_id":null,"docs":" The resulting type after applying the `/` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":585251,"byte_end":585296,"line_start":414,"line_end":414,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":855},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":585408,"byte_end":585411,"line_start":419,"line_end":419,"column_start":8,"column_end":11},"name":"div","qualname":"::ops::arith::Div::div","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":853},"children":[],"decl_id":null,"docs":" The division operator `/`.","sig":null,"attributes":[{"value":"lang = \"div\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":585030,"byte_end":585045,"line_start":409,"line_end":409,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":585046,"byte_end":585091,"line_start":410,"line_end":410,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} / {RHS}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":585092,"byte_end":585160,"line_start":411,"line_end":411,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":858},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":587535,"byte_end":587538,"line_start":494,"line_end":494,"column_start":11,"column_end":14},"name":"Rem","qualname":"::ops::arith::Rem","value":"Rem<RHS = Self>","parent":null,"children":[{"krate":0,"index":859},{"krate":0,"index":860}],"decl_id":null,"docs":" The remainder operator `%`.","sig":null,"attributes":[{"value":"lang = \"rem\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":587394,"byte_end":587409,"line_start":491,"line_end":491,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":587410,"byte_end":587455,"line_start":492,"line_end":492,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} % {RHS}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":587456,"byte_end":587524,"line_start":493,"line_end":493,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":859},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":587670,"byte_end":587676,"line_start":497,"line_end":497,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::arith::Rem::Output","value":"type Output = Self;","parent":{"krate":0,"index":858},"children":[],"decl_id":null,"docs":" The resulting type after applying the `%` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":587615,"byte_end":587660,"line_start":496,"line_end":496,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":587779,"byte_end":587782,"line_start":501,"line_end":501,"column_start":8,"column_end":11},"name":"rem","qualname":"::ops::arith::Rem::rem","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":858},"children":[],"decl_id":null,"docs":" The remainder operator `%`.","sig":null,"attributes":[{"value":"lang = \"rem\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":587394,"byte_end":587409,"line_start":491,"line_end":491,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":587410,"byte_end":587455,"line_start":492,"line_end":492,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} % {RHS}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":587456,"byte_end":587524,"line_start":493,"line_end":493,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":863},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":589625,"byte_end":589628,"line_start":577,"line_end":577,"column_start":11,"column_end":14},"name":"Neg","qualname":"::ops::arith::Neg","value":"Neg","parent":null,"children":[{"krate":0,"index":864},{"krate":0,"index":865}],"decl_id":null,"docs":" The unary negation operator `-`.","sig":null,"attributes":[{"value":"lang = \"neg\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":589553,"byte_end":589568,"line_start":575,"line_end":575,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":589569,"byte_end":589614,"line_start":576,"line_end":576,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":864},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":589750,"byte_end":589756,"line_start":580,"line_end":580,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::arith::Neg::Output","value":"type Output;","parent":{"krate":0,"index":863},"children":[],"decl_id":null,"docs":" The resulting type after applying the `-` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":589695,"byte_end":589740,"line_start":579,"line_end":579,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":589858,"byte_end":589861,"line_start":584,"line_end":584,"column_start":8,"column_end":11},"name":"neg","qualname":"::ops::arith::Neg::neg","value":"fn (self) -> Self::Output","parent":{"krate":0,"index":863},"children":[],"decl_id":null,"docs":" The unary negation operator `-`.","sig":null,"attributes":[{"value":"lang = \"neg\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":589553,"byte_end":589568,"line_start":575,"line_end":575,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":589569,"byte_end":589614,"line_start":576,"line_end":576,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":869},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":591488,"byte_end":591497,"line_start":651,"line_end":651,"column_start":11,"column_end":20},"name":"AddAssign","qualname":"::ops::arith::AddAssign","value":"AddAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":870}],"decl_id":null,"docs":" The addition assignment operator `+=`.","sig":null,"attributes":[{"value":"lang = \"add_assign\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":591328,"byte_end":591350,"line_start":648,"line_end":648,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":591351,"byte_end":591407,"line_start":649,"line_end":649,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} += {Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":591408,"byte_end":591477,"line_start":650,"line_end":650,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":591615,"byte_end":591625,"line_start":654,"line_end":654,"column_start":8,"column_end":18},"name":"add_assign","qualname":"::ops::arith::AddAssign::add_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":869},"children":[],"decl_id":null,"docs":" The addition assignment operator `+=`.","sig":null,"attributes":[{"value":"lang = \"add_assign\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":591328,"byte_end":591350,"line_start":648,"line_end":648,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":591351,"byte_end":591407,"line_start":649,"line_end":649,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} += {Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":591408,"byte_end":591477,"line_start":650,"line_end":650,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":872},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":592968,"byte_end":592977,"line_start":704,"line_end":704,"column_start":11,"column_end":20},"name":"SubAssign","qualname":"::ops::arith::SubAssign","value":"SubAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":873}],"decl_id":null,"docs":" The subtraction assignment operator `-=`.","sig":null,"attributes":[{"value":"lang = \"sub_assign\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":592808,"byte_end":592830,"line_start":701,"line_end":701,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":592831,"byte_end":592887,"line_start":702,"line_end":702,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} -= {Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":592888,"byte_end":592957,"line_start":703,"line_end":703,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":593095,"byte_end":593105,"line_start":707,"line_end":707,"column_start":8,"column_end":18},"name":"sub_assign","qualname":"::ops::arith::SubAssign::sub_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":872},"children":[],"decl_id":null,"docs":" The subtraction assignment operator `-=`.","sig":null,"attributes":[{"value":"lang = \"sub_assign\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":592808,"byte_end":592830,"line_start":701,"line_end":701,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":592831,"byte_end":592887,"line_start":702,"line_end":702,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} -= {Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":592888,"byte_end":592957,"line_start":703,"line_end":703,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":875},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":594210,"byte_end":594219,"line_start":748,"line_end":748,"column_start":11,"column_end":20},"name":"MulAssign","qualname":"::ops::arith::MulAssign","value":"MulAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":876}],"decl_id":null,"docs":" The multiplication assignment operator `*=`.","sig":null,"attributes":[{"value":"lang = \"mul_assign\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":594050,"byte_end":594072,"line_start":745,"line_end":745,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":594073,"byte_end":594129,"line_start":746,"line_end":746,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} *= {Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":594130,"byte_end":594199,"line_start":747,"line_end":747,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":594337,"byte_end":594347,"line_start":751,"line_end":751,"column_start":8,"column_end":18},"name":"mul_assign","qualname":"::ops::arith::MulAssign::mul_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":875},"children":[],"decl_id":null,"docs":" The multiplication assignment operator `*=`.","sig":null,"attributes":[{"value":"lang = \"mul_assign\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":594050,"byte_end":594072,"line_start":745,"line_end":745,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":594073,"byte_end":594129,"line_start":746,"line_end":746,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} *= {Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":594130,"byte_end":594199,"line_start":747,"line_end":747,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":878},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":595446,"byte_end":595455,"line_start":792,"line_end":792,"column_start":11,"column_end":20},"name":"DivAssign","qualname":"::ops::arith::DivAssign","value":"DivAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":879}],"decl_id":null,"docs":" The division assignment operator `/=`.","sig":null,"attributes":[{"value":"lang = \"div_assign\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":595286,"byte_end":595308,"line_start":789,"line_end":789,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":595309,"byte_end":595365,"line_start":790,"line_end":790,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} /= {Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":595366,"byte_end":595435,"line_start":791,"line_end":791,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":595573,"byte_end":595583,"line_start":795,"line_end":795,"column_start":8,"column_end":18},"name":"div_assign","qualname":"::ops::arith::DivAssign::div_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":878},"children":[],"decl_id":null,"docs":" The division assignment operator `/=`.","sig":null,"attributes":[{"value":"lang = \"div_assign\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":595286,"byte_end":595308,"line_start":789,"line_end":789,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":595309,"byte_end":595365,"line_start":790,"line_end":790,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} /= {Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":595366,"byte_end":595435,"line_start":791,"line_end":791,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":881},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":596728,"byte_end":596737,"line_start":839,"line_end":839,"column_start":11,"column_end":20},"name":"RemAssign","qualname":"::ops::arith::RemAssign","value":"RemAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":882}],"decl_id":null,"docs":" The remainder assignment operator `%=`.","sig":null,"attributes":[{"value":"lang = \"rem_assign\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":596568,"byte_end":596590,"line_start":836,"line_end":836,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":596591,"byte_end":596647,"line_start":837,"line_end":837,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} %= {Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":596648,"byte_end":596717,"line_start":838,"line_end":838,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":596855,"byte_end":596865,"line_start":842,"line_end":842,"column_start":8,"column_end":18},"name":"rem_assign","qualname":"::ops::arith::RemAssign::rem_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":881},"children":[],"decl_id":null,"docs":" The remainder assignment operator `%=`.","sig":null,"attributes":[{"value":"lang = \"rem_assign\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":596568,"byte_end":596590,"line_start":836,"line_end":836,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":596591,"byte_end":596647,"line_start":837,"line_end":837,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} %= {Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,97,114,105,116,104,46,114,115],"byte_start":596648,"byte_end":596717,"line_start":838,"line_end":838,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":885},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":598467,"byte_end":598470,"line_start":43,"line_end":43,"column_start":11,"column_end":14},"name":"Not","qualname":"::ops::bit::Not","value":"Not","parent":null,"children":[{"krate":0,"index":886},{"krate":0,"index":887}],"decl_id":null,"docs":" The unary logical negation operator `!`.","sig":null,"attributes":[{"value":"lang = \"not\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":598395,"byte_end":598410,"line_start":41,"line_end":41,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":598411,"byte_end":598456,"line_start":42,"line_end":42,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":886},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":598592,"byte_end":598598,"line_start":46,"line_end":46,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::bit::Not::Output","value":"type Output;","parent":{"krate":0,"index":885},"children":[],"decl_id":null,"docs":" The resulting type after applying the `!` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":598537,"byte_end":598582,"line_start":45,"line_end":45,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":598700,"byte_end":598703,"line_start":50,"line_end":50,"column_start":8,"column_end":11},"name":"not","qualname":"::ops::bit::Not::not","value":"fn (self) -> Self::Output","parent":{"krate":0,"index":885},"children":[],"decl_id":null,"docs":" The unary logical negation operator `!`.","sig":null,"attributes":[{"value":"lang = \"not\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":598395,"byte_end":598410,"line_start":41,"line_end":41,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":598411,"byte_end":598456,"line_start":42,"line_end":42,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":889},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":600759,"byte_end":600765,"line_start":124,"line_end":124,"column_start":11,"column_end":17},"name":"BitAnd","qualname":"::ops::bit::BitAnd","value":"BitAnd<RHS = Self>","parent":null,"children":[{"krate":0,"index":890},{"krate":0,"index":891}],"decl_id":null,"docs":" The bitwise AND operator `&`.","sig":null,"attributes":[{"value":"lang = \"bitand\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":600615,"byte_end":600633,"line_start":121,"line_end":121,"column_start":1,"column_end":19}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":600634,"byte_end":600679,"line_start":122,"line_end":122,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} & {RHS}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":600680,"byte_end":600748,"line_start":123,"line_end":123,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":890},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":600897,"byte_end":600903,"line_start":127,"line_end":127,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::bit::BitAnd::Output","value":"type Output;","parent":{"krate":0,"index":889},"children":[],"decl_id":null,"docs":" The resulting type after applying the `&` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":600842,"byte_end":600887,"line_start":126,"line_end":126,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":600999,"byte_end":601005,"line_start":131,"line_end":131,"column_start":8,"column_end":14},"name":"bitand","qualname":"::ops::bit::BitAnd::bitand","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":889},"children":[],"decl_id":null,"docs":" The bitwise AND operator `&`.","sig":null,"attributes":[{"value":"lang = \"bitand\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":600615,"byte_end":600633,"line_start":121,"line_end":121,"column_start":1,"column_end":19}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":600634,"byte_end":600679,"line_start":122,"line_end":122,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} & {RHS}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":600680,"byte_end":600748,"line_start":123,"line_end":123,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":893},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":603094,"byte_end":603099,"line_start":205,"line_end":205,"column_start":11,"column_end":16},"name":"BitOr","qualname":"::ops::bit::BitOr","value":"BitOr<RHS = Self>","parent":null,"children":[{"krate":0,"index":894},{"krate":0,"index":895}],"decl_id":null,"docs":" The bitwise OR operator `|`.","sig":null,"attributes":[{"value":"lang = \"bitor\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":602951,"byte_end":602968,"line_start":202,"line_end":202,"column_start":1,"column_end":18}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":602969,"byte_end":603014,"line_start":203,"line_end":203,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} | {RHS}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":603015,"byte_end":603083,"line_start":204,"line_end":204,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":894},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":603231,"byte_end":603237,"line_start":208,"line_end":208,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::bit::BitOr::Output","value":"type Output;","parent":{"krate":0,"index":893},"children":[],"decl_id":null,"docs":" The resulting type after applying the `|` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":603176,"byte_end":603221,"line_start":207,"line_end":207,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":603333,"byte_end":603338,"line_start":212,"line_end":212,"column_start":8,"column_end":13},"name":"bitor","qualname":"::ops::bit::BitOr::bitor","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":893},"children":[],"decl_id":null,"docs":" The bitwise OR operator `|`.","sig":null,"attributes":[{"value":"lang = \"bitor\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":602951,"byte_end":602968,"line_start":202,"line_end":202,"column_start":1,"column_end":18}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":602969,"byte_end":603014,"line_start":203,"line_end":203,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} | {RHS}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":603015,"byte_end":603083,"line_start":204,"line_end":204,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":897},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":605560,"byte_end":605566,"line_start":289,"line_end":289,"column_start":11,"column_end":17},"name":"BitXor","qualname":"::ops::bit::BitXor","value":"BitXor<RHS = Self>","parent":null,"children":[{"krate":0,"index":898},{"krate":0,"index":899}],"decl_id":null,"docs":" The bitwise XOR operator `^`.","sig":null,"attributes":[{"value":"lang = \"bitxor\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":605416,"byte_end":605434,"line_start":286,"line_end":286,"column_start":1,"column_end":19}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":605435,"byte_end":605480,"line_start":287,"line_end":287,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} ^ {RHS}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":605481,"byte_end":605549,"line_start":288,"line_end":288,"column_start":1,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":898},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":605698,"byte_end":605704,"line_start":292,"line_end":292,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::bit::BitXor::Output","value":"type Output;","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":" The resulting type after applying the `^` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":605643,"byte_end":605688,"line_start":291,"line_end":291,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":605800,"byte_end":605806,"line_start":296,"line_end":296,"column_start":8,"column_end":14},"name":"bitxor","qualname":"::ops::bit::BitXor::bitxor","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":897},"children":[],"decl_id":null,"docs":" The bitwise XOR operator `^`.","sig":null,"attributes":[{"value":"lang = \"bitxor\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":605416,"byte_end":605434,"line_start":286,"line_end":286,"column_start":1,"column_end":19}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":605435,"byte_end":605480,"line_start":287,"line_end":287,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} ^ {RHS}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":605481,"byte_end":605549,"line_start":288,"line_end":288,"column_start":1,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":901},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":607705,"byte_end":607708,"line_start":369,"line_end":369,"column_start":11,"column_end":14},"name":"Shl","qualname":"::ops::bit::Shl","value":"Shl<RHS>","parent":null,"children":[{"krate":0,"index":902},{"krate":0,"index":903}],"decl_id":null,"docs":" The left shift operator `<<`.","sig":null,"attributes":[{"value":"lang = \"shl\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":607563,"byte_end":607578,"line_start":366,"line_end":366,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":607579,"byte_end":607624,"line_start":367,"line_end":367,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} << {RHS}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":607625,"byte_end":607694,"line_start":368,"line_end":368,"column_start":1,"column_end":70}}]},{"kind":"Type","id":{"krate":0,"index":902},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":607836,"byte_end":607842,"line_start":372,"line_end":372,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::bit::Shl::Output","value":"type Output;","parent":{"krate":0,"index":901},"children":[],"decl_id":null,"docs":" The resulting type after applying the `<<` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":607781,"byte_end":607826,"line_start":371,"line_end":371,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":607939,"byte_end":607942,"line_start":376,"line_end":376,"column_start":8,"column_end":11},"name":"shl","qualname":"::ops::bit::Shl::shl","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":901},"children":[],"decl_id":null,"docs":" The left shift operator `<<`.","sig":null,"attributes":[{"value":"lang = \"shl\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":607563,"byte_end":607578,"line_start":366,"line_end":366,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":607579,"byte_end":607624,"line_start":367,"line_end":367,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} << {RHS}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":607625,"byte_end":607694,"line_start":368,"line_end":368,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":906},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":610345,"byte_end":610348,"line_start":470,"line_end":470,"column_start":11,"column_end":14},"name":"Shr","qualname":"::ops::bit::Shr","value":"Shr<RHS>","parent":null,"children":[{"krate":0,"index":907},{"krate":0,"index":908}],"decl_id":null,"docs":" The right shift operator `>>`.","sig":null,"attributes":[{"value":"lang = \"shr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":610203,"byte_end":610218,"line_start":467,"line_end":467,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":610219,"byte_end":610264,"line_start":468,"line_end":468,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} >> {RHS}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":610265,"byte_end":610334,"line_start":469,"line_end":469,"column_start":1,"column_end":70}}]},{"kind":"Type","id":{"krate":0,"index":907},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":610476,"byte_end":610482,"line_start":473,"line_end":473,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::bit::Shr::Output","value":"type Output;","parent":{"krate":0,"index":906},"children":[],"decl_id":null,"docs":" The resulting type after applying the `>>` operator.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":610421,"byte_end":610466,"line_start":472,"line_end":472,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":610579,"byte_end":610582,"line_start":477,"line_end":477,"column_start":8,"column_end":11},"name":"shr","qualname":"::ops::bit::Shr::shr","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":906},"children":[],"decl_id":null,"docs":" The right shift operator `>>`.","sig":null,"attributes":[{"value":"lang = \"shr\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":610203,"byte_end":610218,"line_start":467,"line_end":467,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":610219,"byte_end":610264,"line_start":468,"line_end":468,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} >> {RHS}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":610265,"byte_end":610334,"line_start":469,"line_end":469,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":911},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":613526,"byte_end":613538,"line_start":583,"line_end":583,"column_start":11,"column_end":23},"name":"BitAndAssign","qualname":"::ops::bit::BitAndAssign","value":"BitAndAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":912}],"decl_id":null,"docs":" The bitwise AND assignment operator `&=`.","sig":null,"attributes":[{"value":"lang = \"bitand_assign\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":613363,"byte_end":613388,"line_start":580,"line_end":580,"column_start":1,"column_end":26}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":613389,"byte_end":613445,"line_start":581,"line_end":581,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} &= {Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":613446,"byte_end":613515,"line_start":582,"line_end":582,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":912},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":613656,"byte_end":613669,"line_start":586,"line_end":586,"column_start":8,"column_end":21},"name":"bitand_assign","qualname":"::ops::bit::BitAndAssign::bitand_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":911},"children":[],"decl_id":null,"docs":" The bitwise AND assignment operator `&=`.","sig":null,"attributes":[{"value":"lang = \"bitand_assign\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":613363,"byte_end":613388,"line_start":580,"line_end":580,"column_start":1,"column_end":26}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":613389,"byte_end":613445,"line_start":581,"line_end":581,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} &= {Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":613446,"byte_end":613515,"line_start":582,"line_end":582,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":914},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":614982,"byte_end":614993,"line_start":630,"line_end":630,"column_start":11,"column_end":22},"name":"BitOrAssign","qualname":"::ops::bit::BitOrAssign","value":"BitOrAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":915}],"decl_id":null,"docs":" The bitwise OR assignment operator `|=`.","sig":null,"attributes":[{"value":"lang = \"bitor_assign\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":614820,"byte_end":614844,"line_start":627,"line_end":627,"column_start":1,"column_end":25}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":614845,"byte_end":614901,"line_start":628,"line_end":628,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} |= {Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":614902,"byte_end":614971,"line_start":629,"line_end":629,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":615111,"byte_end":615123,"line_start":633,"line_end":633,"column_start":8,"column_end":20},"name":"bitor_assign","qualname":"::ops::bit::BitOrAssign::bitor_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":914},"children":[],"decl_id":null,"docs":" The bitwise OR assignment operator `|=`.","sig":null,"attributes":[{"value":"lang = \"bitor_assign\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":614820,"byte_end":614844,"line_start":627,"line_end":627,"column_start":1,"column_end":25}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":614845,"byte_end":614901,"line_start":628,"line_end":628,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} |= {Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":614902,"byte_end":614971,"line_start":629,"line_end":629,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":917},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":616424,"byte_end":616436,"line_start":677,"line_end":677,"column_start":11,"column_end":23},"name":"BitXorAssign","qualname":"::ops::bit::BitXorAssign","value":"BitXorAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":918}],"decl_id":null,"docs":" The bitwise XOR assignment operator `^=`.","sig":null,"attributes":[{"value":"lang = \"bitxor_assign\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":616261,"byte_end":616286,"line_start":674,"line_end":674,"column_start":1,"column_end":26}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":616287,"byte_end":616343,"line_start":675,"line_end":675,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} ^= {Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":616344,"byte_end":616413,"line_start":676,"line_end":676,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":616554,"byte_end":616567,"line_start":680,"line_end":680,"column_start":8,"column_end":21},"name":"bitxor_assign","qualname":"::ops::bit::BitXorAssign::bitxor_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":917},"children":[],"decl_id":null,"docs":" The bitwise XOR assignment operator `^=`.","sig":null,"attributes":[{"value":"lang = \"bitxor_assign\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":616261,"byte_end":616286,"line_start":674,"line_end":674,"column_start":1,"column_end":26}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":616287,"byte_end":616343,"line_start":675,"line_end":675,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} ^= {Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":616344,"byte_end":616413,"line_start":676,"line_end":676,"column_start":1,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":920},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":617657,"byte_end":617666,"line_start":722,"line_end":722,"column_start":11,"column_end":20},"name":"ShlAssign","qualname":"::ops::bit::ShlAssign","value":"ShlAssign<Rhs>","parent":null,"children":[{"krate":0,"index":921}],"decl_id":null,"docs":" The left shift assignment operator `<<=`.","sig":null,"attributes":[{"value":"lang = \"shl_assign\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":617496,"byte_end":617518,"line_start":719,"line_end":719,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":617519,"byte_end":617575,"line_start":720,"line_end":720,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} <<= {Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":617576,"byte_end":617646,"line_start":721,"line_end":721,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":617780,"byte_end":617790,"line_start":725,"line_end":725,"column_start":8,"column_end":18},"name":"shl_assign","qualname":"::ops::bit::ShlAssign::shl_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":920},"children":[],"decl_id":null,"docs":" The left shift assignment operator `<<=`.","sig":null,"attributes":[{"value":"lang = \"shl_assign\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":617496,"byte_end":617518,"line_start":719,"line_end":719,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":617519,"byte_end":617575,"line_start":720,"line_end":720,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} <<= {Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":617576,"byte_end":617646,"line_start":721,"line_end":721,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":924},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":619457,"byte_end":619466,"line_start":788,"line_end":788,"column_start":11,"column_end":20},"name":"ShrAssign","qualname":"::ops::bit::ShrAssign","value":"ShrAssign<Rhs = Self>","parent":null,"children":[{"krate":0,"index":925}],"decl_id":null,"docs":" The right shift assignment operator `>>=`.","sig":null,"attributes":[{"value":"lang = \"shr_assign\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":619296,"byte_end":619318,"line_start":785,"line_end":785,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":619319,"byte_end":619375,"line_start":786,"line_end":786,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} >>= {Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":619376,"byte_end":619446,"line_start":787,"line_end":787,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":619585,"byte_end":619595,"line_start":791,"line_end":791,"column_start":8,"column_end":18},"name":"shr_assign","qualname":"::ops::bit::ShrAssign::shr_assign","value":"fn (&mut self, rhs: Rhs) -> ()","parent":{"krate":0,"index":924},"children":[],"decl_id":null,"docs":" The right shift assignment operator `>>=`.","sig":null,"attributes":[{"value":"lang = \"shr_assign\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":619296,"byte_end":619318,"line_start":785,"line_end":785,"column_start":1,"column_end":23}},{"value":"stable(feature = \"op_assign_traits\", since = \"1.8.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":619319,"byte_end":619375,"line_start":786,"line_end":786,"column_start":1,"column_end":57}},{"value":"rustc_on_unimplemented = \"no implementation for `{Self} >>= {Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,98,105,116,46,114,115],"byte_start":619376,"byte_end":619446,"line_start":787,"line_end":787,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":929},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":623426,"byte_end":623431,"line_start":72,"line_end":72,"column_start":11,"column_end":16},"name":"Deref","qualname":"::ops::deref::Deref","value":"Deref","parent":null,"children":[{"krate":0,"index":930},{"krate":0,"index":931}],"decl_id":null,"docs":" Used for immutable dereferencing operations, like `*v`.","sig":null,"attributes":[{"value":"lang = \"deref\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":623352,"byte_end":623369,"line_start":70,"line_end":70,"column_start":1,"column_end":18}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":623370,"byte_end":623415,"line_start":71,"line_end":71,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":930},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":623541,"byte_end":623547,"line_start":75,"line_end":75,"column_start":10,"column_end":16},"name":"Target","qualname":"::ops::deref::Deref::Target","value":"type Target: ?Sized;","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" The resulting type after dereferencing.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":623486,"byte_end":623531,"line_start":74,"line_end":74,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":931},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":623647,"byte_end":623652,"line_start":79,"line_end":79,"column_start":8,"column_end":13},"name":"deref","qualname":"::ops::deref::Deref::deref","value":"fn (&self) -> &Self::Target","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" Used for immutable dereferencing operations, like `*v`.","sig":null,"attributes":[{"value":"lang = \"deref\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":623352,"byte_end":623369,"line_start":70,"line_end":70,"column_start":1,"column_end":18}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":623370,"byte_end":623415,"line_start":71,"line_end":71,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":938},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":626512,"byte_end":626520,"line_start":166,"line_end":166,"column_start":11,"column_end":19},"name":"DerefMut","qualname":"::ops::deref::DerefMut","value":"DerefMut:  Deref","parent":null,"children":[{"krate":0,"index":939}],"decl_id":null,"docs":" Used for mutable dereferencing operations, like in `*v = 1;`.","sig":null,"attributes":[{"value":"lang = \"deref_mut\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":626434,"byte_end":626455,"line_start":164,"line_end":164,"column_start":1,"column_end":22}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":626456,"byte_end":626501,"line_start":165,"line_end":165,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":626627,"byte_end":626636,"line_start":169,"line_end":169,"column_start":8,"column_end":17},"name":"deref_mut","qualname":"::ops::deref::DerefMut::deref_mut","value":"fn (&mut self) -> &mut Self::Target","parent":{"krate":0,"index":938},"children":[],"decl_id":null,"docs":" Used for mutable dereferencing operations, like in `*v = 1;`.","sig":null,"attributes":[{"value":"lang = \"deref_mut\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":626434,"byte_end":626455,"line_start":164,"line_end":164,"column_start":1,"column_end":22}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":626456,"byte_end":626501,"line_start":165,"line_end":165,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":943},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,100,114,111,112,46,114,115],"byte_start":629415,"byte_end":629419,"line_start":95,"line_end":95,"column_start":11,"column_end":15},"name":"Drop","qualname":"::ops::drop::Drop","value":"Drop","parent":null,"children":[{"krate":0,"index":944}],"decl_id":null,"docs":" Used to run some code when a value goes out of scope.\n This is sometimes called a 'destructor'.","sig":null,"attributes":[{"value":"lang = \"drop\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,100,114,111,112,46,114,115],"byte_start":629342,"byte_end":629358,"line_start":93,"line_end":93,"column_start":1,"column_end":17}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,100,114,111,112,46,114,115],"byte_start":629359,"byte_end":629404,"line_start":94,"line_end":94,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,100,114,111,112,46,114,115],"byte_start":630339,"byte_end":630343,"line_start":116,"line_end":116,"column_start":8,"column_end":12},"name":"drop","qualname":"::ops::drop::Drop::drop","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":943},"children":[],"decl_id":null,"docs":" Used to run some code when a value goes out of scope.\n This is sometimes called a 'destructor'.","sig":null,"attributes":[{"value":"lang = \"drop\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,100,114,111,112,46,114,115],"byte_start":629342,"byte_end":629358,"line_start":93,"line_end":93,"column_start":1,"column_end":17}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,100,114,111,112,46,114,115],"byte_start":629359,"byte_end":629404,"line_start":94,"line_end":94,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":946},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":632930,"byte_end":632932,"line_start":70,"line_end":70,"column_start":11,"column_end":13},"name":"Fn","qualname":"::ops::function::Fn","value":"Fn<Args>:  FnMut<Args>","parent":null,"children":[{"krate":0,"index":947}],"decl_id":null,"docs":" The version of the call operator that takes an immutable receiver.","sig":null,"attributes":[{"value":"lang = \"fn\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":632777,"byte_end":632791,"line_start":66,"line_end":66,"column_start":1,"column_end":15}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":632792,"byte_end":632837,"line_start":67,"line_end":67,"column_start":1,"column_end":46}},{"value":"rustc_paren_sugar","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":632838,"byte_end":632858,"line_start":68,"line_end":68,"column_start":1,"column_end":21}},{"value":"fundamental","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":632859,"byte_end":632873,"line_start":69,"line_end":69,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":633074,"byte_end":633078,"line_start":73,"line_end":73,"column_start":27,"column_end":31},"name":"call","qualname":"::ops::function::Fn::call","value":"fn (&self, args: Args) -> Self::Output","parent":{"krate":0,"index":946},"children":[],"decl_id":null,"docs":" The version of the call operator that takes an immutable receiver.","sig":null,"attributes":[{"value":"lang = \"fn\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":632777,"byte_end":632791,"line_start":66,"line_end":66,"column_start":1,"column_end":15}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":632792,"byte_end":632837,"line_start":67,"line_end":67,"column_start":1,"column_end":46}},{"value":"rustc_paren_sugar","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":632838,"byte_end":632858,"line_start":68,"line_end":68,"column_start":1,"column_end":21}},{"value":"fundamental","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":632859,"byte_end":632873,"line_start":69,"line_end":69,"column_start":1,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":948},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":635341,"byte_end":635346,"line_start":143,"line_end":143,"column_start":11,"column_end":16},"name":"FnMut","qualname":"::ops::function::FnMut","value":"FnMut<Args>:  FnOnce<Args>","parent":null,"children":[{"krate":0,"index":949}],"decl_id":null,"docs":" The version of the call operator that takes a mutable receiver.","sig":null,"attributes":[{"value":"lang = \"fn_mut\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":635184,"byte_end":635202,"line_start":139,"line_end":139,"column_start":1,"column_end":19}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":635203,"byte_end":635248,"line_start":140,"line_end":140,"column_start":1,"column_end":46}},{"value":"rustc_paren_sugar","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":635249,"byte_end":635269,"line_start":141,"line_end":141,"column_start":1,"column_end":21}},{"value":"fundamental","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":635270,"byte_end":635284,"line_start":142,"line_end":142,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":949},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":635489,"byte_end":635497,"line_start":146,"line_end":146,"column_start":27,"column_end":35},"name":"call_mut","qualname":"::ops::function::FnMut::call_mut","value":"fn (&mut self, args: Args) -> Self::Output","parent":{"krate":0,"index":948},"children":[],"decl_id":null,"docs":" The version of the call operator that takes a mutable receiver.","sig":null,"attributes":[{"value":"lang = \"fn_mut\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":635184,"byte_end":635202,"line_start":139,"line_end":139,"column_start":1,"column_end":19}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":635203,"byte_end":635248,"line_start":140,"line_end":140,"column_start":1,"column_end":46}},{"value":"rustc_paren_sugar","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":635249,"byte_end":635269,"line_start":141,"line_end":141,"column_start":1,"column_end":21}},{"value":"fundamental","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":635270,"byte_end":635284,"line_start":142,"line_end":142,"column_start":1,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":950},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":637964,"byte_end":637970,"line_start":216,"line_end":216,"column_start":11,"column_end":17},"name":"FnOnce","qualname":"::ops::function::FnOnce","value":"FnOnce<Args>","parent":null,"children":[{"krate":0,"index":951},{"krate":0,"index":952}],"decl_id":null,"docs":" The version of the call operator that takes a by-value receiver.","sig":null,"attributes":[{"value":"lang = \"fn_once\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":637806,"byte_end":637825,"line_start":212,"line_end":212,"column_start":1,"column_end":20}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":637826,"byte_end":637871,"line_start":213,"line_end":213,"column_start":1,"column_end":46}},{"value":"rustc_paren_sugar","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":637872,"byte_end":637892,"line_start":214,"line_end":214,"column_start":1,"column_end":21}},{"value":"fundamental","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":637893,"byte_end":637907,"line_start":215,"line_end":215,"column_start":1,"column_end":15}}]},{"kind":"Type","id":{"krate":0,"index":951},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":638107,"byte_end":638113,"line_start":219,"line_end":219,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::function::FnOnce::Output","value":"type Output;","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" The returned type after the call operator is used.\n","sig":null,"attributes":[{"value":"stable(feature = \"fn_once_output\", since = \"1.12.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":638042,"byte_end":638097,"line_start":218,"line_end":218,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":638235,"byte_end":638244,"line_start":223,"line_end":223,"column_start":27,"column_end":36},"name":"call_once","qualname":"::ops::function::FnOnce::call_once","value":"fn (self, args: Args) -> Self::Output","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" The version of the call operator that takes a by-value receiver.","sig":null,"attributes":[{"value":"lang = \"fn_once\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":637806,"byte_end":637825,"line_start":212,"line_end":212,"column_start":1,"column_end":20}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":637826,"byte_end":637871,"line_start":213,"line_end":213,"column_start":1,"column_end":46}},{"value":"rustc_paren_sugar","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":637872,"byte_end":637892,"line_start":214,"line_end":214,"column_start":1,"column_end":21}},{"value":"fundamental","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":637893,"byte_end":637907,"line_start":215,"line_end":215,"column_start":1,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147492325},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":640871,"byte_end":640878,"line_start":26,"line_end":26,"column_start":5,"column_end":12},"name":"Yielded","qualname":"::ops::generator::GeneratorState::Yielded","value":"GeneratorState::Yielded(Y)","parent":{"krate":0,"index":14301},"children":[],"decl_id":null,"docs":" The generator suspended with a value.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147492327},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":641160,"byte_end":641168,"line_start":33,"line_end":33,"column_start":5,"column_end":13},"name":"Complete","qualname":"::ops::generator::GeneratorState::Complete","value":"GeneratorState::Complete(R)","parent":{"krate":0,"index":14301},"children":[],"decl_id":null,"docs":" The generator completed with a return value.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":14301},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":640504,"byte_end":640518,"line_start":19,"line_end":19,"column_start":10,"column_end":24},"name":"GeneratorState","qualname":"::ops::generator::GeneratorState","value":"GeneratorState::{Yielded, Complete}","parent":null,"children":[{"krate":0,"index":2147492325},{"krate":0,"index":2147492327}],"decl_id":null,"docs":" The result of a generator resumption.","sig":null,"attributes":[{"value":"lang = \"generator_state\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":640409,"byte_end":640436,"line_start":17,"line_end":17,"column_start":1,"column_end":28}},{"value":"unstable(feature = \"generator_trait\", issue = \"43122\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":640437,"byte_end":640494,"line_start":18,"line_end":18,"column_start":1,"column_end":58}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":640495,"byte_end":641174,"line_start":19,"line_end":34,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":640495,"byte_end":641174,"line_start":19,"line_end":34,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":967},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":642533,"byte_end":642542,"line_start":76,"line_end":76,"column_start":11,"column_end":20},"name":"Generator","qualname":"::ops::generator::Generator","value":"Generator","parent":null,"children":[{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":970}],"decl_id":null,"docs":" The trait implemented by builtin generator types.","sig":null,"attributes":[{"value":"lang = \"generator\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":642428,"byte_end":642449,"line_start":73,"line_end":73,"column_start":1,"column_end":22}},{"value":"unstable(feature = \"generator_trait\", issue = \"43122\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":642450,"byte_end":642507,"line_start":74,"line_end":74,"column_start":1,"column_end":58}},{"value":"fundamental","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":642508,"byte_end":642522,"line_start":75,"line_end":75,"column_start":1,"column_end":15}}]},{"kind":"Type","id":{"krate":0,"index":968},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":642885,"byte_end":642890,"line_start":83,"line_end":83,"column_start":10,"column_end":15},"name":"Yield","qualname":"::ops::generator::Generator::Yield","value":"type Yield;","parent":{"krate":0,"index":967},"children":[],"decl_id":null,"docs":" The type of value this generator yields.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":969},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":643231,"byte_end":643237,"line_start":91,"line_end":91,"column_start":10,"column_end":16},"name":"Return","qualname":"::ops::generator::Generator::Return","value":"type Return;","parent":{"krate":0,"index":967},"children":[],"decl_id":null,"docs":" The type of value this generator returns.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":644562,"byte_end":644568,"line_start":119,"line_end":119,"column_start":8,"column_end":14},"name":"resume","qualname":"::ops::generator::Generator::resume","value":"fn (&mut self) -> GeneratorState<Self::Yield, Self::Return>","parent":{"krate":0,"index":967},"children":[],"decl_id":null,"docs":" The trait implemented by builtin generator types.","sig":null,"attributes":[{"value":"lang = \"generator\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":642428,"byte_end":642449,"line_start":73,"line_end":73,"column_start":1,"column_end":22}},{"value":"unstable(feature = \"generator_trait\", issue = \"43122\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":642450,"byte_end":642507,"line_start":74,"line_end":74,"column_start":1,"column_end":58}},{"value":"fundamental","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,103,101,110,101,114,97,116,111,114,46,114,115],"byte_start":642508,"byte_end":642522,"line_start":75,"line_end":75,"column_start":1,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":976},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":647092,"byte_end":647097,"line_start":65,"line_end":65,"column_start":11,"column_end":16},"name":"Index","qualname":"::ops::index::Index","value":"Index<Idx: ?Sized>","parent":null,"children":[{"krate":0,"index":977},{"krate":0,"index":978}],"decl_id":null,"docs":" Used for indexing operations (`container[index]`) in immutable contexts.","sig":null,"attributes":[{"value":"lang = \"index\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":646941,"byte_end":646958,"line_start":62,"line_end":62,"column_start":1,"column_end":18}},{"value":"rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":646959,"byte_end":647035,"line_start":63,"line_end":63,"column_start":1,"column_end":77}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":647036,"byte_end":647081,"line_start":64,"line_end":64,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":977},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":647214,"byte_end":647220,"line_start":68,"line_end":68,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::index::Index::Output","value":"type Output: ?Sized;","parent":{"krate":0,"index":976},"children":[],"decl_id":null,"docs":" The returned type after indexing.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":647159,"byte_end":647204,"line_start":67,"line_end":67,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":647350,"byte_end":647355,"line_start":72,"line_end":72,"column_start":8,"column_end":13},"name":"index","qualname":"::ops::index::Index::index","value":"fn (&self, index: Idx) -> &Self::Output","parent":{"krate":0,"index":976},"children":[],"decl_id":null,"docs":" Used for indexing operations (`container[index]`) in immutable contexts.","sig":null,"attributes":[{"value":"lang = \"index\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":646941,"byte_end":646958,"line_start":62,"line_end":62,"column_start":1,"column_end":18}},{"value":"rustc_on_unimplemented = \"the type `{Self}` cannot be indexed by `{Idx}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":646959,"byte_end":647035,"line_start":63,"line_end":63,"column_start":1,"column_end":77}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":647036,"byte_end":647081,"line_start":64,"line_end":64,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":979},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":649662,"byte_end":649670,"line_start":149,"line_end":149,"column_start":11,"column_end":19},"name":"IndexMut","qualname":"::ops::index::IndexMut","value":"IndexMut<Idx: ?Sized>:  Index<Idx>","parent":null,"children":[{"krate":0,"index":980}],"decl_id":null,"docs":" Used for indexing operations (`container[index]`) in mutable contexts.","sig":null,"attributes":[{"value":"lang = \"index_mut\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":649499,"byte_end":649520,"line_start":146,"line_end":146,"column_start":1,"column_end":22}},{"value":"rustc_on_unimplemented =\n      \"the type `{Self}` cannot be mutably indexed by `{Idx}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":649521,"byte_end":649605,"line_start":147,"line_end":147,"column_start":1,"column_end":85}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":649606,"byte_end":649651,"line_start":148,"line_end":148,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":649825,"byte_end":649834,"line_start":152,"line_end":152,"column_start":8,"column_end":17},"name":"index_mut","qualname":"::ops::index::IndexMut::index_mut","value":"fn (&mut self, index: Idx) -> &mut Self::Output","parent":{"krate":0,"index":979},"children":[],"decl_id":null,"docs":" Used for indexing operations (`container[index]`) in mutable contexts.","sig":null,"attributes":[{"value":"lang = \"index_mut\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":649499,"byte_end":649520,"line_start":146,"line_end":146,"column_start":1,"column_end":22}},{"value":"rustc_on_unimplemented =\n      \"the type `{Self}` cannot be mutably indexed by `{Idx}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":649521,"byte_end":649605,"line_start":147,"line_end":147,"column_start":1,"column_end":85}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":649606,"byte_end":649651,"line_start":148,"line_end":148,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":982},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":651362,"byte_end":651367,"line_start":30,"line_end":30,"column_start":11,"column_end":16},"name":"Place","qualname":"::ops::place::Place","value":"Place<Data: ?Sized>","parent":null,"children":[{"krate":0,"index":983}],"decl_id":null,"docs":" Both `PLACE <- EXPR` and `box EXPR` desugar into expressions\n that allocate an intermediate \"place\" that holds uninitialized\n state.  The desugaring evaluates EXPR, and writes the result at\n the address returned by the `pointer` method of this trait.","sig":null,"attributes":[{"value":"unstable(feature = \"placement_new_protocol\", issue = \"27779\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":651287,"byte_end":651351,"line_start":29,"line_end":29,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":983},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":651595,"byte_end":651602,"line_start":34,"line_end":34,"column_start":8,"column_end":15},"name":"pointer","qualname":"::ops::place::Place::pointer","value":"fn (&mut self) -> *mut Data","parent":{"krate":0,"index":982},"children":[],"decl_id":null,"docs":" Both `PLACE <- EXPR` and `box EXPR` desugar into expressions\n that allocate an intermediate \"place\" that holds uninitialized\n state.  The desugaring evaluates EXPR, and writes the result at\n the address returned by the `pointer` method of this trait.","sig":null,"attributes":[{"value":"unstable(feature = \"placement_new_protocol\", issue = \"27779\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":651287,"byte_end":651351,"line_start":29,"line_end":29,"column_start":1,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":984},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":652702,"byte_end":652708,"line_start":68,"line_end":68,"column_start":11,"column_end":17},"name":"Placer","qualname":"::ops::place::Placer","value":"Placer<Data: ?Sized>","parent":null,"children":[{"krate":0,"index":985},{"krate":0,"index":986}],"decl_id":null,"docs":" Interface to implementations of  `PLACE <- EXPR`.","sig":null,"attributes":[{"value":"unstable(feature = \"placement_new_protocol\", issue = \"27779\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":652627,"byte_end":652691,"line_start":67,"line_end":67,"column_start":1,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":985},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":652829,"byte_end":652834,"line_start":71,"line_end":71,"column_start":10,"column_end":15},"name":"Place","qualname":"::ops::place::Placer::Place","value":"type Place: InPlace<Data>;","parent":{"krate":0,"index":984},"children":[],"decl_id":null,"docs":" `Place` is the intermediate agent guarding the\n uninitialized state for `Data`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":652902,"byte_end":652912,"line_start":74,"line_end":74,"column_start":8,"column_end":18},"name":"make_place","qualname":"::ops::place::Placer::make_place","value":"fn (self) -> Self::Place","parent":{"krate":0,"index":984},"children":[],"decl_id":null,"docs":" Interface to implementations of  `PLACE <- EXPR`.","sig":null,"attributes":[{"value":"unstable(feature = \"placement_new_protocol\", issue = \"27779\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":652627,"byte_end":652691,"line_start":67,"line_end":67,"column_start":1,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":987},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":653077,"byte_end":653084,"line_start":79,"line_end":79,"column_start":11,"column_end":18},"name":"InPlace","qualname":"::ops::place::InPlace","value":"InPlace<Data: ?Sized>:  Place<Data>","parent":null,"children":[{"krate":0,"index":988},{"krate":0,"index":989}],"decl_id":null,"docs":" Specialization of `Place` trait supporting `PLACE <- EXPR`.\n","sig":null,"attributes":[{"value":"unstable(feature = \"placement_new_protocol\", issue = \"27779\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":653002,"byte_end":653066,"line_start":78,"line_end":78,"column_start":1,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":988},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":653455,"byte_end":653460,"line_start":87,"line_end":87,"column_start":10,"column_end":15},"name":"Owner","qualname":"::ops::place::InPlace::Owner","value":"type Owner;","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":" `Owner` is the type of the end value of `PLACE <- EXPR`","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":989},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":653663,"byte_end":653671,"line_start":92,"line_end":92,"column_start":15,"column_end":23},"name":"finalize","qualname":"::ops::place::InPlace::finalize","value":"fn (self) -> Self::Owner","parent":{"krate":0,"index":987},"children":[],"decl_id":null,"docs":" Specialization of `Place` trait supporting `PLACE <- EXPR`.\n","sig":null,"attributes":[{"value":"unstable(feature = \"placement_new_protocol\", issue = \"27779\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":653002,"byte_end":653066,"line_start":78,"line_end":78,"column_start":1,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":990},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":654614,"byte_end":654619,"line_start":123,"line_end":123,"column_start":11,"column_end":16},"name":"Boxed","qualname":"::ops::place::Boxed","value":"Boxed","parent":null,"children":[{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":993}],"decl_id":null,"docs":" Core trait for the `box EXPR` form.","sig":null,"attributes":[{"value":"unstable(feature = \"placement_new_protocol\", issue = \"27779\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":654539,"byte_end":654603,"line_start":122,"line_end":122,"column_start":1,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":991},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":654692,"byte_end":654696,"line_start":125,"line_end":125,"column_start":10,"column_end":14},"name":"Data","qualname":"::ops::place::Boxed::Data","value":"type Data;","parent":{"krate":0,"index":990},"children":[],"decl_id":null,"docs":" The kind of data that is stored in this kind of box.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":992},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":654829,"byte_end":654834,"line_start":127,"line_end":127,"column_start":10,"column_end":15},"name":"Place","qualname":"::ops::place::Boxed::Place","value":"type Place: BoxPlace<Self::Data>;","parent":{"krate":0,"index":990},"children":[],"decl_id":null,"docs":" The place that will negotiate the storage of the data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":993},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":655069,"byte_end":655077,"line_start":132,"line_end":132,"column_start":15,"column_end":23},"name":"finalize","qualname":"::ops::place::Boxed::finalize","value":"fn (filled: Self::Place) -> Self","parent":{"krate":0,"index":990},"children":[],"decl_id":null,"docs":" Core trait for the `box EXPR` form.","sig":null,"attributes":[{"value":"unstable(feature = \"placement_new_protocol\", issue = \"27779\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":654539,"byte_end":654603,"line_start":122,"line_end":122,"column_start":1,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":994},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":655245,"byte_end":655253,"line_start":137,"line_end":137,"column_start":11,"column_end":19},"name":"BoxPlace","qualname":"::ops::place::BoxPlace","value":"BoxPlace<Data: ?Sized>:  Place<Data>","parent":null,"children":[{"krate":0,"index":995}],"decl_id":null,"docs":" Specialization of `Place` trait supporting `box EXPR`.\n","sig":null,"attributes":[{"value":"unstable(feature = \"placement_new_protocol\", issue = \"27779\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":655170,"byte_end":655234,"line_start":136,"line_end":136,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":995},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":655331,"byte_end":655341,"line_start":139,"line_end":139,"column_start":8,"column_end":18},"name":"make_place","qualname":"::ops::place::BoxPlace::make_place","value":"fn () -> Self","parent":{"krate":0,"index":994},"children":[],"decl_id":null,"docs":" Specialization of `Place` trait supporting `box EXPR`.\n","sig":null,"attributes":[{"value":"unstable(feature = \"placement_new_protocol\", issue = \"27779\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":655170,"byte_end":655234,"line_start":136,"line_end":136,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":14322},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":656913,"byte_end":656922,"line_start":50,"line_end":50,"column_start":12,"column_end":21},"name":"RangeFull","qualname":"::ops::range::RangeFull","value":"","parent":null,"children":[],"decl_id":null,"docs":" An unbounded range (`..`).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":656856,"byte_end":656901,"line_start":49,"line_end":49,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":656902,"byte_end":656923,"line_start":50,"line_end":50,"column_start":1,"column_end":22}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":656902,"byte_end":656923,"line_start":50,"line_end":50,"column_start":1,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":14332},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":657739,"byte_end":657744,"line_start":79,"line_end":79,"column_start":12,"column_end":17},"name":"Range","qualname":"::ops::range::Range","value":"Range { start, end }","parent":null,"children":[{"krate":0,"index":2147492350},{"krate":0,"index":2147492351}],"decl_id":null,"docs":" A (half-open) range bounded inclusively below and exclusively above\n (`start..end`).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":657682,"byte_end":657727,"line_start":78,"line_end":78,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":657728,"byte_end":657991,"line_start":79,"line_end":86,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":2147492350},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":657860,"byte_end":657865,"line_start":82,"line_end":82,"column_start":9,"column_end":14},"name":"start","qualname":"::ops::range::Range::start","value":"Idx","parent":{"krate":0,"index":14332},"children":[],"decl_id":null,"docs":" The lower bound of the range (inclusive).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":657806,"byte_end":657851,"line_start":81,"line_end":81,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":2147492351},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":657980,"byte_end":657983,"line_start":85,"line_end":85,"column_start":9,"column_end":12},"name":"end","qualname":"::ops::range::Range::end","value":"Idx","parent":{"krate":0,"index":14332},"children":[],"decl_id":null,"docs":" The upper bound of the range (exclusive).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":657926,"byte_end":657971,"line_start":84,"line_end":84,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1003},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":658760,"byte_end":658768,"line_start":112,"line_end":112,"column_start":12,"column_end":20},"name":"contains","qualname":"<Range<Idx>>::contains","value":"fn (&self, item: Idx) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"range_contains\",\n           reason = \"recently added as per RFC\",\n           issue = \"32311\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":658215,"byte_end":658309,"line_start":95,"line_end":95,"column_start":1,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":14342},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":659790,"byte_end":659799,"line_start":142,"line_end":142,"column_start":12,"column_end":21},"name":"RangeFrom","qualname":"::ops::range::RangeFrom","value":"RangeFrom { start }","parent":null,"children":[{"krate":0,"index":2147492358}],"decl_id":null,"docs":" A range only bounded inclusively below (`start..`).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":659733,"byte_end":659778,"line_start":141,"line_end":141,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":659779,"byte_end":659928,"line_start":142,"line_end":146,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":2147492358},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":659915,"byte_end":659920,"line_start":145,"line_end":145,"column_start":9,"column_end":14},"name":"start","qualname":"::ops::range::RangeFrom::start","value":"Idx","parent":{"krate":0,"index":14342},"children":[],"decl_id":null,"docs":" The lower bound of the range (inclusive).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":659861,"byte_end":659906,"line_start":144,"line_end":144,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1007},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":660578,"byte_end":660586,"line_start":168,"line_end":168,"column_start":12,"column_end":20},"name":"contains","qualname":"<RangeFrom<Idx>>::contains","value":"fn (&self, item: Idx) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"range_contains\",\n           reason = \"recently added as per RFC\",\n           issue = \"32311\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":660142,"byte_end":660236,"line_start":155,"line_end":155,"column_start":1,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":14352},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":661910,"byte_end":661917,"line_start":213,"line_end":213,"column_start":12,"column_end":19},"name":"RangeTo","qualname":"::ops::range::RangeTo","value":"RangeTo { end }","parent":null,"children":[{"krate":0,"index":2147492365}],"decl_id":null,"docs":" A range only bounded exclusively above (`..end`).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":661853,"byte_end":661898,"line_start":212,"line_end":212,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":661899,"byte_end":662044,"line_start":213,"line_end":217,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":661899,"byte_end":662044,"line_start":213,"line_end":217,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":2147492365},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":662033,"byte_end":662036,"line_start":216,"line_end":216,"column_start":9,"column_end":12},"name":"end","qualname":"::ops::range::RangeTo::end","value":"Idx","parent":{"krate":0,"index":14352},"children":[],"decl_id":null,"docs":" The upper bound of the range (exclusive).\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":661979,"byte_end":662024,"line_start":215,"line_end":215,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":662689,"byte_end":662697,"line_start":239,"line_end":239,"column_start":12,"column_end":20},"name":"contains","qualname":"<RangeTo<Idx>>::contains","value":"fn (&self, item: Idx) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"range_contains\",\n           reason = \"recently added as per RFC\",\n           issue = \"32311\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":662254,"byte_end":662348,"line_start":226,"line_end":226,"column_start":1,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":14363},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":663444,"byte_end":663458,"line_start":263,"line_end":263,"column_start":12,"column_end":26},"name":"RangeInclusive","qualname":"::ops::range::RangeInclusive","value":"RangeInclusive { start, end }","parent":null,"children":[{"krate":0,"index":2147492373},{"krate":0,"index":2147492374}],"decl_id":null,"docs":" An range bounded inclusively below and above (`start..=end`).","sig":null,"attributes":[{"value":"unstable(feature = \"inclusive_range\",\n           reason = \"recently added, follows RFC\",\n           issue = \"28237\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":663335,"byte_end":663432,"line_start":262,"line_end":262,"column_start":1,"column_end":98}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":663433,"byte_end":663869,"line_start":263,"line_end":274,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":2147492373},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":663656,"byte_end":663661,"line_start":268,"line_end":268,"column_start":9,"column_end":14},"name":"start","qualname":"::ops::range::RangeInclusive::start","value":"Idx","parent":{"krate":0,"index":14363},"children":[],"decl_id":null,"docs":" The lower bound of the range (inclusive).\n","sig":null,"attributes":[{"value":"unstable(feature = \"inclusive_range\",\n           reason = \"recently added, follows RFC\",\n           issue = \"28237\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":663520,"byte_end":663647,"line_start":265,"line_end":267,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":2147492374},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":663858,"byte_end":663861,"line_start":273,"line_end":273,"column_start":9,"column_end":12},"name":"end","qualname":"::ops::range::RangeInclusive::end","value":"Idx","parent":{"krate":0,"index":14363},"children":[],"decl_id":null,"docs":" The upper bound of the range (inclusive).\n","sig":null,"attributes":[{"value":"unstable(feature = \"inclusive_range\",\n           reason = \"recently added, follows RFC\",\n           issue = \"28237\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":663722,"byte_end":663849,"line_start":270,"line_end":272,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1015},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":664777,"byte_end":664785,"line_start":301,"line_end":301,"column_start":12,"column_end":20},"name":"contains","qualname":"<RangeInclusive<Idx>>::contains","value":"fn (&self, item: Idx) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"range_contains\",\n           reason = \"recently added as per RFC\",\n           issue = \"32311\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":664155,"byte_end":664249,"line_start":283,"line_end":283,"column_start":1,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":14373},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":666321,"byte_end":666337,"line_start":349,"line_end":349,"column_start":12,"column_end":28},"name":"RangeToInclusive","qualname":"::ops::range::RangeToInclusive","value":"RangeToInclusive { end }","parent":null,"children":[{"krate":0,"index":2147492381}],"decl_id":null,"docs":" A range only bounded inclusively above (`..=end`).","sig":null,"attributes":[{"value":"unstable(feature = \"inclusive_range\",\n           reason = \"recently added, follows RFC\",\n           issue = \"28237\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":666212,"byte_end":666309,"line_start":348,"line_end":348,"column_start":1,"column_end":98}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":666310,"byte_end":666545,"line_start":349,"line_end":355,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":666310,"byte_end":666545,"line_start":349,"line_end":355,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":2147492381},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":666534,"byte_end":666537,"line_start":354,"line_end":354,"column_start":9,"column_end":12},"name":"end","qualname":"::ops::range::RangeToInclusive::end","value":"Idx","parent":{"krate":0,"index":14373},"children":[],"decl_id":null,"docs":" The upper bound of the range (inclusive)\n","sig":null,"attributes":[{"value":"unstable(feature = \"inclusive_range\",\n           reason = \"recently added, follows RFC\",\n           issue = \"28237\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":666398,"byte_end":666525,"line_start":351,"line_end":353,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1019},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":667287,"byte_end":667295,"line_start":377,"line_end":377,"column_start":12,"column_end":20},"name":"contains","qualname":"<RangeToInclusive<Idx>>::contains","value":"fn (&self, item: Idx) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"range_contains\",\n           reason = \"recently added as per RFC\",\n           issue = \"32311\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":666817,"byte_end":666911,"line_start":364,"line_end":364,"column_start":1,"column_end":95}}]},{"kind":"Trait","id":{"krate":0,"index":1021},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":668952,"byte_end":668955,"line_start":31,"line_end":31,"column_start":11,"column_end":14},"name":"Try","qualname":"::ops::try::Try","value":"Try","parent":null,"children":[{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1025},{"krate":0,"index":1026}],"decl_id":null,"docs":" A trait for customizing the behavior of the `?` operator.","sig":null,"attributes":[{"value":"unstable(feature = \"try_trait\", issue = \"42327\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":668287,"byte_end":668338,"line_start":17,"line_end":17,"column_start":1,"column_end":52}},{"value":"rustc_on_unimplemented(on(all(any(from_method = \"from_error\",\n                                    from_method = \"from_ok\"),\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be used in a function that returns `Result` (or another type that implements `{Try}`)\",\n                            label =\n                                \"cannot use the `?` operator in a function that returns `{Self}`\"),\n                         on(all(from_method = \"into_result\",\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be applied to values that implement `{Try}`\",\n                            label =\n                                \"the `?` operator cannot be applied to type `{Self}`\"))","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":668339,"byte_end":668941,"line_start":18,"line_end":30,"column_start":1,"column_end":3}}]},{"kind":"Type","id":{"krate":0,"index":1022},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":669081,"byte_end":669083,"line_start":34,"line_end":34,"column_start":10,"column_end":12},"name":"Ok","qualname":"::ops::try::Try::Ok","value":"type Ok;","parent":{"krate":0,"index":1021},"children":[],"decl_id":null,"docs":" The type of this value when viewed as successful.\n","sig":null,"attributes":[{"value":"unstable(feature = \"try_trait\", issue = \"42327\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":669020,"byte_end":669071,"line_start":33,"line_end":33,"column_start":5,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":1023},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":669204,"byte_end":669209,"line_start":37,"line_end":37,"column_start":10,"column_end":15},"name":"Error","qualname":"::ops::try::Try::Error","value":"type Error;","parent":{"krate":0,"index":1021},"children":[],"decl_id":null,"docs":" The type of this value when viewed as failed.\n","sig":null,"attributes":[{"value":"unstable(feature = \"try_trait\", issue = \"42327\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":669143,"byte_end":669194,"line_start":36,"line_end":36,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1024},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":669875,"byte_end":669886,"line_start":49,"line_end":49,"column_start":8,"column_end":19},"name":"into_result","qualname":"::ops::try::Try::into_result","value":"fn (self) -> Result<Self::Ok, Self::Error>","parent":{"krate":0,"index":1021},"children":[],"decl_id":null,"docs":" A trait for customizing the behavior of the `?` operator.","sig":null,"attributes":[{"value":"unstable(feature = \"try_trait\", issue = \"42327\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":668287,"byte_end":668338,"line_start":17,"line_end":17,"column_start":1,"column_end":52}},{"value":"rustc_on_unimplemented(on(all(any(from_method = \"from_error\",\n                                    from_method = \"from_ok\"),\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be used in a function that returns `Result` (or another type that implements `{Try}`)\",\n                            label =\n                                \"cannot use the `?` operator in a function that returns `{Self}`\"),\n                         on(all(from_method = \"into_result\",\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be applied to values that implement `{Try}`\",\n                            label =\n                                \"the `?` operator cannot be applied to type `{Self}`\"))","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":668339,"byte_end":668941,"line_start":18,"line_end":30,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":1025},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":670136,"byte_end":670146,"line_start":54,"line_end":54,"column_start":8,"column_end":18},"name":"from_error","qualname":"::ops::try::Try::from_error","value":"fn (v: Self::Error) -> Self","parent":{"krate":0,"index":1021},"children":[],"decl_id":null,"docs":" A trait for customizing the behavior of the `?` operator.","sig":null,"attributes":[{"value":"unstable(feature = \"try_trait\", issue = \"42327\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":668287,"byte_end":668338,"line_start":17,"line_end":17,"column_start":1,"column_end":52}},{"value":"rustc_on_unimplemented(on(all(any(from_method = \"from_error\",\n                                    from_method = \"from_ok\"),\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be used in a function that returns `Result` (or another type that implements `{Try}`)\",\n                            label =\n                                \"cannot use the `?` operator in a function that returns `{Self}`\"),\n                         on(all(from_method = \"into_result\",\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be applied to values that implement `{Try}`\",\n                            label =\n                                \"the `?` operator cannot be applied to type `{Self}`\"))","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":668339,"byte_end":668941,"line_start":18,"line_end":30,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":670374,"byte_end":670381,"line_start":59,"line_end":59,"column_start":8,"column_end":15},"name":"from_ok","qualname":"::ops::try::Try::from_ok","value":"fn (v: Self::Ok) -> Self","parent":{"krate":0,"index":1021},"children":[],"decl_id":null,"docs":" A trait for customizing the behavior of the `?` operator.","sig":null,"attributes":[{"value":"unstable(feature = \"try_trait\", issue = \"42327\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":668287,"byte_end":668338,"line_start":17,"line_end":17,"column_start":1,"column_end":52}},{"value":"rustc_on_unimplemented(on(all(any(from_method = \"from_error\",\n                                    from_method = \"from_ok\"),\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be used in a function that returns `Result` (or another type that implements `{Try}`)\",\n                            label =\n                                \"cannot use the `?` operator in a function that returns `{Self}`\"),\n                         on(all(from_method = \"into_result\",\n                                from_desugaring = \"?\"),\n                            message =\n                                \"the `?` operator can only be applied to values that implement `{Try}`\",\n                            label =\n                                \"the `?` operator cannot be applied to type `{Self}`\"))","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,116,114,121,46,114,115],"byte_start":668339,"byte_end":668941,"line_start":18,"line_end":30,"column_start":1,"column_end":3}}]},{"kind":"Trait","id":{"krate":0,"index":1029},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,117,110,115,105,122,101,46,114,115],"byte_start":672733,"byte_end":672746,"line_start":46,"line_end":46,"column_start":11,"column_end":24},"name":"CoerceUnsized","qualname":"::ops::unsize::CoerceUnsized","value":"CoerceUnsized<T>","parent":null,"children":[],"decl_id":null,"docs":" Trait that indicates that this is a pointer or a wrapper for one,\n where unsizing can be performed on the pointee.","sig":null,"attributes":[{"value":"unstable(feature = \"coerce_unsized\", issue = \"27732\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,117,110,115,105,122,101,46,114,115],"byte_start":672639,"byte_end":672695,"line_start":44,"line_end":44,"column_start":1,"column_end":57}},{"value":"lang = \"coerce_unsized\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,117,110,115,105,122,101,46,114,115],"byte_start":672696,"byte_end":672722,"line_start":45,"line_end":45,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":1095},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cmp","qualname":"::cmp","value":"src/libcore/cmp.rs","parent":null,"children":[{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1100},{"krate":0,"index":1102},{"krate":0,"index":14384},{"krate":0,"index":14392},{"krate":0,"index":14391},{"krate":0,"index":14389},{"krate":0,"index":14387},{"krate":0,"index":14385},{"krate":0,"index":1103},{"krate":0,"index":14394},{"krate":0,"index":14399},{"krate":0,"index":14397},{"krate":0,"index":14395},{"krate":0,"index":1107},{"krate":0,"index":1113},{"krate":0,"index":1115},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1130},{"krate":0,"index":1131},{"krate":0,"index":1132}],"decl_id":null,"docs":" Functionality for ordering and comparison.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":675396,"byte_end":675442,"line_start":36,"line_end":36,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":1097},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":677985,"byte_end":677994,"line_start":110,"line_end":110,"column_start":11,"column_end":20},"name":"PartialEq","qualname":"::cmp::PartialEq","value":"PartialEq<Rhs: ?Sized = Self>","parent":null,"children":[{"krate":0,"index":1098},{"krate":0,"index":1099}],"decl_id":null,"docs":" Trait for equality comparisons which are [partial equivalence\n relations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).","sig":null,"attributes":[{"value":"lang = \"eq\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":677848,"byte_end":677862,"line_start":107,"line_end":107,"column_start":1,"column_end":15}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":677863,"byte_end":677908,"line_start":108,"line_end":108,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":677909,"byte_end":677974,"line_start":109,"line_end":109,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":678188,"byte_end":678190,"line_start":115,"line_end":115,"column_start":8,"column_end":10},"name":"eq","qualname":"::cmp::PartialEq::eq","value":"fn (&self, other: &Rhs) -> bool","parent":{"krate":0,"index":1097},"children":[],"decl_id":null,"docs":" Trait for equality comparisons which are [partial equivalence\n relations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).","sig":null,"attributes":[{"value":"lang = \"eq\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":677848,"byte_end":677862,"line_start":107,"line_end":107,"column_start":1,"column_end":15}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":677863,"byte_end":677908,"line_start":108,"line_end":108,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":677909,"byte_end":677974,"line_start":109,"line_end":109,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1099},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":678344,"byte_end":678346,"line_start":121,"line_end":121,"column_start":8,"column_end":10},"name":"ne","qualname":"::cmp::PartialEq::ne","value":"fn (&self, other: &Rhs) -> bool","parent":{"krate":0,"index":1097},"children":[],"decl_id":null,"docs":" Trait for equality comparisons which are [partial equivalence\n relations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).","sig":null,"attributes":[{"value":"lang = \"eq\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":677848,"byte_end":677862,"line_start":107,"line_end":107,"column_start":1,"column_end":15}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":677863,"byte_end":677908,"line_start":108,"line_end":108,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":677909,"byte_end":677974,"line_start":109,"line_end":109,"column_start":1,"column_end":66}}]},{"kind":"Trait","id":{"krate":0,"index":1100},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":679770,"byte_end":679772,"line_start":164,"line_end":164,"column_start":11,"column_end":13},"name":"Eq","qualname":"::cmp::Eq","value":"Eq:  PartialEq<Self>","parent":null,"children":[{"krate":0,"index":1101}],"decl_id":null,"docs":" Trait for equality comparisons which are [equivalence relations](\n https://en.wikipedia.org/wiki/Equivalence_relation).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":679714,"byte_end":679759,"line_start":163,"line_end":163,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1101},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":680209,"byte_end":680236,"line_start":175,"line_end":175,"column_start":8,"column_end":35},"name":"assert_receiver_is_total_eq","qualname":"::cmp::Eq::assert_receiver_is_total_eq","value":"fn (&self) -> ()","parent":{"krate":0,"index":1100},"children":[],"decl_id":null,"docs":" Trait for equality comparisons which are [equivalence relations](\n https://en.wikipedia.org/wiki/Equivalence_relation).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":679714,"byte_end":679759,"line_start":163,"line_end":163,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1102},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":680595,"byte_end":680610,"line_start":187,"line_end":187,"column_start":12,"column_end":27},"name":"AssertParamIsEq","qualname":"::cmp::AssertParamIsEq","value":"AssertParamIsEq {  }","parent":null,"children":[{"krate":0,"index":2147484277}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":680426,"byte_end":680465,"line_start":183,"line_end":183,"column_start":1,"column_end":40}},{"value":"unstable(feature = \"derive_eq\",\n           reason = \"deriving hack, should not be public\",\n           issue = \"0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":680466,"byte_end":680583,"line_start":184,"line_end":186,"column_start":1,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147492389},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":681254,"byte_end":681258,"line_start":210,"line_end":210,"column_start":5,"column_end":9},"name":"Less","qualname":"::cmp::Ordering::Less","value":"Ordering::Less","parent":{"krate":0,"index":14384},"children":[],"decl_id":null,"docs":" An ordering where a compared value is less [than another].\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":681204,"byte_end":681249,"line_start":209,"line_end":209,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147492391},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":681385,"byte_end":681390,"line_start":213,"line_end":213,"column_start":5,"column_end":10},"name":"Equal","qualname":"::cmp::Ordering::Equal","value":"Ordering::Equal","parent":{"krate":0,"index":14384},"children":[],"decl_id":null,"docs":" An ordering where a compared value is equal [to another].\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":681335,"byte_end":681380,"line_start":212,"line_end":212,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147492393},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":681520,"byte_end":681527,"line_start":216,"line_end":216,"column_start":5,"column_end":12},"name":"Greater","qualname":"::cmp::Ordering::Greater","value":"Ordering::Greater","parent":{"krate":0,"index":14384},"children":[],"decl_id":null,"docs":" An ordering where a compared value is greater [than another].\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":681470,"byte_end":681515,"line_start":215,"line_end":215,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":14384},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":681122,"byte_end":681130,"line_start":207,"line_end":207,"column_start":10,"column_end":18},"name":"Ordering","qualname":"::cmp::Ordering","value":"Ordering::{Less, Equal, Greater}","parent":null,"children":[{"krate":0,"index":2147492389},{"krate":0,"index":2147492391},{"krate":0,"index":2147492393}],"decl_id":null,"docs":" An `Ordering` is the result of a comparison between two values.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":681067,"byte_end":681112,"line_start":206,"line_end":206,"column_start":1,"column_end":46}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":681113,"byte_end":681534,"line_start":207,"line_end":217,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":682441,"byte_end":682448,"line_start":251,"line_end":251,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Ordering>::reverse","value":"fn (self) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1105},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":683547,"byte_end":683551,"line_start":287,"line_end":287,"column_start":12,"column_end":16},"name":"then","qualname":"<Ordering>::then","value":"fn (self, other: Ordering) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1106},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":684737,"byte_end":684746,"line_start":324,"line_end":324,"column_start":12,"column_end":21},"name":"then_with","qualname":"<Ordering>::then_with","value":"fn <F> (self, f: F) -> Ordering","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":14394},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":685373,"byte_end":685380,"line_start":348,"line_end":348,"column_start":12,"column_end":19},"name":"Reverse","qualname":"::cmp::Reverse","value":"","parent":null,"children":[],"decl_id":null,"docs":" A helper struct for reverse ordering.","sig":null,"attributes":[{"value":"stable(feature = \"reverse_cmp_key\", since = \"1.19.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":685305,"byte_end":685361,"line_start":347,"line_end":347,"column_start":1,"column_end":57}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":685362,"byte_end":685448,"line_start":348,"line_end":348,"column_start":1,"column_end":87}}]},{"kind":"Trait","id":{"krate":0,"index":1115},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":688056,"byte_end":688059,"line_start":431,"line_end":431,"column_start":11,"column_end":14},"name":"Ord","qualname":"::cmp::Ord","value":"Ord:  Eq + PartialOrd<Self>","parent":null,"children":[{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118}],"decl_id":null,"docs":" Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":688000,"byte_end":688045,"line_start":430,"line_end":430,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":688594,"byte_end":688597,"line_start":447,"line_end":447,"column_start":8,"column_end":11},"name":"cmp","qualname":"::cmp::Ord::cmp","value":"fn (&self, other: &Self) -> Ordering","parent":{"krate":0,"index":1115},"children":[],"decl_id":null,"docs":" Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":688000,"byte_end":688045,"line_start":430,"line_end":430,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1117},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":688969,"byte_end":688972,"line_start":460,"line_end":460,"column_start":8,"column_end":11},"name":"max","qualname":"::cmp::Ord::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":1115},"children":[],"decl_id":null,"docs":" Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":688000,"byte_end":688045,"line_start":430,"line_end":430,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":689415,"byte_end":689418,"line_start":476,"line_end":476,"column_start":8,"column_end":11},"name":"min","qualname":"::cmp::Ord::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":1115},"children":[],"decl_id":null,"docs":" Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":688000,"byte_end":688045,"line_start":430,"line_end":430,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":1124},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":693162,"byte_end":693172,"line_start":602,"line_end":602,"column_start":11,"column_end":21},"name":"PartialOrd","qualname":"::cmp::PartialOrd","value":"PartialOrd<Rhs: ?Sized = Self>:  PartialEq<Rhs>","parent":null,"children":[{"krate":0,"index":1125},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1128},{"krate":0,"index":1129}],"decl_id":null,"docs":" Trait for values that can be compared for a sort-order.","sig":null,"attributes":[{"value":"lang = \"ord\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":693024,"byte_end":693039,"line_start":599,"line_end":599,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":693040,"byte_end":693085,"line_start":600,"line_end":600,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":693086,"byte_end":693151,"line_start":601,"line_end":601,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1125},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":693941,"byte_end":693952,"line_start":628,"line_end":628,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"::cmp::PartialOrd::partial_cmp","value":"fn (&self, other: &Rhs) -> Option<Ordering>","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" Trait for values that can be compared for a sort-order.","sig":null,"attributes":[{"value":"lang = \"ord\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":693024,"byte_end":693039,"line_start":599,"line_end":599,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":693040,"byte_end":693085,"line_start":600,"line_end":600,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":693086,"byte_end":693151,"line_start":601,"line_end":601,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":694376,"byte_end":694378,"line_start":644,"line_end":644,"column_start":8,"column_end":10},"name":"lt","qualname":"::cmp::PartialOrd::lt","value":"fn (&self, other: &Rhs) -> bool","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" Trait for values that can be compared for a sort-order.","sig":null,"attributes":[{"value":"lang = \"ord\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":693024,"byte_end":693039,"line_start":599,"line_end":599,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":693040,"byte_end":693085,"line_start":600,"line_end":600,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":693086,"byte_end":693151,"line_start":601,"line_end":601,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1127},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":694925,"byte_end":694927,"line_start":666,"line_end":666,"column_start":8,"column_end":10},"name":"le","qualname":"::cmp::PartialOrd::le","value":"fn (&self, other: &Rhs) -> bool","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" Trait for values that can be compared for a sort-order.","sig":null,"attributes":[{"value":"lang = \"ord\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":693024,"byte_end":693039,"line_start":599,"line_end":599,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":693040,"byte_end":693085,"line_start":600,"line_end":600,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":693086,"byte_end":693151,"line_start":601,"line_end":601,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":695470,"byte_end":695472,"line_start":687,"line_end":687,"column_start":8,"column_end":10},"name":"gt","qualname":"::cmp::PartialOrd::gt","value":"fn (&self, other: &Rhs) -> bool","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" Trait for values that can be compared for a sort-order.","sig":null,"attributes":[{"value":"lang = \"ord\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":693024,"byte_end":693039,"line_start":599,"line_end":599,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":693040,"byte_end":693085,"line_start":600,"line_end":600,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":693086,"byte_end":693151,"line_start":601,"line_end":601,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1129},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":696025,"byte_end":696027,"line_start":709,"line_end":709,"column_start":8,"column_end":10},"name":"ge","qualname":"::cmp::PartialOrd::ge","value":"fn (&self, other: &Rhs) -> bool","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" Trait for values that can be compared for a sort-order.","sig":null,"attributes":[{"value":"lang = \"ord\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":693024,"byte_end":693039,"line_start":599,"line_end":599,"column_start":1,"column_end":16}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":693040,"byte_end":693085,"line_start":600,"line_end":600,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented = \"can\\'t compare `{Self}` with `{Rhs}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":693086,"byte_end":693151,"line_start":601,"line_end":601,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":1130},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":696566,"byte_end":696569,"line_start":733,"line_end":733,"column_start":8,"column_end":11},"name":"min","qualname":"::cmp::min","value":"fn <T> (v1: T, v2: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Compares and returns the minimum of two values.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":696503,"byte_end":696512,"line_start":731,"line_end":731,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":696513,"byte_end":696558,"line_start":732,"line_end":732,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1131},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":696994,"byte_end":696997,"line_start":753,"line_end":753,"column_start":8,"column_end":11},"name":"max","qualname":"::cmp::max","value":"fn <T> (v1: T, v2: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Compares and returns the maximum of two values.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":696931,"byte_end":696940,"line_start":751,"line_end":751,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":696941,"byte_end":696986,"line_start":752,"line_end":752,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":1190},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"clone","qualname":"::clone","value":"src/libcore/clone.rs","parent":null,"children":[{"krate":0,"index":1191},{"krate":0,"index":1194},{"krate":0,"index":1195}],"decl_id":null,"docs":" The `Clone` trait for types that cannot be 'implicitly copied'.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":706906,"byte_end":706952,"line_start":49,"line_end":49,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":1191},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":708615,"byte_end":708620,"line_start":92,"line_end":92,"column_start":11,"column_end":16},"name":"Clone","qualname":"::clone::Clone","value":"Clone:  Sized","parent":null,"children":[{"krate":0,"index":1192},{"krate":0,"index":1193}],"decl_id":null,"docs":" A common trait for the ability to explicitly duplicate an object.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":708541,"byte_end":708586,"line_start":90,"line_end":90,"column_start":1,"column_end":46}},{"value":"lang = \"clone\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":708587,"byte_end":708604,"line_start":91,"line_end":91,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":708890,"byte_end":708895,"line_start":103,"line_end":103,"column_start":8,"column_end":13},"name":"clone","qualname":"::clone::Clone::clone","value":"fn (&self) -> Self","parent":{"krate":0,"index":1191},"children":[],"decl_id":null,"docs":" A common trait for the ability to explicitly duplicate an object.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":708541,"byte_end":708586,"line_start":90,"line_end":90,"column_start":1,"column_end":46}},{"value":"lang = \"clone\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":708587,"byte_end":708604,"line_start":91,"line_end":91,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1193},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":709220,"byte_end":709230,"line_start":112,"line_end":112,"column_start":8,"column_end":18},"name":"clone_from","qualname":"::clone::Clone::clone_from","value":"fn (&mut self, source: &Self) -> ()","parent":{"krate":0,"index":1191},"children":[],"decl_id":null,"docs":" A common trait for the ability to explicitly duplicate an object.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":708541,"byte_end":708586,"line_start":90,"line_end":90,"column_start":1,"column_end":46}},{"value":"lang = \"clone\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":708587,"byte_end":708604,"line_start":91,"line_end":91,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1194},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":709676,"byte_end":709694,"line_start":126,"line_end":126,"column_start":12,"column_end":30},"name":"AssertParamIsClone","qualname":"::clone::AssertParamIsClone","value":"AssertParamIsClone {  }","parent":null,"children":[{"krate":0,"index":2147484317}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":709499,"byte_end":709538,"line_start":122,"line_end":122,"column_start":1,"column_end":40}},{"value":"unstable(feature = \"derive_clone_copy\",\n           reason = \"deriving hack, should not be public\",\n           issue = \"0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":709539,"byte_end":709664,"line_start":123,"line_end":125,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1195},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":709943,"byte_end":709960,"line_start":132,"line_end":132,"column_start":12,"column_end":29},"name":"AssertParamIsCopy","qualname":"::clone::AssertParamIsCopy","value":"AssertParamIsCopy {  }","parent":null,"children":[{"krate":0,"index":2147484319}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":709766,"byte_end":709805,"line_start":128,"line_end":128,"column_start":1,"column_end":40}},{"value":"unstable(feature = \"derive_clone_copy\",\n           reason = \"deriving hack, should not be public\",\n           issue = \"0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":709806,"byte_end":709931,"line_start":129,"line_end":131,"column_start":1,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":1196},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,100,101,102,97,117,108,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"default","qualname":"::default","value":"src/libcore/default.rs","parent":null,"children":[{"krate":0,"index":1197},{"krate":0,"index":1199},{"krate":0,"index":14581},{"krate":0,"index":14583},{"krate":0,"index":14585},{"krate":0,"index":14587},{"krate":0,"index":14589},{"krate":0,"index":14591},{"krate":0,"index":14593},{"krate":0,"index":14595},{"krate":0,"index":14597},{"krate":0,"index":14599},{"krate":0,"index":14601},{"krate":0,"index":14603},{"krate":0,"index":14605},{"krate":0,"index":14607},{"krate":0,"index":14609},{"krate":0,"index":14611},{"krate":0,"index":14613}],"decl_id":null,"docs":" The `Default` trait for types which may have meaningful default values.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,100,101,102,97,117,108,116,46,114,115],"byte_start":710561,"byte_end":710607,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":1197},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,100,101,102,97,117,108,116,46,114,115],"byte_start":712433,"byte_end":712440,"line_start":94,"line_end":94,"column_start":11,"column_end":18},"name":"Default","qualname":"::default::Default","value":"Default:  Sized","parent":null,"children":[{"krate":0,"index":1198}],"decl_id":null,"docs":" A trait for giving a type a useful default value.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,100,101,102,97,117,108,116,46,114,115],"byte_start":712377,"byte_end":712422,"line_start":93,"line_end":93,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,100,101,102,97,117,108,116,46,114,115],"byte_start":713249,"byte_end":713256,"line_start":125,"line_end":125,"column_start":8,"column_end":15},"name":"default","qualname":"::default::Default::default","value":"fn () -> Self","parent":{"krate":0,"index":1197},"children":[],"decl_id":null,"docs":" A trait for giving a type a useful default value.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,100,101,102,97,117,108,116,46,114,115],"byte_start":712377,"byte_end":712422,"line_start":93,"line_end":93,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":1200},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"convert","qualname":"::convert","value":"src/libcore/convert.rs","parent":null,"children":[{"krate":0,"index":1201},{"krate":0,"index":14615},{"krate":0,"index":14629},{"krate":0,"index":14628},{"krate":0,"index":14626},{"krate":0,"index":14624},{"krate":0,"index":14622},{"krate":0,"index":14620},{"krate":0,"index":14618},{"krate":0,"index":14616},{"krate":0,"index":1202},{"krate":0,"index":1204},{"krate":0,"index":1206},{"krate":0,"index":1208},{"krate":0,"index":1210},{"krate":0,"index":1212},{"krate":0,"index":1215},{"krate":0,"index":1218},{"krate":0,"index":1220},{"krate":0,"index":1222},{"krate":0,"index":1224},{"krate":0,"index":1226},{"krate":0,"index":1228},{"krate":0,"index":1231},{"krate":0,"index":1234},{"krate":0,"index":1236},{"krate":0,"index":1238}],"decl_id":null,"docs":" Traits for conversions between types.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":716765,"byte_end":716811,"line_start":49,"line_end":49,"column_start":1,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":14615},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":717332,"byte_end":717342,"line_start":61,"line_end":61,"column_start":10,"column_end":20},"name":"Infallible","qualname":"::convert::Infallible","value":"Infallible::{}","parent":null,"children":[],"decl_id":null,"docs":" A type used as the error type for implementations of fallible conversion\n traits in cases where conversions cannot actually fail.","sig":null,"attributes":[{"value":"unstable(feature = \"try_from\", issue = \"33417\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":717204,"byte_end":717254,"line_start":59,"line_end":59,"column_start":1,"column_end":51}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":717323,"byte_end":717345,"line_start":61,"line_end":61,"column_start":1,"column_end":23}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":717323,"byte_end":717345,"line_start":61,"line_end":61,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":1204},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":719405,"byte_end":719410,"line_start":125,"line_end":125,"column_start":11,"column_end":16},"name":"AsRef","qualname":"::convert::AsRef","value":"AsRef<T: ?Sized>","parent":null,"children":[{"krate":0,"index":1205}],"decl_id":null,"docs":" A cheap reference-to-reference conversion. Used to convert a value to a\n reference value within generic code.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":719349,"byte_end":719394,"line_start":124,"line_end":124,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1205},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":719514,"byte_end":719520,"line_start":128,"line_end":128,"column_start":8,"column_end":14},"name":"as_ref","qualname":"::convert::AsRef::as_ref","value":"fn (&self) -> &T","parent":{"krate":0,"index":1204},"children":[],"decl_id":null,"docs":" A cheap reference-to-reference conversion. Used to convert a value to a\n reference value within generic code.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":719349,"byte_end":719394,"line_start":124,"line_end":124,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":1206},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":720566,"byte_end":720571,"line_start":166,"line_end":166,"column_start":11,"column_end":16},"name":"AsMut","qualname":"::convert::AsMut","value":"AsMut<T: ?Sized>","parent":null,"children":[{"krate":0,"index":1207}],"decl_id":null,"docs":" A cheap, mutable reference-to-mutable reference conversion.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":720510,"byte_end":720555,"line_start":165,"line_end":165,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1207},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":720675,"byte_end":720681,"line_start":169,"line_end":169,"column_start":8,"column_end":14},"name":"as_mut","qualname":"::convert::AsMut::as_mut","value":"fn (&mut self) -> &mut T","parent":{"krate":0,"index":1206},"children":[],"decl_id":null,"docs":" A cheap, mutable reference-to-mutable reference conversion.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":720510,"byte_end":720555,"line_start":165,"line_end":165,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":1208},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":723045,"byte_end":723049,"line_start":244,"line_end":244,"column_start":11,"column_end":15},"name":"Into","qualname":"::convert::Into","value":"Into<T>:  Sized","parent":null,"children":[{"krate":0,"index":1209}],"decl_id":null,"docs":" A conversion that consumes `self`, which may or may not be expensive. The\n reciprocal of [`From`][From].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":722989,"byte_end":723034,"line_start":243,"line_end":243,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1209},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":723152,"byte_end":723156,"line_start":247,"line_end":247,"column_start":8,"column_end":12},"name":"into","qualname":"::convert::Into::into","value":"fn (self) -> T","parent":{"krate":0,"index":1208},"children":[],"decl_id":null,"docs":" A conversion that consumes `self`, which may or may not be expensive. The\n reciprocal of [`From`][From].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":722989,"byte_end":723034,"line_start":243,"line_end":243,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":1210},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":725648,"byte_end":725652,"line_start":327,"line_end":327,"column_start":11,"column_end":15},"name":"From","qualname":"::convert::From","value":"From<T>:  Sized","parent":null,"children":[{"krate":0,"index":1211}],"decl_id":null,"docs":" Simple and safe type conversions in to `Self`. It is the reciprocal of\n `Into`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":725592,"byte_end":725637,"line_start":326,"line_end":326,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1211},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":725755,"byte_end":725759,"line_start":330,"line_end":330,"column_start":8,"column_end":12},"name":"from","qualname":"::convert::From::from","value":"fn (_: T) -> Self","parent":{"krate":0,"index":1210},"children":[],"decl_id":null,"docs":" Simple and safe type conversions in to `Self`. It is the reciprocal of\n `Into`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":725592,"byte_end":725637,"line_start":326,"line_end":326,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":1212},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":726355,"byte_end":726362,"line_start":345,"line_end":345,"column_start":11,"column_end":18},"name":"TryInto","qualname":"::convert::TryInto","value":"TryInto<T>:  Sized","parent":null,"children":[{"krate":0,"index":1213},{"krate":0,"index":1214}],"decl_id":null,"docs":" An attempted conversion that consumes `self`, which may or may not be\n expensive.","sig":null,"attributes":[{"value":"unstable(feature = \"try_from\", issue = \"33417\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":726294,"byte_end":726344,"line_start":344,"line_end":344,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":1213},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":726446,"byte_end":726451,"line_start":347,"line_end":347,"column_start":10,"column_end":15},"name":"Error","qualname":"::convert::TryInto::Error","value":"type Error;","parent":{"krate":0,"index":1212},"children":[],"decl_id":null,"docs":" The type returned in the event of a conversion error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":726494,"byte_end":726502,"line_start":350,"line_end":350,"column_start":8,"column_end":16},"name":"try_into","qualname":"::convert::TryInto::try_into","value":"fn (self) -> Result<T, Self::Error>","parent":{"krate":0,"index":1212},"children":[],"decl_id":null,"docs":" An attempted conversion that consumes `self`, which may or may not be\n expensive.","sig":null,"attributes":[{"value":"unstable(feature = \"try_from\", issue = \"33417\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":726294,"byte_end":726344,"line_start":344,"line_end":344,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":1215},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":726650,"byte_end":726657,"line_start":355,"line_end":355,"column_start":11,"column_end":18},"name":"TryFrom","qualname":"::convert::TryFrom","value":"TryFrom<T>:  Sized","parent":null,"children":[{"krate":0,"index":1216},{"krate":0,"index":1217}],"decl_id":null,"docs":" Attempt to construct `Self` via a conversion.\n","sig":null,"attributes":[{"value":"unstable(feature = \"try_from\", issue = \"33417\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":726589,"byte_end":726639,"line_start":354,"line_end":354,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":1216},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":726741,"byte_end":726746,"line_start":357,"line_end":357,"column_start":10,"column_end":15},"name":"Error","qualname":"::convert::TryFrom::Error","value":"type Error;","parent":{"krate":0,"index":1215},"children":[],"decl_id":null,"docs":" The type returned in the event of a conversion error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1217},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":726789,"byte_end":726797,"line_start":360,"line_end":360,"column_start":8,"column_end":16},"name":"try_from","qualname":"::convert::TryFrom::try_from","value":"fn (value: T) -> Result<Self, Self::Error>","parent":{"krate":0,"index":1215},"children":[],"decl_id":null,"docs":" Attempt to construct `Self` via a conversion.\n","sig":null,"attributes":[{"value":"unstable(feature = \"try_from\", issue = \"33417\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":726589,"byte_end":726639,"line_start":354,"line_end":354,"column_start":1,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":1240},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"borrow","qualname":"::borrow","value":"src/libcore/borrow.rs","parent":null,"children":[{"krate":0,"index":1241},{"krate":0,"index":1243},{"krate":0,"index":1245},{"krate":0,"index":1247},{"krate":0,"index":1249},{"krate":0,"index":1251},{"krate":0,"index":1253}],"decl_id":null,"docs":" A module for working with borrowed data.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":730215,"byte_end":730261,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":1241},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":731315,"byte_end":731321,"line_start":36,"line_end":36,"column_start":11,"column_end":17},"name":"Borrow","qualname":"::borrow::Borrow","value":"Borrow<Borrowed: ?Sized>","parent":null,"children":[{"krate":0,"index":1242}],"decl_id":null,"docs":" A trait for borrowing data.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":731259,"byte_end":731304,"line_start":35,"line_end":35,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1242},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":731772,"byte_end":731778,"line_start":57,"line_end":57,"column_start":8,"column_end":14},"name":"borrow","qualname":"::borrow::Borrow::borrow","value":"fn (&self) -> &Borrowed","parent":{"krate":0,"index":1241},"children":[],"decl_id":null,"docs":" A trait for borrowing data.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":731259,"byte_end":731304,"line_start":35,"line_end":35,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":1243},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":731953,"byte_end":731962,"line_start":64,"line_end":64,"column_start":11,"column_end":20},"name":"BorrowMut","qualname":"::borrow::BorrowMut","value":"BorrowMut<Borrowed: ?Sized>:  Borrow<Borrowed>","parent":null,"children":[{"krate":0,"index":1244}],"decl_id":null,"docs":" A trait for mutably borrowing data.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":731897,"byte_end":731942,"line_start":63,"line_end":63,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1244},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":732388,"byte_end":732398,"line_start":81,"line_end":81,"column_start":8,"column_end":18},"name":"borrow_mut","qualname":"::borrow::BorrowMut::borrow_mut","value":"fn (&mut self) -> &mut Borrowed","parent":{"krate":0,"index":1243},"children":[],"decl_id":null,"docs":" A trait for mutably borrowing data.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":731897,"byte_end":731942,"line_start":63,"line_end":63,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":1255},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"any","qualname":"::any","value":"src/libcore/any.rs","parent":null,"children":[{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1258},{"krate":0,"index":1260},{"krate":0,"index":1262},{"krate":0,"index":1264},{"krate":0,"index":1266},{"krate":0,"index":1270},{"krate":0,"index":14631},{"krate":0,"index":14650},{"krate":0,"index":14649},{"krate":0,"index":14646},{"krate":0,"index":14644},{"krate":0,"index":14638},{"krate":0,"index":14636},{"krate":0,"index":14634},{"krate":0,"index":14632},{"krate":0,"index":1274}],"decl_id":null,"docs":" This module implements the `Any` trait, which enables dynamic typing\n of any `'static` type through runtime reflection.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":735954,"byte_end":736000,"line_start":72,"line_end":72,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":1258},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":736491,"byte_end":736494,"line_start":88,"line_end":88,"column_start":11,"column_end":14},"name":"Any","qualname":"::any::Any","value":"Any:  'static","parent":null,"children":[{"krate":0,"index":1259}],"decl_id":null,"docs":" A type to emulate dynamic typing.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":736435,"byte_end":736480,"line_start":87,"line_end":87,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1259},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":737115,"byte_end":737126,"line_start":110,"line_end":110,"column_start":8,"column_end":19},"name":"get_type_id","qualname":"::any::Any::get_type_id","value":"fn (&self) -> TypeId","parent":{"krate":0,"index":1258},"children":[],"decl_id":null,"docs":" A type to emulate dynamic typing.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":736435,"byte_end":736480,"line_start":87,"line_end":87,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1267},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":738559,"byte_end":738561,"line_start":162,"line_end":162,"column_start":12,"column_end":14},"name":"is","qualname":"< Any>::is","value":"fn <T> (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1268},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":739526,"byte_end":739538,"line_start":196,"line_end":196,"column_start":12,"column_end":24},"name":"downcast_ref","qualname":"< Any>::downcast_ref","value":"fn <T> (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1269},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":740443,"byte_end":740455,"line_start":233,"line_end":233,"column_start":12,"column_end":24},"name":"downcast_mut","qualname":"< Any>::downcast_mut","value":"fn <T> (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1271},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":741239,"byte_end":741241,"line_start":267,"line_end":267,"column_start":12,"column_end":14},"name":"is","qualname":"< Any + Send>::is","value":"fn <T> (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1272},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":741934,"byte_end":741946,"line_start":293,"line_end":293,"column_start":12,"column_end":24},"name":"downcast_ref","qualname":"< Any + Send>::downcast_ref","value":"fn <T> (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1273},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":742679,"byte_end":742691,"line_start":323,"line_end":323,"column_start":12,"column_end":24},"name":"downcast_mut","qualname":"< Any + Send>::downcast_mut","value":"fn <T> (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":14631},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":743683,"byte_end":743689,"line_start":347,"line_end":347,"column_start":12,"column_end":18},"name":"TypeId","qualname":"::any::TypeId","value":"TypeId {  }","parent":null,"children":[{"krate":0,"index":2147492403}],"decl_id":null,"docs":" A `TypeId` represents a globally unique identifier for a type.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":743626,"byte_end":743671,"line_start":346,"line_end":346,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":743672,"byte_end":743705,"line_start":347,"line_end":349,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":743672,"byte_end":743705,"line_start":347,"line_end":349,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1275},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":744263,"byte_end":744265,"line_start":370,"line_end":370,"column_start":12,"column_end":14},"name":"of","qualname":"<TypeId>::of","value":"fn <T> () -> TypeId","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1276},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"array","qualname":"::array","value":"src/libcore/array.rs","parent":null,"children":[{"krate":0,"index":1279},{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1284},{"krate":0,"index":1285},{"krate":0,"index":1288},{"krate":0,"index":1289},{"krate":0,"index":1292},{"krate":0,"index":1295},{"krate":0,"index":1296},{"krate":0,"index":1297},{"krate":0,"index":14652},{"krate":0,"index":14654},{"krate":0,"index":14656},{"krate":0,"index":14658},{"krate":0,"index":14660},{"krate":0,"index":14662},{"krate":0,"index":14664},{"krate":0,"index":14668},{"krate":0,"index":15609},{"krate":0,"index":15615},{"krate":0,"index":15612},{"krate":0,"index":15621},{"krate":0,"index":15618},{"krate":0,"index":15627},{"krate":0,"index":15624},{"krate":0,"index":14672},{"krate":0,"index":14673},{"krate":0,"index":14679},{"krate":0,"index":14681},{"krate":0,"index":14683},{"krate":0,"index":14685},{"krate":0,"index":14687},{"krate":0,"index":14689},{"krate":0,"index":14691},{"krate":0,"index":14693},{"krate":0,"index":14697},{"krate":0,"index":15630},{"krate":0,"index":15636},{"krate":0,"index":15633},{"krate":0,"index":15642},{"krate":0,"index":15639},{"krate":0,"index":15648},{"krate":0,"index":15645},{"krate":0,"index":14701},{"krate":0,"index":14702},{"krate":0,"index":14708},{"krate":0,"index":14710},{"krate":0,"index":14712},{"krate":0,"index":14714},{"krate":0,"index":14716},{"krate":0,"index":14718},{"krate":0,"index":14720},{"krate":0,"index":14722},{"krate":0,"index":14726},{"krate":0,"index":15651},{"krate":0,"index":15657},{"krate":0,"index":15654},{"krate":0,"index":15663},{"krate":0,"index":15660},{"krate":0,"index":15669},{"krate":0,"index":15666},{"krate":0,"index":14730},{"krate":0,"index":14731},{"krate":0,"index":14737},{"krate":0,"index":14739},{"krate":0,"index":14741},{"krate":0,"index":14743},{"krate":0,"index":14745},{"krate":0,"index":14747},{"krate":0,"index":14749},{"krate":0,"index":14751},{"krate":0,"index":14755},{"krate":0,"index":15672},{"krate":0,"index":15678},{"krate":0,"index":15675},{"krate":0,"index":15684},{"krate":0,"index":15681},{"krate":0,"index":15690},{"krate":0,"index":15687},{"krate":0,"index":14759},{"krate":0,"index":14760},{"krate":0,"index":14766},{"krate":0,"index":14768},{"krate":0,"index":14770},{"krate":0,"index":14772},{"krate":0,"index":14774},{"krate":0,"index":14776},{"krate":0,"index":14778},{"krate":0,"index":14780},{"krate":0,"index":14784},{"krate":0,"index":15693},{"krate":0,"index":15699},{"krate":0,"index":15696},{"krate":0,"index":15705},{"krate":0,"index":15702},{"krate":0,"index":15711},{"krate":0,"index":15708},{"krate":0,"index":14788},{"krate":0,"index":14789},{"krate":0,"index":14795},{"krate":0,"index":14797},{"krate":0,"index":14799},{"krate":0,"index":14801},{"krate":0,"index":14803},{"krate":0,"index":14805},{"krate":0,"index":14807},{"krate":0,"index":14809},{"krate":0,"index":14813},{"krate":0,"index":15714},{"krate":0,"index":15720},{"krate":0,"index":15717},{"krate":0,"index":15726},{"krate":0,"index":15723},{"krate":0,"index":15732},{"krate":0,"index":15729},{"krate":0,"index":14817},{"krate":0,"index":14818},{"krate":0,"index":14824},{"krate":0,"index":14826},{"krate":0,"index":14828},{"krate":0,"index":14830},{"krate":0,"index":14832},{"krate":0,"index":14834},{"krate":0,"index":14836},{"krate":0,"index":14838},{"krate":0,"index":14842},{"krate":0,"index":15735},{"krate":0,"index":15741},{"krate":0,"index":15738},{"krate":0,"index":15747},{"krate":0,"index":15744},{"krate":0,"index":15753},{"krate":0,"index":15750},{"krate":0,"index":14846},{"krate":0,"index":14847},{"krate":0,"index":14853},{"krate":0,"index":14855},{"krate":0,"index":14857},{"krate":0,"index":14859},{"krate":0,"index":14861},{"krate":0,"index":14863},{"krate":0,"index":14865},{"krate":0,"index":14867},{"krate":0,"index":14871},{"krate":0,"index":15756},{"krate":0,"index":15762},{"krate":0,"index":15759},{"krate":0,"index":15768},{"krate":0,"index":15765},{"krate":0,"index":15774},{"krate":0,"index":15771},{"krate":0,"index":14875},{"krate":0,"index":14876},{"krate":0,"index":14882},{"krate":0,"index":14884},{"krate":0,"index":14886},{"krate":0,"index":14888},{"krate":0,"index":14890},{"krate":0,"index":14892},{"krate":0,"index":14894},{"krate":0,"index":14896},{"krate":0,"index":14900},{"krate":0,"index":15777},{"krate":0,"index":15783},{"krate":0,"index":15780},{"krate":0,"index":15789},{"krate":0,"index":15786},{"krate":0,"index":15795},{"krate":0,"index":15792},{"krate":0,"index":14904},{"krate":0,"index":14905},{"krate":0,"index":14911},{"krate":0,"index":14913},{"krate":0,"index":14915},{"krate":0,"index":14917},{"krate":0,"index":14919},{"krate":0,"index":14921},{"krate":0,"index":14923},{"krate":0,"index":14925},{"krate":0,"index":14929},{"krate":0,"index":15798},{"krate":0,"index":15804},{"krate":0,"index":15801},{"krate":0,"index":15810},{"krate":0,"index":15807},{"krate":0,"index":15816},{"krate":0,"index":15813},{"krate":0,"index":14933},{"krate":0,"index":14934},{"krate":0,"index":14940},{"krate":0,"index":14942},{"krate":0,"index":14944},{"krate":0,"index":14946},{"krate":0,"index":14948},{"krate":0,"index":14950},{"krate":0,"index":14952},{"krate":0,"index":14954},{"krate":0,"index":14958},{"krate":0,"index":15819},{"krate":0,"index":15825},{"krate":0,"index":15822},{"krate":0,"index":15831},{"krate":0,"index":15828},{"krate":0,"index":15837},{"krate":0,"index":15834},{"krate":0,"index":14962},{"krate":0,"index":14963},{"krate":0,"index":14969},{"krate":0,"index":14971},{"krate":0,"index":14973},{"krate":0,"index":14975},{"krate":0,"index":14977},{"krate":0,"index":14979},{"krate":0,"index":14981},{"krate":0,"index":14983},{"krate":0,"index":14987},{"krate":0,"index":15840},{"krate":0,"index":15846},{"krate":0,"index":15843},{"krate":0,"index":15852},{"krate":0,"index":15849},{"krate":0,"index":15858},{"krate":0,"index":15855},{"krate":0,"index":14991},{"krate":0,"index":14992},{"krate":0,"index":14998},{"krate":0,"index":15000},{"krate":0,"index":15002},{"krate":0,"index":15004},{"krate":0,"index":15006},{"krate":0,"index":15008},{"krate":0,"index":15010},{"krate":0,"index":15012},{"krate":0,"index":15016},{"krate":0,"index":15861},{"krate":0,"index":15867},{"krate":0,"index":15864},{"krate":0,"index":15873},{"krate":0,"index":15870},{"krate":0,"index":15879},{"krate":0,"index":15876},{"krate":0,"index":15020},{"krate":0,"index":15021},{"krate":0,"index":15027},{"krate":0,"index":15029},{"krate":0,"index":15031},{"krate":0,"index":15033},{"krate":0,"index":15035},{"krate":0,"index":15037},{"krate":0,"index":15039},{"krate":0,"index":15041},{"krate":0,"index":15045},{"krate":0,"index":15882},{"krate":0,"index":15888},{"krate":0,"index":15885},{"krate":0,"index":15894},{"krate":0,"index":15891},{"krate":0,"index":15900},{"krate":0,"index":15897},{"krate":0,"index":15049},{"krate":0,"index":15050},{"krate":0,"index":15056},{"krate":0,"index":15058},{"krate":0,"index":15060},{"krate":0,"index":15062},{"krate":0,"index":15064},{"krate":0,"index":15066},{"krate":0,"index":15068},{"krate":0,"index":15070},{"krate":0,"index":15074},{"krate":0,"index":15903},{"krate":0,"index":15909},{"krate":0,"index":15906},{"krate":0,"index":15915},{"krate":0,"index":15912},{"krate":0,"index":15921},{"krate":0,"index":15918},{"krate":0,"index":15078},{"krate":0,"index":15079},{"krate":0,"index":15085},{"krate":0,"index":15087},{"krate":0,"index":15089},{"krate":0,"index":15091},{"krate":0,"index":15093},{"krate":0,"index":15095},{"krate":0,"index":15097},{"krate":0,"index":15099},{"krate":0,"index":15103},{"krate":0,"index":15924},{"krate":0,"index":15930},{"krate":0,"index":15927},{"krate":0,"index":15936},{"krate":0,"index":15933},{"krate":0,"index":15942},{"krate":0,"index":15939},{"krate":0,"index":15107},{"krate":0,"index":15108},{"krate":0,"index":15114},{"krate":0,"index":15116},{"krate":0,"index":15118},{"krate":0,"index":15120},{"krate":0,"index":15122},{"krate":0,"index":15124},{"krate":0,"index":15126},{"krate":0,"index":15128},{"krate":0,"index":15132},{"krate":0,"index":15945},{"krate":0,"index":15951},{"krate":0,"index":15948},{"krate":0,"index":15957},{"krate":0,"index":15954},{"krate":0,"index":15963},{"krate":0,"index":15960},{"krate":0,"index":15136},{"krate":0,"index":15137},{"krate":0,"index":15143},{"krate":0,"index":15145},{"krate":0,"index":15147},{"krate":0,"index":15149},{"krate":0,"index":15151},{"krate":0,"index":15153},{"krate":0,"index":15155},{"krate":0,"index":15157},{"krate":0,"index":15161},{"krate":0,"index":15966},{"krate":0,"index":15972},{"krate":0,"index":15969},{"krate":0,"index":15978},{"krate":0,"index":15975},{"krate":0,"index":15984},{"krate":0,"index":15981},{"krate":0,"index":15165},{"krate":0,"index":15166},{"krate":0,"index":15172},{"krate":0,"index":15174},{"krate":0,"index":15176},{"krate":0,"index":15178},{"krate":0,"index":15180},{"krate":0,"index":15182},{"krate":0,"index":15184},{"krate":0,"index":15186},{"krate":0,"index":15190},{"krate":0,"index":15987},{"krate":0,"index":15993},{"krate":0,"index":15990},{"krate":0,"index":15999},{"krate":0,"index":15996},{"krate":0,"index":16005},{"krate":0,"index":16002},{"krate":0,"index":15194},{"krate":0,"index":15195},{"krate":0,"index":15201},{"krate":0,"index":15203},{"krate":0,"index":15205},{"krate":0,"index":15207},{"krate":0,"index":15209},{"krate":0,"index":15211},{"krate":0,"index":15213},{"krate":0,"index":15215},{"krate":0,"index":15219},{"krate":0,"index":16008},{"krate":0,"index":16014},{"krate":0,"index":16011},{"krate":0,"index":16020},{"krate":0,"index":16017},{"krate":0,"index":16026},{"krate":0,"index":16023},{"krate":0,"index":15223},{"krate":0,"index":15224},{"krate":0,"index":15230},{"krate":0,"index":15232},{"krate":0,"index":15234},{"krate":0,"index":15236},{"krate":0,"index":15238},{"krate":0,"index":15240},{"krate":0,"index":15242},{"krate":0,"index":15244},{"krate":0,"index":15248},{"krate":0,"index":16029},{"krate":0,"index":16035},{"krate":0,"index":16032},{"krate":0,"index":16041},{"krate":0,"index":16038},{"krate":0,"index":16047},{"krate":0,"index":16044},{"krate":0,"index":15252},{"krate":0,"index":15253},{"krate":0,"index":15259},{"krate":0,"index":15261},{"krate":0,"index":15263},{"krate":0,"index":15265},{"krate":0,"index":15267},{"krate":0,"index":15269},{"krate":0,"index":15271},{"krate":0,"index":15273},{"krate":0,"index":15277},{"krate":0,"index":16050},{"krate":0,"index":16056},{"krate":0,"index":16053},{"krate":0,"index":16062},{"krate":0,"index":16059},{"krate":0,"index":16068},{"krate":0,"index":16065},{"krate":0,"index":15281},{"krate":0,"index":15282},{"krate":0,"index":15288},{"krate":0,"index":15290},{"krate":0,"index":15292},{"krate":0,"index":15294},{"krate":0,"index":15296},{"krate":0,"index":15298},{"krate":0,"index":15300},{"krate":0,"index":15302},{"krate":0,"index":15306},{"krate":0,"index":16071},{"krate":0,"index":16077},{"krate":0,"index":16074},{"krate":0,"index":16083},{"krate":0,"index":16080},{"krate":0,"index":16089},{"krate":0,"index":16086},{"krate":0,"index":15310},{"krate":0,"index":15311},{"krate":0,"index":15317},{"krate":0,"index":15319},{"krate":0,"index":15321},{"krate":0,"index":15323},{"krate":0,"index":15325},{"krate":0,"index":15327},{"krate":0,"index":15329},{"krate":0,"index":15331},{"krate":0,"index":15335},{"krate":0,"index":16092},{"krate":0,"index":16098},{"krate":0,"index":16095},{"krate":0,"index":16104},{"krate":0,"index":16101},{"krate":0,"index":16110},{"krate":0,"index":16107},{"krate":0,"index":15339},{"krate":0,"index":15340},{"krate":0,"index":15346},{"krate":0,"index":15348},{"krate":0,"index":15350},{"krate":0,"index":15352},{"krate":0,"index":15354},{"krate":0,"index":15356},{"krate":0,"index":15358},{"krate":0,"index":15360},{"krate":0,"index":15364},{"krate":0,"index":16113},{"krate":0,"index":16119},{"krate":0,"index":16116},{"krate":0,"index":16125},{"krate":0,"index":16122},{"krate":0,"index":16131},{"krate":0,"index":16128},{"krate":0,"index":15368},{"krate":0,"index":15369},{"krate":0,"index":15375},{"krate":0,"index":15377},{"krate":0,"index":15379},{"krate":0,"index":15381},{"krate":0,"index":15383},{"krate":0,"index":15385},{"krate":0,"index":15387},{"krate":0,"index":15389},{"krate":0,"index":15393},{"krate":0,"index":16134},{"krate":0,"index":16140},{"krate":0,"index":16137},{"krate":0,"index":16146},{"krate":0,"index":16143},{"krate":0,"index":16152},{"krate":0,"index":16149},{"krate":0,"index":15397},{"krate":0,"index":15398},{"krate":0,"index":15404},{"krate":0,"index":15406},{"krate":0,"index":15408},{"krate":0,"index":15410},{"krate":0,"index":15412},{"krate":0,"index":15414},{"krate":0,"index":15416},{"krate":0,"index":15418},{"krate":0,"index":15422},{"krate":0,"index":16155},{"krate":0,"index":16161},{"krate":0,"index":16158},{"krate":0,"index":16167},{"krate":0,"index":16164},{"krate":0,"index":16173},{"krate":0,"index":16170},{"krate":0,"index":15426},{"krate":0,"index":15427},{"krate":0,"index":15433},{"krate":0,"index":15435},{"krate":0,"index":15437},{"krate":0,"index":15439},{"krate":0,"index":15441},{"krate":0,"index":15443},{"krate":0,"index":15445},{"krate":0,"index":15447},{"krate":0,"index":15451},{"krate":0,"index":16176},{"krate":0,"index":16182},{"krate":0,"index":16179},{"krate":0,"index":16188},{"krate":0,"index":16185},{"krate":0,"index":16194},{"krate":0,"index":16191},{"krate":0,"index":15455},{"krate":0,"index":15456},{"krate":0,"index":15462},{"krate":0,"index":15464},{"krate":0,"index":15466},{"krate":0,"index":15468},{"krate":0,"index":15470},{"krate":0,"index":15472},{"krate":0,"index":15474},{"krate":0,"index":15476},{"krate":0,"index":15480},{"krate":0,"index":16197},{"krate":0,"index":16203},{"krate":0,"index":16200},{"krate":0,"index":16209},{"krate":0,"index":16206},{"krate":0,"index":16215},{"krate":0,"index":16212},{"krate":0,"index":15484},{"krate":0,"index":15485},{"krate":0,"index":15491},{"krate":0,"index":15493},{"krate":0,"index":15495},{"krate":0,"index":15497},{"krate":0,"index":15499},{"krate":0,"index":15501},{"krate":0,"index":15503},{"krate":0,"index":15505},{"krate":0,"index":15509},{"krate":0,"index":16218},{"krate":0,"index":16224},{"krate":0,"index":16221},{"krate":0,"index":16230},{"krate":0,"index":16227},{"krate":0,"index":16236},{"krate":0,"index":16233},{"krate":0,"index":15513},{"krate":0,"index":15514},{"krate":0,"index":15520},{"krate":0,"index":15522},{"krate":0,"index":15524},{"krate":0,"index":15526},{"krate":0,"index":15528},{"krate":0,"index":15530},{"krate":0,"index":15532},{"krate":0,"index":15534},{"krate":0,"index":15538},{"krate":0,"index":16239},{"krate":0,"index":16245},{"krate":0,"index":16242},{"krate":0,"index":16251},{"krate":0,"index":16248},{"krate":0,"index":16257},{"krate":0,"index":16254},{"krate":0,"index":15542},{"krate":0,"index":15543},{"krate":0,"index":15549},{"krate":0,"index":15551},{"krate":0,"index":15553},{"krate":0,"index":15555},{"krate":0,"index":15557},{"krate":0,"index":15559},{"krate":0,"index":15561},{"krate":0,"index":15563},{"krate":0,"index":15567},{"krate":0,"index":16260},{"krate":0,"index":16266},{"krate":0,"index":16263},{"krate":0,"index":16272},{"krate":0,"index":16269},{"krate":0,"index":16278},{"krate":0,"index":16275},{"krate":0,"index":15571},{"krate":0,"index":15572},{"krate":0,"index":15578},{"krate":0,"index":15580},{"krate":0,"index":15582},{"krate":0,"index":15584},{"krate":0,"index":15586},{"krate":0,"index":15588},{"krate":0,"index":15590},{"krate":0,"index":15592},{"krate":0,"index":15596},{"krate":0,"index":16281},{"krate":0,"index":16287},{"krate":0,"index":16284},{"krate":0,"index":16293},{"krate":0,"index":16290},{"krate":0,"index":16299},{"krate":0,"index":16296},{"krate":0,"index":15600},{"krate":0,"index":15601},{"krate":0,"index":15607},{"krate":0,"index":1298},{"krate":0,"index":16302},{"krate":0,"index":16304},{"krate":0,"index":16306},{"krate":0,"index":16308},{"krate":0,"index":16310},{"krate":0,"index":16312},{"krate":0,"index":16314},{"krate":0,"index":16316},{"krate":0,"index":16318},{"krate":0,"index":16320},{"krate":0,"index":16322},{"krate":0,"index":16324},{"krate":0,"index":16326},{"krate":0,"index":16328},{"krate":0,"index":16330},{"krate":0,"index":16332},{"krate":0,"index":16334},{"krate":0,"index":16336},{"krate":0,"index":16338},{"krate":0,"index":16340},{"krate":0,"index":16342},{"krate":0,"index":16344},{"krate":0,"index":16346},{"krate":0,"index":16348},{"krate":0,"index":16350},{"krate":0,"index":16352},{"krate":0,"index":16354},{"krate":0,"index":16356},{"krate":0,"index":16358},{"krate":0,"index":16360},{"krate":0,"index":16362},{"krate":0,"index":16364},{"krate":0,"index":16366}],"decl_id":null,"docs":" Implementations of things like `Eq` for fixed-length arrays\n up to a certain length. Eventually we should able to generalize\n to all lengths.","sig":null,"attributes":[{"value":"unstable(feature = \"fixed_size_array\",\n           reason =\n               \"traits and impls are better expressed through generic integer constants\",\n           issue = \"27778\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":745090,"byte_end":745281,"line_start":17,"line_end":20,"column_start":1,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":1289},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":746030,"byte_end":746044,"line_start":42,"line_end":42,"column_start":18,"column_end":32},"name":"FixedSizeArray","qualname":"::array::FixedSizeArray","value":"FixedSizeArray<T>","parent":null,"children":[{"krate":0,"index":1290},{"krate":0,"index":1291}],"decl_id":null,"docs":" Utility trait implemented only on arrays of fixed size","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":746103,"byte_end":746111,"line_start":44,"line_end":44,"column_start":8,"column_end":16},"name":"as_slice","qualname":"::array::FixedSizeArray::as_slice","value":"fn (&self) -> &[T]","parent":{"krate":0,"index":1289},"children":[],"decl_id":null,"docs":" Utility trait implemented only on arrays of fixed size","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1291},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":746179,"byte_end":746191,"line_start":46,"line_end":46,"column_start":8,"column_end":20},"name":"as_mut_slice","qualname":"::array::FixedSizeArray::as_mut_slice","value":"fn (&mut self) -> &mut [T]","parent":{"krate":0,"index":1289},"children":[],"decl_id":null,"docs":" Utility trait implemented only on arrays of fixed size","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1299},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sync","qualname":"::sync","value":"src/libcore/sync/mod.rs","parent":null,"children":[{"krate":0,"index":1300}],"decl_id":null,"docs":" Synchronization primitives\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,109,111,100,46,114,115],"byte_start":752835,"byte_end":752881,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":1300},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"atomic","qualname":"::sync::atomic","value":"src/libcore/sync/atomic.rs","parent":null,"children":[{"krate":0,"index":1301},{"krate":0,"index":1302},{"krate":0,"index":1303},{"krate":0,"index":1304},{"krate":0,"index":1305},{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311},{"krate":0,"index":1313},{"krate":0,"index":1314},{"krate":0,"index":16368},{"krate":0,"index":16373},{"krate":0,"index":16371},{"krate":0,"index":16369},{"krate":0,"index":1315},{"krate":0,"index":1316},{"krate":0,"index":1330},{"krate":0,"index":1340},{"krate":0,"index":16374},{"krate":0,"index":16375},{"krate":0,"index":16376},{"krate":0,"index":16378},{"krate":0,"index":16380},{"krate":0,"index":16381},{"krate":0,"index":16396},{"krate":0,"index":16397},{"krate":0,"index":16398},{"krate":0,"index":16400},{"krate":0,"index":16402},{"krate":0,"index":16403},{"krate":0,"index":16418},{"krate":0,"index":16419},{"krate":0,"index":16420},{"krate":0,"index":16422},{"krate":0,"index":16424},{"krate":0,"index":16425},{"krate":0,"index":16440},{"krate":0,"index":16441},{"krate":0,"index":16442},{"krate":0,"index":16444},{"krate":0,"index":16446},{"krate":0,"index":16447},{"krate":0,"index":16462},{"krate":0,"index":16463},{"krate":0,"index":16464},{"krate":0,"index":16466},{"krate":0,"index":16468},{"krate":0,"index":16469},{"krate":0,"index":16484},{"krate":0,"index":16485},{"krate":0,"index":16486},{"krate":0,"index":16488},{"krate":0,"index":16490},{"krate":0,"index":16491},{"krate":0,"index":16506},{"krate":0,"index":16507},{"krate":0,"index":16508},{"krate":0,"index":16510},{"krate":0,"index":16512},{"krate":0,"index":16513},{"krate":0,"index":16528},{"krate":0,"index":16529},{"krate":0,"index":16530},{"krate":0,"index":16532},{"krate":0,"index":16534},{"krate":0,"index":16535},{"krate":0,"index":16550},{"krate":0,"index":16551},{"krate":0,"index":16552},{"krate":0,"index":16554},{"krate":0,"index":16556},{"krate":0,"index":16557},{"krate":0,"index":16572},{"krate":0,"index":16573},{"krate":0,"index":16574},{"krate":0,"index":16576},{"krate":0,"index":16578},{"krate":0,"index":16579},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1356}],"decl_id":null,"docs":" Atomic types","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":756050,"byte_end":756096,"line_start":87,"line_end":87,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":1305},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":756769,"byte_end":756791,"line_start":107,"line_end":107,"column_start":8,"column_end":30},"name":"hint_core_should_pause","qualname":"::sync::atomic::hint_core_should_pause","value":"fn () -> ()","parent":null,"children":[],"decl_id":null,"docs":" Save power or switch hyperthreads in a busy-wait spin-loop.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":756687,"byte_end":756696,"line_start":105,"line_end":105,"column_start":1,"column_end":10}},{"value":"unstable(feature = \"hint_core_should_pause\", issue = \"41196\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":756697,"byte_end":756761,"line_start":106,"line_end":106,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":1306},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":757307,"byte_end":757317,"line_start":127,"line_end":127,"column_start":12,"column_end":22},"name":"AtomicBool","qualname":"::sync::atomic::AtomicBool","value":"AtomicBool {  }","parent":null,"children":[{"krate":0,"index":2147484366}],"decl_id":null,"docs":" A boolean type which can be safely shared between threads.","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":757218,"byte_end":757249,"line_start":125,"line_end":125,"column_start":1,"column_end":32}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":757250,"byte_end":757295,"line_start":126,"line_end":126,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1310},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":757964,"byte_end":757973,"line_start":150,"line_end":150,"column_start":12,"column_end":21},"name":"AtomicPtr","qualname":"::sync::atomic::AtomicPtr","value":"AtomicPtr {  }","parent":null,"children":[{"krate":0,"index":2147484367}],"decl_id":null,"docs":" A raw pointer type which can be safely shared between threads.","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":757873,"byte_end":757906,"line_start":148,"line_end":148,"column_start":1,"column_end":34}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":757907,"byte_end":757952,"line_start":149,"line_end":149,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147494979},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":759438,"byte_end":759445,"line_start":193,"line_end":193,"column_start":5,"column_end":12},"name":"Relaxed","qualname":"::sync::atomic::Ordering::Relaxed","value":"Ordering::Relaxed","parent":{"krate":0,"index":16368},"children":[],"decl_id":null,"docs":" No ordering constraints, only atomic operations.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":759388,"byte_end":759433,"line_start":192,"line_end":192,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147494980},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":759744,"byte_end":759751,"line_start":200,"line_end":200,"column_start":5,"column_end":12},"name":"Release","qualname":"::sync::atomic::Ordering::Release","value":"Ordering::Release","parent":{"krate":0,"index":16368},"children":[],"decl_id":null,"docs":" When coupled with a store, all previous writes become visible\n to the other threads that perform a load with [`Acquire`] ordering\n on the same value.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":759694,"byte_end":759739,"line_start":199,"line_end":199,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147494981},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760048,"byte_end":760055,"line_start":207,"line_end":207,"column_start":5,"column_end":12},"name":"Acquire","qualname":"::sync::atomic::Ordering::Acquire","value":"Ordering::Acquire","parent":{"krate":0,"index":16368},"children":[],"decl_id":null,"docs":" When coupled with a load, all subsequent loads will see data\n written before a store with [`Release`] ordering on the same value\n in other threads.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":759998,"byte_end":760043,"line_start":206,"line_end":206,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147494982},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760353,"byte_end":760359,"line_start":214,"line_end":214,"column_start":5,"column_end":11},"name":"AcqRel","qualname":"::sync::atomic::Ordering::AcqRel","value":"Ordering::AcqRel","parent":{"krate":0,"index":16368},"children":[],"decl_id":null,"docs":" When coupled with a load, uses [`Acquire`] ordering, and with a store\n [`Release`] ordering.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760303,"byte_end":760348,"line_start":213,"line_end":213,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147494983},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760554,"byte_end":760560,"line_start":218,"line_end":218,"column_start":5,"column_end":11},"name":"SeqCst","qualname":"::sync::atomic::Ordering::SeqCst","value":"Ordering::SeqCst","parent":{"krate":0,"index":16368},"children":[],"decl_id":null,"docs":" Like `AcqRel` with the additional guarantee that all threads see all\n sequentially consistent operations in the same order.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760504,"byte_end":760549,"line_start":217,"line_end":217,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147494984},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760716,"byte_end":760731,"line_start":222,"line_end":222,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::sync::atomic::Ordering::__Nonexhaustive","value":"Ordering::__Nonexhaustive","parent":{"krate":0,"index":16368},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"future_atomic_orderings\", issue = \"0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760650,"byte_end":760711,"line_start":221,"line_end":221,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":16368},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":759179,"byte_end":759187,"line_start":186,"line_end":186,"column_start":10,"column_end":18},"name":"Ordering","qualname":"::sync::atomic::Ordering","value":"Ordering::{Relaxed, Release, Acquire, AcqRel, SeqCst, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":2147494979},{"krate":0,"index":2147494980},{"krate":0,"index":2147494981},{"krate":0,"index":2147494982},{"krate":0,"index":2147494983},{"krate":0,"index":2147494984}],"decl_id":null,"docs":" Atomic memory orderings","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":759094,"byte_end":759139,"line_start":184,"line_end":184,"column_start":1,"column_end":46}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":759170,"byte_end":760734,"line_start":186,"line_end":223,"column_start":1,"column_end":2}}]},{"kind":"Const","id":{"krate":0,"index":1315},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760917,"byte_end":760933,"line_start":230,"line_end":230,"column_start":11,"column_end":27},"name":"ATOMIC_BOOL_INIT","qualname":"::sync::atomic::ATOMIC_BOOL_INIT","value":"AtomicBool","parent":null,"children":[],"decl_id":null,"docs":" An [`AtomicBool`] initialized to `false`.","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760829,"byte_end":760860,"line_start":228,"line_end":228,"column_start":1,"column_end":32}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760861,"byte_end":760906,"line_start":229,"line_end":229,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1317},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":761414,"byte_end":761417,"line_start":247,"line_end":247,"column_start":18,"column_end":21},"name":"new","qualname":"<AtomicBool>::new","value":"fn (v: bool) -> AtomicBool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760973,"byte_end":761004,"line_start":232,"line_end":232,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1318},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":762172,"byte_end":762179,"line_start":270,"line_end":270,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AtomicBool>::get_mut","value":"fn (&mut self) -> &mut bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760973,"byte_end":761004,"line_start":232,"line_end":232,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1319},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":762764,"byte_end":762774,"line_start":289,"line_end":289,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<AtomicBool>::into_inner","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760973,"byte_end":761004,"line_start":232,"line_end":232,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1320},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":763557,"byte_end":763561,"line_start":317,"line_end":317,"column_start":12,"column_end":16},"name":"load","qualname":"<AtomicBool>::load","value":"fn (&self, order: Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760973,"byte_end":761004,"line_start":232,"line_end":232,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1321},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":764437,"byte_end":764442,"line_start":347,"line_end":347,"column_start":12,"column_end":17},"name":"store","qualname":"<AtomicBool>::store","value":"fn (&self, val: bool, order: Ordering) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760973,"byte_end":761004,"line_start":232,"line_end":232,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1322},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":765188,"byte_end":765192,"line_start":372,"line_end":372,"column_start":12,"column_end":16},"name":"swap","qualname":"<AtomicBool>::swap","value":"fn (&self, val: bool, order: Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760973,"byte_end":761004,"line_start":232,"line_end":232,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":766329,"byte_end":766345,"line_start":402,"line_end":402,"column_start":12,"column_end":28},"name":"compare_and_swap","qualname":"<AtomicBool>::compare_and_swap","value":"fn (&self, current: bool, new: bool, order: Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760973,"byte_end":761004,"line_start":232,"line_end":232,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1324},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":768371,"byte_end":768387,"line_start":447,"line_end":447,"column_start":12,"column_end":28},"name":"compare_exchange","qualname":"<AtomicBool>::compare_exchange","value":"fn (&self, current: bool, new: bool, success: Ordering, failure: Ordering) -> Result<bool, bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760973,"byte_end":761004,"line_start":232,"line_end":232,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1325},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":770474,"byte_end":770495,"line_start":498,"line_end":498,"column_start":12,"column_end":33},"name":"compare_exchange_weak","qualname":"<AtomicBool>::compare_exchange_weak","value":"fn (&self, current: bool, new: bool, success: Ordering, failure: Ordering) -> Result<bool, bool>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760973,"byte_end":761004,"line_start":232,"line_end":232,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":771904,"byte_end":771913,"line_start":538,"line_end":538,"column_start":12,"column_end":21},"name":"fetch_and","qualname":"<AtomicBool>::fetch_and","value":"fn (&self, val: bool, order: Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760973,"byte_end":761004,"line_start":232,"line_end":232,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1327},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":773026,"byte_end":773036,"line_start":569,"line_end":569,"column_start":12,"column_end":22},"name":"fetch_nand","qualname":"<AtomicBool>::fetch_nand","value":"fn (&self, val: bool, order: Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760973,"byte_end":761004,"line_start":232,"line_end":232,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1328},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":774574,"byte_end":774582,"line_start":611,"line_end":611,"column_start":12,"column_end":20},"name":"fetch_or","qualname":"<AtomicBool>::fetch_or","value":"fn (&self, val: bool, order: Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760973,"byte_end":761004,"line_start":232,"line_end":232,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1329},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":775630,"byte_end":775639,"line_start":641,"line_end":641,"column_start":12,"column_end":21},"name":"fetch_xor","qualname":"<AtomicBool>::fetch_xor","value":"fn (&self, val: bool, order: Ordering) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"8\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":760973,"byte_end":761004,"line_start":232,"line_end":232,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1331},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":776178,"byte_end":776181,"line_start":661,"line_end":661,"column_start":18,"column_end":21},"name":"new","qualname":"<AtomicPtr<T>>::new","value":"fn (p: *mut T) -> AtomicPtr<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":775761,"byte_end":775794,"line_start":646,"line_end":646,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":776838,"byte_end":776845,"line_start":681,"line_end":681,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<AtomicPtr<T>>::get_mut","value":"fn (&mut self) -> &mut *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":775761,"byte_end":775794,"line_start":646,"line_end":646,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1333},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":777428,"byte_end":777438,"line_start":700,"line_end":700,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<AtomicPtr<T>>::into_inner","value":"fn (self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":775761,"byte_end":775794,"line_start":646,"line_end":646,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1334},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":778237,"byte_end":778241,"line_start":729,"line_end":729,"column_start":12,"column_end":16},"name":"load","qualname":"<AtomicPtr<T>>::load","value":"fn (&self, order: Ordering) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":775761,"byte_end":775794,"line_start":646,"line_end":646,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":779146,"byte_end":779151,"line_start":761,"line_end":761,"column_start":12,"column_end":17},"name":"store","qualname":"<AtomicPtr<T>>::store","value":"fn (&self, ptr: *mut T, order: Ordering) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":775761,"byte_end":775794,"line_start":646,"line_end":646,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":779918,"byte_end":779922,"line_start":788,"line_end":788,"column_start":12,"column_end":16},"name":"swap","qualname":"<AtomicPtr<T>>::swap","value":"fn (&self, ptr: *mut T, order: Ordering) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":775761,"byte_end":775794,"line_start":646,"line_end":646,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1337},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":780920,"byte_end":780936,"line_start":817,"line_end":817,"column_start":12,"column_end":28},"name":"compare_and_swap","qualname":"<AtomicPtr<T>>::compare_and_swap","value":"fn (&self, current: *mut T, new: *mut T, order: Ordering) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":775761,"byte_end":775794,"line_start":646,"line_end":646,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1338},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":782552,"byte_end":782568,"line_start":855,"line_end":855,"column_start":12,"column_end":28},"name":"compare_exchange","qualname":"<AtomicPtr<T>>::compare_exchange","value":"fn (&self, current: *mut T, new: *mut T, success: Ordering, failure: Ordering) -> Result<*mut T, *mut T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":775761,"byte_end":775794,"line_start":646,"line_end":646,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1339},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":784880,"byte_end":784901,"line_start":910,"line_end":910,"column_start":12,"column_end":33},"name":"compare_exchange_weak","qualname":"<AtomicPtr<T>>::compare_exchange_weak","value":"fn (&self, current: *mut T, new: *mut T, success: Ordering, failure: Ordering) -> Result<*mut T, *mut T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":775761,"byte_end":775794,"line_start":646,"line_end":646,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":1352},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":816986,"byte_end":816991,"line_start":1697,"line_end":1697,"column_start":8,"column_end":13},"name":"fence","qualname":"::sync::atomic::fence","value":"fn (order: Ordering) -> ()","parent":null,"children":[],"decl_id":null,"docs":" An atomic fence.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":816923,"byte_end":816932,"line_start":1695,"line_end":1695,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":816933,"byte_end":816978,"line_start":1696,"line_end":1696,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1353},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":820978,"byte_end":820992,"line_start":1787,"line_end":1787,"column_start":8,"column_end":22},"name":"compiler_fence","qualname":"::sync::atomic::compiler_fence","value":"fn (order: Ordering) -> ()","parent":null,"children":[],"decl_id":null,"docs":" A compiler memory fence.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":820904,"byte_end":820913,"line_start":1785,"line_end":1785,"column_start":1,"column_end":10}},{"value":"stable(feature = \"compiler_fences\", since = \"1.21.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":820914,"byte_end":820970,"line_start":1786,"line_end":1786,"column_start":1,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":1358},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cell","qualname":"::cell","value":"src/libcore/cell.rs","parent":null,"children":[{"krate":0,"index":1359},{"krate":0,"index":1363},{"krate":0,"index":1364},{"krate":0,"index":1365},{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1378},{"krate":0,"index":1380},{"krate":0,"index":1382},{"krate":0,"index":1383},{"krate":0,"index":1389},{"krate":0,"index":1391},{"krate":0,"index":1393},{"krate":0,"index":1401},{"krate":0,"index":1403},{"krate":0,"index":1404},{"krate":0,"index":1405},{"krate":0,"index":1406},{"krate":0,"index":1408},{"krate":0,"index":1410},{"krate":0,"index":1411},{"krate":0,"index":1413},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1418},{"krate":0,"index":1423},{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1432},{"krate":0,"index":1434},{"krate":0,"index":1436},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1445},{"krate":0,"index":1447},{"krate":0,"index":1449},{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":1453},{"krate":0,"index":1455},{"krate":0,"index":1457},{"krate":0,"index":1458},{"krate":0,"index":1461},{"krate":0,"index":1464},{"krate":0,"index":1465},{"krate":0,"index":1467},{"krate":0,"index":1469},{"krate":0,"index":1470},{"krate":0,"index":1472},{"krate":0,"index":1474},{"krate":0,"index":1475},{"krate":0,"index":1478},{"krate":0,"index":1480},{"krate":0,"index":1481},{"krate":0,"index":1483},{"krate":0,"index":1484},{"krate":0,"index":1485},{"krate":0,"index":1488},{"krate":0,"index":1490},{"krate":0,"index":1492},{"krate":0,"index":1494},{"krate":0,"index":1495}],"decl_id":null,"docs":" Shareable mutable containers.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":829401,"byte_end":829447,"line_start":180,"line_end":180,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1371},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":830479,"byte_end":830483,"line_start":221,"line_end":221,"column_start":12,"column_end":16},"name":"Cell","qualname":"::cell::Cell","value":"Cell {  }","parent":null,"children":[{"krate":0,"index":2147484384}],"decl_id":null,"docs":" A mutable memory location.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":830422,"byte_end":830467,"line_start":220,"line_end":220,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1373},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":830825,"byte_end":830828,"line_start":239,"line_end":239,"column_start":12,"column_end":15},"name":"get","qualname":"<Cell<T>>::get","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":833046,"byte_end":833049,"line_start":334,"line_end":334,"column_start":18,"column_end":21},"name":"new","qualname":"<Cell<T>>::new","value":"fn (value: T) -> Cell<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1395},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":833461,"byte_end":833467,"line_start":353,"line_end":353,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<Cell<T>>::as_ptr","value":"fn (&self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1396},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":833987,"byte_end":833994,"line_start":374,"line_end":374,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Cell<T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1397},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":834349,"byte_end":834352,"line_start":393,"line_end":393,"column_start":12,"column_end":15},"name":"set","qualname":"<Cell<T>>::set","value":"fn (&self, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":834903,"byte_end":834907,"line_start":414,"line_end":414,"column_start":12,"column_end":16},"name":"swap","qualname":"<Cell<T>>::swap","value":"fn (&self, other: &Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":835450,"byte_end":835457,"line_start":436,"line_end":436,"column_start":12,"column_end":19},"name":"replace","qualname":"<Cell<T>>::replace","value":"fn (&self, val: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":835839,"byte_end":835849,"line_start":453,"line_end":453,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Cell<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1402},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":836319,"byte_end":836323,"line_start":473,"line_end":473,"column_start":12,"column_end":16},"name":"take","qualname":"<Cell<T>>::take","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1404},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":836705,"byte_end":836712,"line_start":485,"line_end":485,"column_start":12,"column_end":19},"name":"RefCell","qualname":"::cell::RefCell","value":"RefCell {  }","parent":null,"children":[{"krate":0,"index":2147484400},{"krate":0,"index":2147484401}],"decl_id":null,"docs":" A mutable memory location with dynamically checked borrow rules","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":836648,"byte_end":836693,"line_start":484,"line_end":484,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1405},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":836937,"byte_end":836948,"line_start":492,"line_end":492,"column_start":12,"column_end":23},"name":"BorrowError","qualname":"::cell::BorrowError","value":"BorrowError {  }","parent":null,"children":[{"krate":0,"index":2147484403}],"decl_id":null,"docs":" An error returned by [`RefCell::try_borrow`](struct.RefCell.html#method.try_borrow).\n","sig":null,"attributes":[{"value":"stable(feature = \"try_borrow\", since = \"1.13.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":836874,"byte_end":836925,"line_start":491,"line_end":491,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":1410},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":837531,"byte_end":837545,"line_start":512,"line_end":512,"column_start":12,"column_end":26},"name":"BorrowMutError","qualname":"::cell::BorrowMutError","value":"BorrowMutError {  }","parent":null,"children":[{"krate":0,"index":2147484404}],"decl_id":null,"docs":" An error returned by [`RefCell::try_borrow_mut`](struct.RefCell.html#method.try_borrow_mut).\n","sig":null,"attributes":[{"value":"stable(feature = \"try_borrow\", since = \"1.13.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":837468,"byte_end":837519,"line_start":511,"line_end":511,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1419},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":838539,"byte_end":838542,"line_start":549,"line_end":549,"column_start":18,"column_end":21},"name":"new","qualname":"<RefCell<T>>::new","value":"fn (value: T) -> RefCell<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1420},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":838997,"byte_end":839007,"line_start":569,"line_end":569,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RefCell<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1421},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":840073,"byte_end":840080,"line_start":599,"line_end":599,"column_start":12,"column_end":19},"name":"replace","qualname":"<RefCell<T>>::replace","value":"fn (&self, t: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1422},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":840921,"byte_end":840925,"line_start":626,"line_end":626,"column_start":12,"column_end":16},"name":"swap","qualname":"<RefCell<T>>::swap","value":"fn (&self, other: &Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1424},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":842080,"byte_end":842086,"line_start":670,"line_end":670,"column_start":12,"column_end":18},"name":"borrow","qualname":"<RefCell<T>>::borrow","value":"fn (&self) -> Ref<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1425},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":842940,"byte_end":842950,"line_start":701,"line_end":701,"column_start":12,"column_end":22},"name":"try_borrow","qualname":"<RefCell<T>>::try_borrow","value":"fn (&self) -> Result<Ref<T>, BorrowError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1426},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":844250,"byte_end":844260,"line_start":750,"line_end":750,"column_start":12,"column_end":22},"name":"borrow_mut","qualname":"<RefCell<T>>::borrow_mut","value":"fn (&self) -> RefMut<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1427},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":845050,"byte_end":845064,"line_start":777,"line_end":777,"column_start":12,"column_end":26},"name":"try_borrow_mut","qualname":"<RefCell<T>>::try_borrow_mut","value":"fn (&self) -> Result<RefMut<T>, BorrowMutError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1428},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":845689,"byte_end":845695,"line_start":800,"line_end":800,"column_start":12,"column_end":18},"name":"as_ptr","qualname":"<RefCell<T>>::as_ptr","value":"fn (&self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1429},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":846672,"byte_end":846679,"line_start":830,"line_end":830,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RefCell<T>>::get_mut","value":"fn (&mut self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1457},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":850173,"byte_end":850176,"line_start":962,"line_end":962,"column_start":12,"column_end":15},"name":"Ref","qualname":"::cell::Ref","value":"Ref {  }","parent":null,"children":[{"krate":0,"index":2147484423},{"krate":0,"index":2147484424}],"decl_id":null,"docs":" Wraps a borrowed reference to a value in a `RefCell` box.\n A wrapper type for an immutably borrowed value from a `RefCell<T>`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":850116,"byte_end":850161,"line_start":961,"line_end":961,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1462},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":850904,"byte_end":850909,"line_start":988,"line_end":988,"column_start":12,"column_end":17},"name":"clone","qualname":"<Ref<'b, T>>::clone","value":"fn (orig: &Ref<'b, T>) -> Ref<'b, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1463},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":851755,"byte_end":851758,"line_start":1015,"line_end":1015,"column_start":12,"column_end":15},"name":"map","qualname":"<Ref<'b, T>>::map","value":"fn <U, F> (orig: Ref<'b, T>, f: F) -> Ref<'b, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1468},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":853213,"byte_end":853216,"line_start":1061,"line_end":1061,"column_start":12,"column_end":15},"name":"map","qualname":"<RefMut<'b, T>>::map","value":"fn <U, F> (orig: RefMut<'b, T>, f: F) -> RefMut<'b, U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1474},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":854196,"byte_end":854202,"line_start":1101,"line_end":1101,"column_start":12,"column_end":18},"name":"RefMut","qualname":"::cell::RefMut","value":"RefMut {  }","parent":null,"children":[{"krate":0,"index":2147484446},{"krate":0,"index":2147484447}],"decl_id":null,"docs":" A wrapper type for a mutably borrowed value from a `RefCell<T>`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":854139,"byte_end":854184,"line_start":1100,"line_end":1100,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1483},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":856857,"byte_end":856867,"line_start":1172,"line_end":1172,"column_start":12,"column_end":22},"name":"UnsafeCell","qualname":"::cell::UnsafeCell","value":"UnsafeCell {  }","parent":null,"children":[{"krate":0,"index":2147484459}],"decl_id":null,"docs":" The core primitive for interior mutability in Rust.","sig":null,"attributes":[{"value":"lang = \"unsafe_cell\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":856776,"byte_end":856799,"line_start":1170,"line_end":1170,"column_start":1,"column_end":24}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":856800,"byte_end":856845,"line_start":1171,"line_end":1171,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1486},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":857465,"byte_end":857468,"line_start":1195,"line_end":1195,"column_start":18,"column_end":21},"name":"new","qualname":"<UnsafeCell<T>>::new","value":"fn (value: T) -> UnsafeCell<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1487},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":858000,"byte_end":858010,"line_start":1217,"line_end":1217,"column_start":19,"column_end":29},"name":"into_inner","qualname":"<UnsafeCell<T>>::into_inner","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1489},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":858618,"byte_end":858621,"line_start":1241,"line_end":1241,"column_start":12,"column_end":15},"name":"get","qualname":"<UnsafeCell<T>>::get","value":"fn (&self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1496},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"char","qualname":"::char","value":"src/libcore/char.rs","parent":null,"children":[{"krate":0,"index":1497},{"krate":0,"index":1498},{"krate":0,"index":1501},{"krate":0,"index":1502},{"krate":0,"index":1505},{"krate":0,"index":1506},{"krate":0,"index":1507},{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1510},{"krate":0,"index":1511},{"krate":0,"index":1512},{"krate":0,"index":1513},{"krate":0,"index":1514},{"krate":0,"index":1515},{"krate":0,"index":1516},{"krate":0,"index":1517},{"krate":0,"index":1518},{"krate":0,"index":1520},{"krate":0,"index":16594},{"krate":0,"index":16597},{"krate":0,"index":16595},{"krate":0,"index":1522},{"krate":0,"index":16599},{"krate":0,"index":16608},{"krate":0,"index":16606},{"krate":0,"index":16604},{"krate":0,"index":16602},{"krate":0,"index":16600},{"krate":0,"index":1524},{"krate":0,"index":1526},{"krate":0,"index":1529},{"krate":0,"index":16609},{"krate":0,"index":16619},{"krate":0,"index":16617},{"krate":0,"index":16615},{"krate":0,"index":16612},{"krate":0,"index":16610},{"krate":0,"index":1532},{"krate":0,"index":1534},{"krate":0,"index":1535},{"krate":0,"index":1545},{"krate":0,"index":16620},{"krate":0,"index":16623},{"krate":0,"index":16621},{"krate":0,"index":16625},{"krate":0,"index":16628},{"krate":0,"index":16626},{"krate":0,"index":1555},{"krate":0,"index":1561},{"krate":0,"index":1563},{"krate":0,"index":1564},{"krate":0,"index":16630},{"krate":0,"index":16633},{"krate":0,"index":16631},{"krate":0,"index":16635},{"krate":0,"index":16638},{"krate":0,"index":16636},{"krate":0,"index":1566},{"krate":0,"index":1573},{"krate":0,"index":1575},{"krate":0,"index":1576},{"krate":0,"index":16640},{"krate":0,"index":16643},{"krate":0,"index":16641},{"krate":0,"index":1578},{"krate":0,"index":1582},{"krate":0,"index":1583},{"krate":0,"index":1584},{"krate":0,"index":16645},{"krate":0,"index":16648},{"krate":0,"index":16646},{"krate":0,"index":1586},{"krate":0,"index":16650},{"krate":0,"index":16655},{"krate":0,"index":16653},{"krate":0,"index":16651},{"krate":0,"index":1587},{"krate":0,"index":1592}],"decl_id":null,"docs":" Character manipulation.","sig":null,"attributes":[{"value":"allow(non_snake_case)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":860013,"byte_end":860038,"line_start":15,"line_end":15,"column_start":1,"column_end":26}},{"value":"stable(feature = \"core_char\", since = \"1.2.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":860039,"byte_end":860089,"line_start":16,"line_end":16,"column_start":1,"column_end":51}}]},{"kind":"Const","id":{"krate":0,"index":1515},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":863018,"byte_end":863021,"line_start":78,"line_end":78,"column_start":11,"column_end":14},"name":"MAX","qualname":"::char::MAX","value":"char","parent":null,"children":[],"decl_id":null,"docs":" The highest valid code point a `char` can have.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":862962,"byte_end":863007,"line_start":77,"line_end":77,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1516},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":864158,"byte_end":864166,"line_start":128,"line_end":128,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::char::from_u32","value":"fn (i: u32) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `u32` to a `char`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":864095,"byte_end":864104,"line_start":126,"line_end":126,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":864105,"byte_end":864150,"line_start":127,"line_end":127,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1517},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":865281,"byte_end":865299,"line_start":173,"line_end":173,"column_start":15,"column_end":33},"name":"from_u32_unchecked","qualname":"::char::from_u32_unchecked","value":"fn (i: u32) -> char","parent":null,"children":[],"decl_id":null,"docs":" Converts a `u32` to a `char`, ignoring validity.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":865197,"byte_end":865206,"line_start":171,"line_end":171,"column_start":1,"column_end":10}},{"value":"stable(feature = \"char_from_unchecked\", since = \"1.5.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":865207,"byte_end":865266,"line_start":172,"line_end":172,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":16594},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":866784,"byte_end":866798,"line_start":215,"line_end":215,"column_start":12,"column_end":26},"name":"ParseCharError","qualname":"::char::ParseCharError","value":"ParseCharError {  }","parent":null,"children":[{"krate":0,"index":2147494995}],"decl_id":null,"docs":" An error which can be returned when parsing a char.\n","sig":null,"attributes":[{"value":"stable(feature = \"char_from_str\", since = \"1.20.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":866694,"byte_end":866748,"line_start":213,"line_end":213,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1523},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":867031,"byte_end":867044,"line_start":224,"line_end":224,"column_start":12,"column_end":25},"name":"__description","qualname":"<ParseCharError>::__description","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":16609},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":868684,"byte_end":868700,"line_start":285,"line_end":285,"column_start":12,"column_end":28},"name":"CharTryFromError","qualname":"::char::CharTryFromError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type returned when a conversion from u32 to char fails.\n","sig":null,"attributes":[{"value":"unstable(feature = \"try_from\", issue = \"33417\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":868577,"byte_end":868627,"line_start":283,"line_end":283,"column_start":1,"column_end":51}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":868673,"byte_end":868705,"line_start":285,"line_end":285,"column_start":1,"column_end":33}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":868673,"byte_end":868705,"line_start":285,"line_end":285,"column_start":1,"column_end":33}}]},{"kind":"Function","id":{"krate":0,"index":1534},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870140,"byte_end":870150,"line_start":350,"line_end":350,"column_start":8,"column_end":18},"name":"from_digit","qualname":"::char::from_digit","value":"fn (num: u32, radix: u32) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" Converts a digit in the given radix to a `char`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870077,"byte_end":870086,"line_start":348,"line_end":348,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870087,"byte_end":870132,"line_start":349,"line_end":349,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":1535},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870810,"byte_end":870817,"line_start":373,"line_end":373,"column_start":11,"column_end":18},"name":"CharExt","qualname":"::char::CharExt","value":"CharExt","parent":null,"children":[{"krate":0,"index":1536},{"krate":0,"index":1537},{"krate":0,"index":1538},{"krate":0,"index":1539},{"krate":0,"index":1540},{"krate":0,"index":1541},{"krate":0,"index":1542},{"krate":0,"index":1543},{"krate":0,"index":1544}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870589,"byte_end":870611,"line_start":368,"line_end":368,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_char_ext\",\n           reason = \"the stable interface is `impl char` in later crate\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870659,"byte_end":870799,"line_start":370,"line_end":372,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1536},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870876,"byte_end":870884,"line_start":375,"line_end":375,"column_start":8,"column_end":16},"name":"is_digit","qualname":"::char::CharExt::is_digit","value":"fn (self, radix: u32) -> bool","parent":{"krate":0,"index":1535},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870589,"byte_end":870611,"line_start":368,"line_end":368,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_char_ext\",\n           reason = \"the stable interface is `impl char` in later crate\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870659,"byte_end":870799,"line_start":370,"line_end":372,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1537},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870968,"byte_end":870976,"line_start":377,"line_end":377,"column_start":8,"column_end":16},"name":"to_digit","qualname":"::char::CharExt::to_digit","value":"fn (self, radix: u32) -> Option<u32>","parent":{"krate":0,"index":1535},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870589,"byte_end":870611,"line_start":368,"line_end":368,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_char_ext\",\n           reason = \"the stable interface is `impl char` in later crate\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870659,"byte_end":870799,"line_start":370,"line_end":372,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1538},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":871067,"byte_end":871081,"line_start":379,"line_end":379,"column_start":8,"column_end":22},"name":"escape_unicode","qualname":"::char::CharExt::escape_unicode","value":"fn (self) -> EscapeUnicode","parent":{"krate":0,"index":1535},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870589,"byte_end":870611,"line_start":368,"line_end":368,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_char_ext\",\n           reason = \"the stable interface is `impl char` in later crate\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870659,"byte_end":870799,"line_start":370,"line_end":372,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1539},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":871162,"byte_end":871176,"line_start":381,"line_end":381,"column_start":8,"column_end":22},"name":"escape_default","qualname":"::char::CharExt::escape_default","value":"fn (self) -> EscapeDefault","parent":{"krate":0,"index":1535},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870589,"byte_end":870611,"line_start":368,"line_end":368,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_char_ext\",\n           reason = \"the stable interface is `impl char` in later crate\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870659,"byte_end":870799,"line_start":370,"line_end":372,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1540},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":871271,"byte_end":871283,"line_start":383,"line_end":383,"column_start":8,"column_end":20},"name":"escape_debug","qualname":"::char::CharExt::escape_debug","value":"fn (self) -> EscapeDebug","parent":{"krate":0,"index":1535},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870589,"byte_end":870611,"line_start":368,"line_end":368,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_char_ext\",\n           reason = \"the stable interface is `impl char` in later crate\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870659,"byte_end":870799,"line_start":370,"line_end":372,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1541},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":871362,"byte_end":871370,"line_start":385,"line_end":385,"column_start":8,"column_end":16},"name":"len_utf8","qualname":"::char::CharExt::len_utf8","value":"fn (self) -> usize","parent":{"krate":0,"index":1535},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870589,"byte_end":870611,"line_start":368,"line_end":368,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_char_ext\",\n           reason = \"the stable interface is `impl char` in later crate\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870659,"byte_end":870799,"line_start":370,"line_end":372,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1542},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":871443,"byte_end":871452,"line_start":387,"line_end":387,"column_start":8,"column_end":17},"name":"len_utf16","qualname":"::char::CharExt::len_utf16","value":"fn (self) -> usize","parent":{"krate":0,"index":1535},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870589,"byte_end":870611,"line_start":368,"line_end":368,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_char_ext\",\n           reason = \"the stable interface is `impl char` in later crate\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870659,"byte_end":870799,"line_start":370,"line_end":372,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1543},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":871541,"byte_end":871552,"line_start":389,"line_end":389,"column_start":8,"column_end":19},"name":"encode_utf8","qualname":"::char::CharExt::encode_utf8","value":"fn (self, dst: &mut [u8]) -> &mut str","parent":{"krate":0,"index":1535},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870589,"byte_end":870611,"line_start":368,"line_end":368,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_char_ext\",\n           reason = \"the stable interface is `impl char` in later crate\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870659,"byte_end":870799,"line_start":370,"line_end":372,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1544},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":871660,"byte_end":871672,"line_start":391,"line_end":391,"column_start":8,"column_end":20},"name":"encode_utf16","qualname":"::char::CharExt::encode_utf16","value":"fn (self, dst: &mut [u16]) -> &mut [u16]","parent":{"krate":0,"index":1535},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870589,"byte_end":870611,"line_start":368,"line_end":368,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_char_ext\",\n           reason = \"the stable interface is `impl char` in later crate\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":870659,"byte_end":870799,"line_start":370,"line_end":372,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":16620},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":877344,"byte_end":877357,"line_start":547,"line_end":547,"column_start":12,"column_end":25},"name":"EscapeUnicode","qualname":"::char::EscapeUnicode","value":"EscapeUnicode {  }","parent":null,"children":[{"krate":0,"index":2147495000},{"krate":0,"index":2147495001},{"krate":0,"index":2147495002}],"decl_id":null,"docs":" Returns an iterator that yields the hexadecimal Unicode escape of a\n character, as `char`s.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":877287,"byte_end":877332,"line_start":546,"line_end":546,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":16630},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":881014,"byte_end":881027,"line_start":668,"line_end":668,"column_start":12,"column_end":25},"name":"EscapeDefault","qualname":"::char::EscapeDefault","value":"EscapeDefault {  }","parent":null,"children":[{"krate":0,"index":2147495009}],"decl_id":null,"docs":" An iterator that yields the literal escape code of a `char`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":880957,"byte_end":881002,"line_start":667,"line_end":667,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":16640},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":884281,"byte_end":884292,"line_start":781,"line_end":781,"column_start":12,"column_end":23},"name":"EscapeDebug","qualname":"::char::EscapeDebug","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields the literal escape code of a `char`.","sig":null,"attributes":[{"value":"stable(feature = \"char_escape_debug\", since = \"1.20.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":884187,"byte_end":884245,"line_start":779,"line_end":779,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":16645},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":885131,"byte_end":885141,"line_start":809,"line_end":809,"column_start":12,"column_end":22},"name":"DecodeUtf8","qualname":"::char::DecodeUtf8","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over an iterator of bytes of the characters the bytes represent\n as UTF-8\n","sig":null,"attributes":[{"value":"unstable(feature = \"decode_utf8\", issue = \"33906\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":885042,"byte_end":885095,"line_start":807,"line_end":807,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":1586},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":885305,"byte_end":885316,"line_start":814,"line_end":814,"column_start":8,"column_end":19},"name":"decode_utf8","qualname":"::char::decode_utf8","value":"fn <I> (i: I) -> DecodeUtf8<I::IntoIter>","parent":null,"children":[],"decl_id":null,"docs":" Decodes an `Iterator` of bytes as UTF-8.\n","sig":null,"attributes":[{"value":"unstable(feature = \"decode_utf8\", issue = \"33906\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":885234,"byte_end":885287,"line_start":812,"line_end":812,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":885288,"byte_end":885297,"line_start":813,"line_end":813,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":16650},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":885602,"byte_end":885617,"line_start":821,"line_end":821,"column_start":12,"column_end":27},"name":"InvalidSequence","qualname":"::char::InvalidSequence","value":"","parent":null,"children":[],"decl_id":null,"docs":" `<DecodeUtf8 as Iterator>::next` returns this for an invalid input sequence.\n","sig":null,"attributes":[{"value":"unstable(feature = \"decode_utf8\", issue = \"33906\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":885505,"byte_end":885558,"line_start":819,"line_end":819,"column_start":1,"column_end":54}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":885591,"byte_end":885622,"line_start":821,"line_end":821,"column_start":1,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":1593},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"panicking","qualname":"::panicking","value":"src/libcore/panicking.rs","parent":null,"children":[{"krate":0,"index":1594},{"krate":0,"index":1595},{"krate":0,"index":1596},{"krate":0,"index":1597}],"decl_id":null,"docs":" Panic support for libcore","sig":null,"attributes":[{"value":"allow(dead_code, missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":890441,"byte_end":890475,"line_start":33,"line_end":33,"column_start":1,"column_end":35}},{"value":"unstable(feature = \"core_panic\",\n           reason =\n               \"internal details of the implementation of the `panic!` and related macros\",\n           issue = \"0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":890476,"byte_end":890659,"line_start":34,"line_end":37,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":1595},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":890754,"byte_end":890759,"line_start":43,"line_end":43,"column_start":8,"column_end":13},"name":"panic","qualname":"::panicking::panic","value":"fn (expr_file_line_col: &(&'static str, &'static str, u32, u32)) -> !","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cold","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":890671,"byte_end":890678,"line_start":41,"line_end":41,"column_start":1,"column_end":8}},{"value":"inline(never)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":890679,"byte_end":890695,"line_start":41,"line_end":41,"column_start":9,"column_end":25}},{"value":"lang = \"panic\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":890729,"byte_end":890746,"line_start":42,"line_end":42,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":1597},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":891745,"byte_end":891754,"line_start":63,"line_end":63,"column_start":8,"column_end":17},"name":"panic_fmt","qualname":"::panicking::panic_fmt","value":"fn (fmt: fmt::Arguments, file_line_col: &(&'static str, u32, u32)) -> !","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cold","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":891713,"byte_end":891720,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"inline(never)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,97,110,105,99,107,105,110,103,46,114,115],"byte_start":891721,"byte_end":891737,"line_start":62,"line_end":62,"column_start":9,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":1599},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"iter","qualname":"::iter","value":"src/libcore/iter/mod.rs","parent":null,"children":[{"krate":0,"index":1600},{"krate":0,"index":1601},{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":1604},{"krate":0,"index":1605},{"krate":0,"index":1608},{"krate":0,"index":1611},{"krate":0,"index":1614},{"krate":0,"index":1619},{"krate":0,"index":1623},{"krate":0,"index":1624},{"krate":0,"index":1625},{"krate":0,"index":1626},{"krate":0,"index":1716},{"krate":0,"index":1767},{"krate":0,"index":1811},{"krate":0,"index":16992},{"krate":0,"index":16995},{"krate":0,"index":16993},{"krate":0,"index":1862},{"krate":0,"index":1869},{"krate":0,"index":1873},{"krate":0,"index":1876},{"krate":0,"index":1877},{"krate":0,"index":16997},{"krate":0,"index":17000},{"krate":0,"index":16998},{"krate":0,"index":1878},{"krate":0,"index":1883},{"krate":0,"index":1886},{"krate":0,"index":1889},{"krate":0,"index":1890},{"krate":0,"index":1893},{"krate":0,"index":1896},{"krate":0,"index":17002},{"krate":0,"index":17005},{"krate":0,"index":17003},{"krate":0,"index":1897},{"krate":0,"index":1901},{"krate":0,"index":17007},{"krate":0,"index":17010},{"krate":0,"index":17008},{"krate":0,"index":1902},{"krate":0,"index":1906},{"krate":0,"index":17012},{"krate":0,"index":17015},{"krate":0,"index":17013},{"krate":0,"index":17017},{"krate":0,"index":17020},{"krate":0,"index":17018},{"krate":0,"index":1907},{"krate":0,"index":1916},{"krate":0,"index":1919},{"krate":0,"index":1920},{"krate":0,"index":17022},{"krate":0,"index":17025},{"krate":0,"index":17023},{"krate":0,"index":1921},{"krate":0,"index":1925},{"krate":0,"index":1927},{"krate":0,"index":1933},{"krate":0,"index":1939},{"krate":0,"index":1944},{"krate":0,"index":1945},{"krate":0,"index":1948},{"krate":0,"index":1949},{"krate":0,"index":17027},{"krate":0,"index":17028},{"krate":0,"index":1950},{"krate":0,"index":1952},{"krate":0,"index":1957},{"krate":0,"index":1960},{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":1965},{"krate":0,"index":17030},{"krate":0,"index":17031},{"krate":0,"index":1968},{"krate":0,"index":1970},{"krate":0,"index":1976},{"krate":0,"index":1979},{"krate":0,"index":17033},{"krate":0,"index":17034},{"krate":0,"index":1980},{"krate":0,"index":1982},{"krate":0,"index":1987},{"krate":0,"index":1990},{"krate":0,"index":17036},{"krate":0,"index":17039},{"krate":0,"index":17037},{"krate":0,"index":1991},{"krate":0,"index":1998},{"krate":0,"index":2001},{"krate":0,"index":2004},{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":17041},{"krate":0,"index":17044},{"krate":0,"index":17042},{"krate":0,"index":2009},{"krate":0,"index":2017},{"krate":0,"index":2018},{"krate":0,"index":2019},{"krate":0,"index":17046},{"krate":0,"index":17047},{"krate":0,"index":2021},{"krate":0,"index":2023},{"krate":0,"index":2028},{"krate":0,"index":17049},{"krate":0,"index":17050},{"krate":0,"index":2029},{"krate":0,"index":2031},{"krate":0,"index":2035},{"krate":0,"index":17052},{"krate":0,"index":17055},{"krate":0,"index":17053},{"krate":0,"index":2036},{"krate":0,"index":2044},{"krate":0,"index":2045},{"krate":0,"index":2047},{"krate":0,"index":17057},{"krate":0,"index":17060},{"krate":0,"index":17058},{"krate":0,"index":2048},{"krate":0,"index":2053},{"krate":0,"index":2054},{"krate":0,"index":17062},{"krate":0,"index":17063},{"krate":0,"index":2055},{"krate":0,"index":2057},{"krate":0,"index":17065},{"krate":0,"index":17066},{"krate":0,"index":2061},{"krate":0,"index":2063},{"krate":0,"index":2068},{"krate":0,"index":2071},{"krate":0,"index":17068},{"krate":0,"index":17071},{"krate":0,"index":17069},{"krate":0,"index":2072},{"krate":0,"index":2073},{"krate":0,"index":2081},{"krate":0,"index":2084},{"krate":0,"index":2087},{"krate":0,"index":2094},{"krate":0,"index":2097},{"krate":0,"index":17073},{"krate":0,"index":17074},{"krate":0,"index":2100},{"krate":0,"index":2102},{"krate":0,"index":2104},{"krate":0,"index":2109},{"krate":0,"index":2112},{"krate":0,"index":2115}],"decl_id":null,"docs":" Composable external iteration.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":901953,"byte_end":901999,"line_start":303,"line_end":303,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":1657},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962783,"byte_end":962791,"line_start":31,"line_end":31,"column_start":11,"column_end":19},"name":"Iterator","qualname":"::iter::iterator::Iterator","value":"Iterator","parent":null,"children":[{"krate":0,"index":1658},{"krate":0,"index":1659},{"krate":0,"index":1660},{"krate":0,"index":1661},{"krate":0,"index":1662},{"krate":0,"index":1663},{"krate":0,"index":1664},{"krate":0,"index":1665},{"krate":0,"index":1666},{"krate":0,"index":1667},{"krate":0,"index":1668},{"krate":0,"index":1669},{"krate":0,"index":1670},{"krate":0,"index":1671},{"krate":0,"index":1672},{"krate":0,"index":1673},{"krate":0,"index":1674},{"krate":0,"index":1675},{"krate":0,"index":1676},{"krate":0,"index":1677},{"krate":0,"index":1678},{"krate":0,"index":1679},{"krate":0,"index":1680},{"krate":0,"index":1681},{"krate":0,"index":1682},{"krate":0,"index":1683},{"krate":0,"index":1684},{"krate":0,"index":1685},{"krate":0,"index":1686},{"krate":0,"index":1687},{"krate":0,"index":1688},{"krate":0,"index":1689},{"krate":0,"index":1690},{"krate":0,"index":1691},{"krate":0,"index":1692},{"krate":0,"index":1693},{"krate":0,"index":1694},{"krate":0,"index":1695},{"krate":0,"index":1696},{"krate":0,"index":1697},{"krate":0,"index":1698},{"krate":0,"index":1699},{"krate":0,"index":1700},{"krate":0,"index":1701},{"krate":0,"index":1702},{"krate":0,"index":1703},{"krate":0,"index":1704},{"krate":0,"index":1705},{"krate":0,"index":1706},{"krate":0,"index":1707},{"krate":0,"index":1708},{"krate":0,"index":1709}],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":1658},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962907,"byte_end":962911,"line_start":34,"line_end":34,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::iterator::Iterator::Item","value":"type Item;","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" The type of the elements being iterated over.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962852,"byte_end":962897,"line_start":33,"line_end":33,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1659},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":964033,"byte_end":964037,"line_start":68,"line_end":68,"column_start":8,"column_end":12},"name":"next","qualname":"::iter::iterator::Iterator::next","value":"fn (&mut self) -> Option<Self::Item>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1660},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":966708,"byte_end":966717,"line_start":140,"line_end":140,"column_start":8,"column_end":17},"name":"size_hint","qualname":"::iter::iterator::Iterator::size_hint","value":"fn (&self) -> (usize, Option<usize>)","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1661},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":967991,"byte_end":967996,"line_start":179,"line_end":179,"column_start":8,"column_end":13},"name":"count","qualname":"::iter::iterator::Iterator::count","value":"fn (self) -> usize","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1662},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":968790,"byte_end":968794,"line_start":205,"line_end":205,"column_start":8,"column_end":12},"name":"last","qualname":"::iter::iterator::Iterator::last","value":"fn (self) -> Option<Self::Item>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1663},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":970302,"byte_end":970305,"line_start":254,"line_end":254,"column_start":8,"column_end":11},"name":"nth","qualname":"::iter::iterator::Iterator::nth","value":"fn (&mut self, mut n: usize) -> Option<Self::Item>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1664},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":971348,"byte_end":971355,"line_start":290,"line_end":290,"column_start":8,"column_end":15},"name":"step_by","qualname":"::iter::iterator::Iterator::step_by","value":"fn (self, step: usize) -> StepBy<Self>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1665},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":973264,"byte_end":973269,"line_start":346,"line_end":346,"column_start":8,"column_end":13},"name":"chain","qualname":"::iter::iterator::Iterator::chain","value":"fn <U> (self, other: U) -> Chain<Self, U::IntoIter>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1666},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":976048,"byte_end":976051,"line_start":423,"line_end":423,"column_start":8,"column_end":11},"name":"zip","qualname":"::iter::iterator::Iterator::zip","value":"fn <U> (self, other: U) -> Zip<Self, U::IntoIter>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1667},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":978031,"byte_end":978034,"line_start":479,"line_end":479,"column_start":8,"column_end":11},"name":"map","qualname":"::iter::iterator::Iterator::map","value":"fn <B, F> (self, f: F) -> Map<Self, F>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1668},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":979557,"byte_end":979565,"line_start":522,"line_end":522,"column_start":8,"column_end":16},"name":"for_each","qualname":"::iter::iterator::Iterator::for_each","value":"fn <F> (self, mut f: F) -> ()","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1669},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":981622,"byte_end":981628,"line_start":590,"line_end":590,"column_start":8,"column_end":14},"name":"filter","qualname":"::iter::iterator::Iterator::filter","value":"fn <P> (self, predicate: P) -> Filter<Self, P>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1670},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":983772,"byte_end":983782,"line_start":650,"line_end":650,"column_start":8,"column_end":18},"name":"filter_map","qualname":"::iter::iterator::Iterator::filter_map","value":"fn <B, F> (self, f: F) -> FilterMap<Self, F>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1671},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":985355,"byte_end":985364,"line_start":696,"line_end":696,"column_start":8,"column_end":17},"name":"enumerate","qualname":"::iter::iterator::Iterator::enumerate","value":"fn (self) -> Enumerate<Self>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1672},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":986944,"byte_end":986952,"line_start":742,"line_end":742,"column_start":8,"column_end":16},"name":"peekable","qualname":"::iter::iterator::Iterator::peekable","value":"fn (self) -> Peekable<Self>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1673},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":988883,"byte_end":988893,"line_start":803,"line_end":803,"column_start":8,"column_end":18},"name":"skip_while","qualname":"::iter::iterator::Iterator::skip_while","value":"fn <P> (self, predicate: P) -> SkipWhile<Self, P>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1674},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":991537,"byte_end":991547,"line_start":883,"line_end":883,"column_start":8,"column_end":18},"name":"take_while","qualname":"::iter::iterator::Iterator::take_while","value":"fn <P> (self, predicate: P) -> TakeWhile<Self, P>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1675},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":992202,"byte_end":992206,"line_start":907,"line_end":907,"column_start":8,"column_end":12},"name":"skip","qualname":"::iter::iterator::Iterator::skip","value":"fn (self, n: usize) -> Skip<Self>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1676},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":993055,"byte_end":993059,"line_start":939,"line_end":939,"column_start":8,"column_end":12},"name":"take","qualname":"::iter::iterator::Iterator::take","value":"fn (self, n: usize) -> Take<Self>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1677},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":994511,"byte_end":994515,"line_start":982,"line_end":982,"column_start":8,"column_end":12},"name":"scan","qualname":"::iter::iterator::Iterator::scan","value":"fn <St, B, F> (self, initial_state: St, f: F) -> Scan<Self, St, F>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1678},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":995730,"byte_end":995738,"line_start":1016,"line_end":1016,"column_start":8,"column_end":16},"name":"flat_map","qualname":"::iter::iterator::Iterator::flat_map","value":"fn <U, F> (self, f: F) -> FlatMap<Self, U, F>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1679},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":997721,"byte_end":997725,"line_start":1078,"line_end":1078,"column_start":8,"column_end":12},"name":"fuse","qualname":"::iter::iterator::Iterator::fuse","value":"fn (self) -> Fuse<Self>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1680},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":999391,"byte_end":999398,"line_start":1131,"line_end":1131,"column_start":8,"column_end":15},"name":"inspect","qualname":"::iter::iterator::Iterator::inspect","value":"fn <F> (self, f: F) -> Inspect<Self, F>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1681},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1000699,"byte_end":1000705,"line_start":1177,"line_end":1177,"column_start":8,"column_end":14},"name":"by_ref","qualname":"::iter::iterator::Iterator::by_ref","value":"fn (&mut self) -> &mut Self","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1682},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1004888,"byte_end":1004895,"line_start":1297,"line_end":1297,"column_start":8,"column_end":15},"name":"collect","qualname":"::iter::iterator::Iterator::collect","value":"fn <B> (self) -> B","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1683},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1005701,"byte_end":1005710,"line_start":1321,"line_end":1321,"column_start":8,"column_end":17},"name":"partition","qualname":"::iter::iterator::Iterator::partition","value":"fn <B, F> (self, mut f: F) -> (B, B)","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1684},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1008222,"byte_end":1008226,"line_start":1406,"line_end":1406,"column_start":8,"column_end":12},"name":"fold","qualname":"::iter::iterator::Iterator::fold","value":"fn <B, F> (self, init: B, mut f: F) -> B","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1685},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1009624,"byte_end":1009627,"line_start":1455,"line_end":1455,"column_start":8,"column_end":11},"name":"all","qualname":"::iter::iterator::Iterator::all","value":"fn <F> (&mut self, mut f: F) -> bool","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1686},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1011018,"byte_end":1011021,"line_start":1505,"line_end":1505,"column_start":8,"column_end":11},"name":"any","qualname":"::iter::iterator::Iterator::any","value":"fn <F> (&mut self, mut f: F) -> bool","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1687},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1012783,"byte_end":1012787,"line_start":1561,"line_end":1561,"column_start":8,"column_end":12},"name":"find","qualname":"::iter::iterator::Iterator::find","value":"fn <P> (&mut self, mut predicate: P) -> Option<Self::Item>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1688},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1014914,"byte_end":1014922,"line_start":1627,"line_end":1627,"column_start":8,"column_end":16},"name":"position","qualname":"::iter::iterator::Iterator::position","value":"fn <P> (&mut self, mut predicate: P) -> Option<usize>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1689},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1016558,"byte_end":1016567,"line_start":1680,"line_end":1680,"column_start":8,"column_end":17},"name":"rposition","qualname":"::iter::iterator::Iterator::rposition","value":"fn <P> (&mut self, mut predicate: P) -> Option<usize>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1690},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1017674,"byte_end":1017677,"line_start":1717,"line_end":1717,"column_start":8,"column_end":11},"name":"max","qualname":"::iter::iterator::Iterator::max","value":"fn (self) -> Option<Self::Item>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1691},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1018581,"byte_end":1018584,"line_start":1747,"line_end":1747,"column_start":8,"column_end":11},"name":"min","qualname":"::iter::iterator::Iterator::min","value":"fn (self) -> Option<Self::Item>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1692},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1019463,"byte_end":1019473,"line_start":1773,"line_end":1773,"column_start":8,"column_end":18},"name":"max_by_key","qualname":"::iter::iterator::Iterator::max_by_key","value":"fn <B, F> (self, f: F) -> Option<Self::Item>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1693},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1020402,"byte_end":1020408,"line_start":1800,"line_end":1800,"column_start":8,"column_end":14},"name":"max_by","qualname":"::iter::iterator::Iterator::max_by","value":"fn <F> (self, mut compare: F) -> Option<Self::Item>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1694},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1021352,"byte_end":1021362,"line_start":1826,"line_end":1826,"column_start":8,"column_end":18},"name":"min_by_key","qualname":"::iter::iterator::Iterator::min_by_key","value":"fn <B, F> (self, f: F) -> Option<Self::Item>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1695},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1022299,"byte_end":1022305,"line_start":1853,"line_end":1853,"column_start":8,"column_end":14},"name":"min_by","qualname":"::iter::iterator::Iterator::min_by","value":"fn <F> (self, mut compare: F) -> Option<Self::Item>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1696},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1023484,"byte_end":1023487,"line_start":1890,"line_end":1890,"column_start":8,"column_end":11},"name":"rev","qualname":"::iter::iterator::Iterator::rev","value":"fn (self) -> Rev<Self>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1697},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1024274,"byte_end":1024279,"line_start":1917,"line_end":1917,"column_start":8,"column_end":13},"name":"unzip","qualname":"::iter::iterator::Iterator::unzip","value":"fn <A, B, FromA, FromB> (self) -> (FromA, FromB)","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1698},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1025393,"byte_end":1025399,"line_start":1956,"line_end":1956,"column_start":8,"column_end":14},"name":"cloned","qualname":"::iter::iterator::Iterator::cloned","value":"fn <'a, T> (self) -> Cloned<Self>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1699},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1026389,"byte_end":1026394,"line_start":1989,"line_end":1989,"column_start":8,"column_end":13},"name":"cycle","qualname":"::iter::iterator::Iterator::cycle","value":"fn (self) -> Cycle<Self>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1700},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1027154,"byte_end":1027157,"line_start":2016,"line_end":2016,"column_start":8,"column_end":11},"name":"sum","qualname":"::iter::iterator::Iterator::sum","value":"fn <S> (self) -> S","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1701},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1027956,"byte_end":1027963,"line_start":2044,"line_end":2044,"column_start":8,"column_end":15},"name":"product","qualname":"::iter::iterator::Iterator::product","value":"fn <P> (self) -> P","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1702},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1028247,"byte_end":1028250,"line_start":2054,"line_end":2054,"column_start":8,"column_end":11},"name":"cmp","qualname":"::iter::iterator::Iterator::cmp","value":"fn <I> (mut self, other: I) -> Ordering","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1703},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1029160,"byte_end":1029171,"line_start":2086,"line_end":2086,"column_start":8,"column_end":19},"name":"partial_cmp","qualname":"::iter::iterator::Iterator::partial_cmp","value":"fn <I> (mut self, other: I) -> Option<Ordering>","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1704},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1030113,"byte_end":1030115,"line_start":2118,"line_end":2118,"column_start":8,"column_end":10},"name":"eq","qualname":"::iter::iterator::Iterator::eq","value":"fn <I> (mut self, other: I) -> bool","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1705},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1030791,"byte_end":1030793,"line_start":2143,"line_end":2143,"column_start":8,"column_end":10},"name":"ne","qualname":"::iter::iterator::Iterator::ne","value":"fn <I> (mut self, other: I) -> bool","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1706},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1031484,"byte_end":1031486,"line_start":2168,"line_end":2168,"column_start":8,"column_end":10},"name":"lt","qualname":"::iter::iterator::Iterator::lt","value":"fn <I> (mut self, other: I) -> bool","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1707},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1032393,"byte_end":1032395,"line_start":2198,"line_end":2198,"column_start":8,"column_end":10},"name":"le","qualname":"::iter::iterator::Iterator::le","value":"fn <I> (mut self, other: I) -> bool","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1708},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1033299,"byte_end":1033301,"line_start":2228,"line_end":2228,"column_start":8,"column_end":10},"name":"gt","qualname":"::iter::iterator::Iterator::gt","value":"fn <I> (mut self, other: I) -> bool","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1709},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":1034217,"byte_end":1034219,"line_start":2258,"line_end":2258,"column_start":8,"column_end":10},"name":"ge","qualname":"::iter::iterator::Iterator::ge","value":"fn <I> (mut self, other: I) -> bool","parent":{"krate":0,"index":1657},"children":[],"decl_id":null,"docs":" An interface for dealing with iterators.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962590,"byte_end":962635,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` is not an iterator; maybe try calling `.iter()` or a similar method\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,105,116,101,114,97,116,111,114,46,114,115],"byte_start":962636,"byte_end":962772,"line_start":29,"line_end":30,"column_start":1,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":1727},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1037237,"byte_end":1037241,"line_start":25,"line_end":25,"column_start":11,"column_end":15},"name":"Step","qualname":"::iter::range::Step","value":"Step:  Clone + PartialOrd + Sized","parent":null,"children":[{"krate":0,"index":1728},{"krate":0,"index":1729},{"krate":0,"index":1730},{"krate":0,"index":1731},{"krate":0,"index":1732},{"krate":0,"index":1733}],"decl_id":null,"docs":" Objects that can be stepped over in both directions.","sig":null,"attributes":[{"value":"unstable(feature = \"step_trait\",\n           reason = \"likely to be replaced by finer-grained traits\",\n           issue = \"42168\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1037094,"byte_end":1037226,"line_start":22,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1728},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1037515,"byte_end":1037528,"line_start":31,"line_end":31,"column_start":8,"column_end":21},"name":"steps_between","qualname":"::iter::range::Step::steps_between","value":"fn (start: &Self, end: &Self) -> Option<usize>","parent":{"krate":0,"index":1727},"children":[],"decl_id":null,"docs":" Objects that can be stepped over in both directions.","sig":null,"attributes":[{"value":"unstable(feature = \"step_trait\",\n           reason = \"likely to be replaced by finer-grained traits\",\n           issue = \"42168\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1037094,"byte_end":1037226,"line_start":22,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1729},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1037635,"byte_end":1037646,"line_start":34,"line_end":34,"column_start":8,"column_end":19},"name":"replace_one","qualname":"::iter::range::Step::replace_one","value":"fn (&mut self) -> Self","parent":{"krate":0,"index":1727},"children":[],"decl_id":null,"docs":" Objects that can be stepped over in both directions.","sig":null,"attributes":[{"value":"unstable(feature = \"step_trait\",\n           reason = \"likely to be replaced by finer-grained traits\",\n           issue = \"42168\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1037094,"byte_end":1037226,"line_start":22,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1730},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1037729,"byte_end":1037741,"line_start":37,"line_end":37,"column_start":8,"column_end":20},"name":"replace_zero","qualname":"::iter::range::Step::replace_zero","value":"fn (&mut self) -> Self","parent":{"krate":0,"index":1727},"children":[],"decl_id":null,"docs":" Objects that can be stepped over in both directions.","sig":null,"attributes":[{"value":"unstable(feature = \"step_trait\",\n           reason = \"likely to be replaced by finer-grained traits\",\n           issue = \"42168\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1037094,"byte_end":1037226,"line_start":22,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1731},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1037822,"byte_end":1037829,"line_start":40,"line_end":40,"column_start":8,"column_end":15},"name":"add_one","qualname":"::iter::range::Step::add_one","value":"fn (&self) -> Self","parent":{"krate":0,"index":1727},"children":[],"decl_id":null,"docs":" Objects that can be stepped over in both directions.","sig":null,"attributes":[{"value":"unstable(feature = \"step_trait\",\n           reason = \"likely to be replaced by finer-grained traits\",\n           issue = \"42168\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1037094,"byte_end":1037226,"line_start":22,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1732},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1037911,"byte_end":1037918,"line_start":43,"line_end":43,"column_start":8,"column_end":15},"name":"sub_one","qualname":"::iter::range::Step::sub_one","value":"fn (&self) -> Self","parent":{"krate":0,"index":1727},"children":[],"decl_id":null,"docs":" Objects that can be stepped over in both directions.","sig":null,"attributes":[{"value":"unstable(feature = \"step_trait\",\n           reason = \"likely to be replaced by finer-grained traits\",\n           issue = \"42168\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1037094,"byte_end":1037226,"line_start":22,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1733},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1037992,"byte_end":1038001,"line_start":46,"line_end":46,"column_start":8,"column_end":17},"name":"add_usize","qualname":"::iter::range::Step::add_usize","value":"fn (&self, n: usize) -> Option<Self>","parent":{"krate":0,"index":1727},"children":[],"decl_id":null,"docs":" Objects that can be stepped over in both directions.","sig":null,"attributes":[{"value":"unstable(feature = \"step_trait\",\n           reason = \"likely to be replaced by finer-grained traits\",\n           issue = \"42168\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1037094,"byte_end":1037226,"line_start":22,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":16774},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1049467,"byte_end":1049473,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"Repeat","qualname":"::iter::sources::Repeat","value":"Repeat {  }","parent":null,"children":[{"krate":0,"index":2147495026}],"decl_id":null,"docs":" An iterator that repeats an element endlessly.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1049410,"byte_end":1049455,"line_start":23,"line_end":23,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":1781},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1051339,"byte_end":1051345,"line_start":95,"line_end":95,"column_start":8,"column_end":14},"name":"repeat","qualname":"::iter::sources::repeat","value":"fn <T> (elt: T) -> Repeat<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that endlessly repeats a single element.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1051276,"byte_end":1051285,"line_start":93,"line_end":93,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1051286,"byte_end":1051331,"line_start":94,"line_end":94,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1782},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1051631,"byte_end":1051636,"line_start":105,"line_end":105,"column_start":12,"column_end":17},"name":"Empty","qualname":"::iter::sources::Empty","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator that yields nothing.","sig":null,"attributes":[{"value":"stable(feature = \"iter_empty\", since = \"1.2.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1051569,"byte_end":1051619,"line_start":104,"line_end":104,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":1799},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1053392,"byte_end":1053397,"line_start":180,"line_end":180,"column_start":8,"column_end":13},"name":"empty","qualname":"::iter::sources::empty","value":"fn <T> () -> Empty<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator that yields nothing.","sig":null,"attributes":[{"value":"stable(feature = \"iter_empty\", since = \"1.2.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1053334,"byte_end":1053384,"line_start":179,"line_end":179,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":16779},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1053711,"byte_end":1053715,"line_start":191,"line_end":191,"column_start":12,"column_end":16},"name":"Once","qualname":"::iter::sources::Once","value":"Once {  }","parent":null,"children":[{"krate":0,"index":2147495030}],"decl_id":null,"docs":" An iterator that yields an element exactly once.","sig":null,"attributes":[{"value":"stable(feature = \"iter_once\", since = \"1.2.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1053650,"byte_end":1053699,"line_start":190,"line_end":190,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":1810},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1056078,"byte_end":1056082,"line_start":280,"line_end":280,"column_start":8,"column_end":12},"name":"once","qualname":"::iter::sources::once","value":"fn <T> (value: T) -> Once<T>","parent":null,"children":[],"decl_id":null,"docs":" Creates an iterator that yields an element exactly once.","sig":null,"attributes":[{"value":"stable(feature = \"iter_once\", since = \"1.2.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1056021,"byte_end":1056070,"line_start":279,"line_end":279,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":1816},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1059145,"byte_end":1059157,"line_start":107,"line_end":107,"column_start":11,"column_end":23},"name":"FromIterator","qualname":"::iter::traits::FromIterator","value":"FromIterator<A>:  Sized","parent":null,"children":[{"krate":0,"index":1817}],"decl_id":null,"docs":" Conversion from an `Iterator`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1058942,"byte_end":1058987,"line_start":104,"line_end":104,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"a collection of type `{Self}` cannot be built from an iterator over elements of type `{A}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1058988,"byte_end":1059134,"line_start":105,"line_end":106,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1817},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1059681,"byte_end":1059690,"line_start":128,"line_end":128,"column_start":8,"column_end":17},"name":"from_iter","qualname":"::iter::traits::FromIterator::from_iter","value":"fn <T> (iter: T) -> Self","parent":{"krate":0,"index":1816},"children":[],"decl_id":null,"docs":" Conversion from an `Iterator`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1058942,"byte_end":1058987,"line_start":104,"line_end":104,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"a collection of type `{Self}` cannot be built from an iterator over elements of type `{A}`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1058988,"byte_end":1059134,"line_start":105,"line_end":106,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":1818},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1062050,"byte_end":1062062,"line_start":217,"line_end":217,"column_start":11,"column_end":23},"name":"IntoIterator","qualname":"::iter::traits::IntoIterator","value":"IntoIterator","parent":null,"children":[{"krate":0,"index":1819},{"krate":0,"index":1820},{"krate":0,"index":1821}],"decl_id":null,"docs":" Conversion into an `Iterator`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1061994,"byte_end":1062039,"line_start":216,"line_end":216,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1819},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1062178,"byte_end":1062182,"line_start":220,"line_end":220,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::traits::IntoIterator::Item","value":"type Item;","parent":{"krate":0,"index":1818},"children":[],"decl_id":null,"docs":" The type of the elements being iterated over.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1062123,"byte_end":1062168,"line_start":219,"line_end":219,"column_start":5,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":1820},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1062301,"byte_end":1062309,"line_start":224,"line_end":224,"column_start":10,"column_end":18},"name":"IntoIter","qualname":"::iter::traits::IntoIterator::IntoIter","value":"type IntoIter: Iterator<Item=Self::Item>;","parent":{"krate":0,"index":1818},"children":[],"decl_id":null,"docs":" Which kind of iterator are we turning this into?\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1062246,"byte_end":1062291,"line_start":223,"line_end":223,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1821},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1062888,"byte_end":1062897,"line_start":246,"line_end":246,"column_start":8,"column_end":17},"name":"into_iter","qualname":"::iter::traits::IntoIterator::into_iter","value":"fn (self) -> Self::IntoIter","parent":{"krate":0,"index":1818},"children":[],"decl_id":null,"docs":" Conversion into an `Iterator`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1061994,"byte_end":1062039,"line_start":216,"line_end":216,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":1826},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1065320,"byte_end":1065326,"line_start":329,"line_end":329,"column_start":11,"column_end":17},"name":"Extend","qualname":"::iter::traits::Extend","value":"Extend<A>","parent":null,"children":[{"krate":0,"index":1827}],"decl_id":null,"docs":" Extend a collection with the contents of an iterator.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1065264,"byte_end":1065309,"line_start":328,"line_end":328,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1827},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1065904,"byte_end":1065910,"line_start":350,"line_end":350,"column_start":8,"column_end":14},"name":"extend","qualname":"::iter::traits::Extend::extend","value":"fn <T> (&mut self, iter: T) -> ()","parent":{"krate":0,"index":1826},"children":[],"decl_id":null,"docs":" Extend a collection with the contents of an iterator.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1065264,"byte_end":1065309,"line_start":328,"line_end":328,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":1828},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1067192,"byte_end":1067211,"line_start":388,"line_end":388,"column_start":11,"column_end":30},"name":"DoubleEndedIterator","qualname":"::iter::traits::DoubleEndedIterator","value":"DoubleEndedIterator:  Iterator","parent":null,"children":[{"krate":0,"index":1829},{"krate":0,"index":1830},{"krate":0,"index":1831}],"decl_id":null,"docs":" An iterator able to yield elements from both ends.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1067136,"byte_end":1067181,"line_start":387,"line_end":387,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1829},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1068077,"byte_end":1068086,"line_start":416,"line_end":416,"column_start":8,"column_end":17},"name":"next_back","qualname":"::iter::traits::DoubleEndedIterator::next_back","value":"fn (&mut self) -> Option<Self::Item>","parent":{"krate":0,"index":1828},"children":[],"decl_id":null,"docs":" An iterator able to yield elements from both ends.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1067136,"byte_end":1067181,"line_start":387,"line_end":387,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1830},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1069970,"byte_end":1069975,"line_start":473,"line_end":473,"column_start":8,"column_end":13},"name":"rfold","qualname":"::iter::traits::DoubleEndedIterator::rfold","value":"fn <B, F> (mut self, mut accum: B, mut f: F) -> B","parent":{"krate":0,"index":1828},"children":[],"decl_id":null,"docs":" An iterator able to yield elements from both ends.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1067136,"byte_end":1067181,"line_start":387,"line_end":387,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1831},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1071869,"byte_end":1071874,"line_start":530,"line_end":530,"column_start":8,"column_end":13},"name":"rfind","qualname":"::iter::traits::DoubleEndedIterator::rfind","value":"fn <P> (&mut self, mut predicate: P) -> Option<Self::Item>","parent":{"krate":0,"index":1828},"children":[],"decl_id":null,"docs":" An iterator able to yield elements from both ends.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1067136,"byte_end":1067181,"line_start":387,"line_end":387,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":1834},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1074402,"byte_end":1074419,"line_start":616,"line_end":616,"column_start":11,"column_end":28},"name":"ExactSizeIterator","qualname":"::iter::traits::ExactSizeIterator","value":"ExactSizeIterator:  Iterator","parent":null,"children":[{"krate":0,"index":1835},{"krate":0,"index":1836}],"decl_id":null,"docs":" An iterator that knows its exact length.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1074346,"byte_end":1074391,"line_start":615,"line_end":615,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1835},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1075269,"byte_end":1075272,"line_start":642,"line_end":642,"column_start":8,"column_end":11},"name":"len","qualname":"::iter::traits::ExactSizeIterator::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":1834},"children":[],"decl_id":null,"docs":" An iterator that knows its exact length.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1074346,"byte_end":1074391,"line_start":615,"line_end":615,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1836},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1076287,"byte_end":1076295,"line_start":674,"line_end":674,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::iter::traits::ExactSizeIterator::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":1834},"children":[],"decl_id":null,"docs":" An iterator that knows its exact length.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1074346,"byte_end":1074391,"line_start":615,"line_end":615,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":1840},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1077207,"byte_end":1077210,"line_start":700,"line_end":700,"column_start":11,"column_end":14},"name":"Sum","qualname":"::iter::traits::Sum","value":"Sum<A = Self>:  Sized","parent":null,"children":[{"krate":0,"index":1841}],"decl_id":null,"docs":" Trait to represent types that can be created by summing up an iterator.","sig":null,"attributes":[{"value":"stable(feature = \"iter_arith_traits\", since = \"1.12.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1077138,"byte_end":1077196,"line_start":699,"line_end":699,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1841},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1077413,"byte_end":1077416,"line_start":704,"line_end":704,"column_start":8,"column_end":11},"name":"sum","qualname":"::iter::traits::Sum::sum","value":"fn <I> (iter: I) -> Self","parent":{"krate":0,"index":1840},"children":[],"decl_id":null,"docs":" Trait to represent types that can be created by summing up an iterator.","sig":null,"attributes":[{"value":"stable(feature = \"iter_arith_traits\", since = \"1.12.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1077138,"byte_end":1077196,"line_start":699,"line_end":699,"column_start":1,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":1842},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1078121,"byte_end":1078128,"line_start":719,"line_end":719,"column_start":11,"column_end":18},"name":"Product","qualname":"::iter::traits::Product","value":"Product<A = Self>:  Sized","parent":null,"children":[{"krate":0,"index":1843}],"decl_id":null,"docs":" Trait to represent types that can be created by multiplying elements of an\n iterator.","sig":null,"attributes":[{"value":"stable(feature = \"iter_arith_traits\", since = \"1.12.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1078052,"byte_end":1078110,"line_start":718,"line_end":718,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1843},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1078330,"byte_end":1078337,"line_start":723,"line_end":723,"column_start":8,"column_end":15},"name":"product","qualname":"::iter::traits::Product::product","value":"fn <I> (iter: I) -> Self","parent":{"krate":0,"index":1842},"children":[],"decl_id":null,"docs":" Trait to represent types that can be created by multiplying elements of an\n iterator.","sig":null,"attributes":[{"value":"stable(feature = \"iter_arith_traits\", since = \"1.12.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1078052,"byte_end":1078110,"line_start":718,"line_end":718,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1848},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1081327,"byte_end":1081334,"line_start":818,"line_end":818,"column_start":12,"column_end":19},"name":"process","qualname":"<ResultShunt<I, E>>::process","value":"fn <F, U> (iter: I, mut f: F) -> Result<U, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1858},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1084594,"byte_end":1084607,"line_start":918,"line_end":918,"column_start":11,"column_end":24},"name":"FusedIterator","qualname":"::iter::traits::FusedIterator","value":"FusedIterator:  Iterator","parent":null,"children":[],"decl_id":null,"docs":" An iterator that always continues to yield `None` when exhausted.","sig":null,"attributes":[{"value":"unstable(feature = \"fused\", issue = \"35602\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1084536,"byte_end":1084583,"line_start":917,"line_end":917,"column_start":1,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":1860},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1085554,"byte_end":1085564,"line_start":941,"line_end":941,"column_start":18,"column_end":28},"name":"TrustedLen","qualname":"::iter::traits::TrustedLen","value":"TrustedLen:  Iterator","parent":null,"children":[],"decl_id":null,"docs":" An iterator that reports an accurate length using size_hint.","sig":null,"attributes":[{"value":"unstable(feature = \"trusted_len\", issue = \"37572\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1085483,"byte_end":1085536,"line_start":940,"line_end":940,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":16992},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":903438,"byte_end":903441,"line_start":349,"line_end":349,"column_start":12,"column_end":15},"name":"Rev","qualname":"::iter::Rev","value":"Rev {  }","parent":null,"children":[{"krate":0,"index":2147495198}],"decl_id":null,"docs":" A double-ended iterator with the direction inverted.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":903307,"byte_end":903380,"line_start":347,"line_end":347,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":903381,"byte_end":903426,"line_start":348,"line_end":348,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":16997},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":905767,"byte_end":905773,"line_start":432,"line_end":432,"column_start":12,"column_end":18},"name":"Cloned","qualname":"::iter::Cloned","value":"Cloned {  }","parent":null,"children":[{"krate":0,"index":2147495202}],"decl_id":null,"docs":" An iterator that clones the elements of an underlying iterator.","sig":null,"attributes":[{"value":"stable(feature = \"iter_cloned\", since = \"1.1.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":905606,"byte_end":905657,"line_start":429,"line_end":429,"column_start":1,"column_end":52}},{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":905658,"byte_end":905731,"line_start":430,"line_end":430,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":17002},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":908342,"byte_end":908347,"line_start":530,"line_end":530,"column_start":12,"column_end":17},"name":"Cycle","qualname":"::iter::Cycle","value":"Cycle {  }","parent":null,"children":[{"krate":0,"index":2147495206},{"krate":0,"index":2147495207}],"decl_id":null,"docs":" An iterator that repeats endlessly.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":908211,"byte_end":908284,"line_start":528,"line_end":528,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":908285,"byte_end":908330,"line_start":529,"line_end":529,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17007},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":909645,"byte_end":909651,"line_start":573,"line_end":573,"column_start":12,"column_end":18},"name":"StepBy","qualname":"::iter::StepBy","value":"StepBy {  }","parent":null,"children":[{"krate":0,"index":2147495211},{"krate":0,"index":2147495212},{"krate":0,"index":2147495213}],"decl_id":null,"docs":" An iterator for stepping iterators by a custom amount.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":909404,"byte_end":909477,"line_start":568,"line_end":568,"column_start":1,"column_end":74}},{"value":"unstable(feature = \"iterator_step_by\",\n           reason = \"unstable replacement of Range::step_by\",\n           issue = \"27741\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":909478,"byte_end":909609,"line_start":569,"line_end":571,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":17012},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":911231,"byte_end":911236,"line_start":625,"line_end":625,"column_start":12,"column_end":17},"name":"Chain","qualname":"::iter::Chain","value":"Chain {  }","parent":null,"children":[{"krate":0,"index":2147495217},{"krate":0,"index":2147495218},{"krate":0,"index":2147495219}],"decl_id":null,"docs":" An iterator that strings two iterators together.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":911100,"byte_end":911173,"line_start":623,"line_end":623,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":911174,"byte_end":911219,"line_start":624,"line_end":624,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17022},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":917317,"byte_end":917320,"line_start":838,"line_end":838,"column_start":12,"column_end":15},"name":"Zip","qualname":"::iter::Zip","value":"Zip {  }","parent":null,"children":[{"krate":0,"index":2147495229},{"krate":0,"index":2147495230},{"krate":0,"index":2147495231},{"krate":0,"index":2147495232}],"decl_id":null,"docs":" An iterator that iterates two other iterators simultaneously.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":917186,"byte_end":917259,"line_start":836,"line_end":836,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":917260,"byte_end":917305,"line_start":837,"line_end":837,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1928},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":918194,"byte_end":918198,"line_start":876,"line_end":876,"column_start":10,"column_end":14},"name":"Item","qualname":"::iter::ZipImpl::Item","value":"type Item;","parent":{"krate":0,"index":1927},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1929},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":918207,"byte_end":918210,"line_start":877,"line_end":877,"column_start":8,"column_end":11},"name":"new","qualname":"::iter::ZipImpl::new","value":"fn (a: A, b: B) -> Self","parent":{"krate":0,"index":1927},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1930},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":918239,"byte_end":918243,"line_start":878,"line_end":878,"column_start":8,"column_end":12},"name":"next","qualname":"::iter::ZipImpl::next","value":"fn (&mut self) -> Option<Self::Item>","parent":{"krate":0,"index":1927},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1931},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":918285,"byte_end":918294,"line_start":879,"line_end":879,"column_start":8,"column_end":17},"name":"size_hint","qualname":"::iter::ZipImpl::size_hint","value":"fn (&self) -> (usize, Option<usize>)","parent":{"krate":0,"index":1927},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1932},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":918336,"byte_end":918345,"line_start":880,"line_end":880,"column_start":8,"column_end":17},"name":"next_back","qualname":"::iter::ZipImpl::next_back","value":"fn (&mut self) -> Option<Self::Item>","parent":{"krate":0,"index":1927},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17027},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":924865,"byte_end":924868,"line_start":1103,"line_end":1103,"column_start":12,"column_end":15},"name":"Map","qualname":"::iter::Map","value":"Map {  }","parent":null,"children":[{"krate":0,"index":2147495239},{"krate":0,"index":2147495240}],"decl_id":null,"docs":" An iterator that maps the values of `iter` with `f`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":924717,"byte_end":924790,"line_start":1100,"line_end":1100,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":924791,"byte_end":924836,"line_start":1101,"line_end":1101,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17030},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":927514,"byte_end":927520,"line_start":1200,"line_end":1200,"column_start":12,"column_end":18},"name":"Filter","qualname":"::iter::Filter","value":"Filter {  }","parent":null,"children":[{"krate":0,"index":2147495245},{"krate":0,"index":2147495246}],"decl_id":null,"docs":" An iterator that filters the elements of `iter` with `predicate`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":927366,"byte_end":927439,"line_start":1197,"line_end":1197,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":927440,"byte_end":927485,"line_start":1198,"line_end":1198,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17033},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":930883,"byte_end":930892,"line_start":1308,"line_end":1308,"column_start":12,"column_end":21},"name":"FilterMap","qualname":"::iter::FilterMap","value":"FilterMap {  }","parent":null,"children":[{"krate":0,"index":2147495251},{"krate":0,"index":2147495252}],"decl_id":null,"docs":" An iterator that uses `f` to both filter and map elements from `iter`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":930735,"byte_end":930808,"line_start":1305,"line_end":1305,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":930809,"byte_end":930854,"line_start":1306,"line_end":1306,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17036},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":933368,"byte_end":933377,"line_start":1396,"line_end":1396,"column_start":12,"column_end":21},"name":"Enumerate","qualname":"::iter::Enumerate","value":"Enumerate {  }","parent":null,"children":[{"krate":0,"index":2147495257},{"krate":0,"index":2147495258}],"decl_id":null,"docs":" An iterator that yields the current count and the element during iteration.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":933237,"byte_end":933310,"line_start":1394,"line_end":1394,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":933311,"byte_end":933356,"line_start":1395,"line_end":1395,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17041},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":937227,"byte_end":937235,"line_start":1531,"line_end":1531,"column_start":12,"column_end":20},"name":"Peekable","qualname":"::iter::Peekable","value":"Peekable {  }","parent":null,"children":[{"krate":0,"index":2147495262},{"krate":0,"index":2147495263}],"decl_id":null,"docs":" An iterator with a `peek()` that returns an optional reference to the next\n element.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":937096,"byte_end":937169,"line_start":1529,"line_end":1529,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":937170,"byte_end":937215,"line_start":1530,"line_end":1530,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2020},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":941091,"byte_end":941095,"line_start":1656,"line_end":1656,"column_start":12,"column_end":16},"name":"peek","qualname":"<Peekable<I>>::peek","value":"fn (&mut self) -> Option<&I::Item>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17046},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":941814,"byte_end":941823,"line_start":1678,"line_end":1678,"column_start":12,"column_end":21},"name":"SkipWhile","qualname":"::iter::SkipWhile","value":"SkipWhile {  }","parent":null,"children":[{"krate":0,"index":2147495267},{"krate":0,"index":2147495268},{"krate":0,"index":2147495269}],"decl_id":null,"docs":" An iterator that rejects elements while `predicate` is true.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":941666,"byte_end":941739,"line_start":1675,"line_end":1675,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":941740,"byte_end":941785,"line_start":1676,"line_end":1676,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17049},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":943744,"byte_end":943753,"line_start":1745,"line_end":1745,"column_start":12,"column_end":21},"name":"TakeWhile","qualname":"::iter::TakeWhile","value":"TakeWhile {  }","parent":null,"children":[{"krate":0,"index":2147495274},{"krate":0,"index":2147495275},{"krate":0,"index":2147495276}],"decl_id":null,"docs":" An iterator that only accepts elements while `predicate` is true.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":943596,"byte_end":943669,"line_start":1742,"line_end":1742,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":943670,"byte_end":943715,"line_start":1743,"line_end":1743,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17052},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":945408,"byte_end":945412,"line_start":1804,"line_end":1804,"column_start":12,"column_end":16},"name":"Skip","qualname":"::iter::Skip","value":"Skip {  }","parent":null,"children":[{"krate":0,"index":2147495281},{"krate":0,"index":2147495282}],"decl_id":null,"docs":" An iterator that skips over `n` elements of `iter`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":945277,"byte_end":945350,"line_start":1802,"line_end":1802,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":945351,"byte_end":945396,"line_start":1803,"line_end":1803,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17057},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":948267,"byte_end":948271,"line_start":1911,"line_end":1911,"column_start":12,"column_end":16},"name":"Take","qualname":"::iter::Take","value":"Take {  }","parent":null,"children":[{"krate":0,"index":2147495286},{"krate":0,"index":2147495287}],"decl_id":null,"docs":" An iterator that only iterates over the first `n` iterations of `iter`.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":948136,"byte_end":948209,"line_start":1909,"line_end":1909,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":948210,"byte_end":948255,"line_start":1910,"line_end":1910,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17062},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":949911,"byte_end":949915,"line_start":1975,"line_end":1975,"column_start":12,"column_end":16},"name":"Scan","qualname":"::iter::Scan","value":"Scan {  }","parent":null,"children":[{"krate":0,"index":2147495291},{"krate":0,"index":2147495292},{"krate":0,"index":2147495293}],"decl_id":null,"docs":" An iterator to maintain state while iterating another iterator.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":949763,"byte_end":949836,"line_start":1972,"line_end":1972,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":949837,"byte_end":949882,"line_start":1973,"line_end":1973,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17065},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":951269,"byte_end":951276,"line_start":2021,"line_end":2021,"column_start":12,"column_end":19},"name":"FlatMap","qualname":"::iter::FlatMap","value":"FlatMap {  }","parent":null,"children":[{"krate":0,"index":2147495300},{"krate":0,"index":2147495301},{"krate":0,"index":2147495302},{"krate":0,"index":2147495303}],"decl_id":null,"docs":" An iterator that maps each element to an iterator, and yields the elements\n of the produced iterators.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":951121,"byte_end":951194,"line_start":2018,"line_end":2018,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":951195,"byte_end":951240,"line_start":2019,"line_end":2019,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17068},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":954965,"byte_end":954969,"line_start":2131,"line_end":2131,"column_start":12,"column_end":16},"name":"Fuse","qualname":"::iter::Fuse","value":"Fuse {  }","parent":null,"children":[{"krate":0,"index":2147495310},{"krate":0,"index":2147495311}],"decl_id":null,"docs":" An iterator that yields `None` forever after the underlying iterator\n yields `None` once.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":954834,"byte_end":954907,"line_start":2129,"line_end":2129,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":954908,"byte_end":954953,"line_start":2130,"line_end":2130,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17073},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":959299,"byte_end":959306,"line_start":2316,"line_end":2316,"column_start":12,"column_end":19},"name":"Inspect","qualname":"::iter::Inspect","value":"Inspect {  }","parent":null,"children":[{"krate":0,"index":2147495315},{"krate":0,"index":2147495316}],"decl_id":null,"docs":" An iterator that calls a function with a reference to each element before\n yielding it.","sig":null,"attributes":[{"value":"must_use = \"iterator adaptors are lazy and do nothing unless consumed\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":959151,"byte_end":959224,"line_start":2313,"line_end":2313,"column_start":1,"column_end":74}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":959225,"byte_end":959270,"line_start":2314,"line_end":2314,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":2116},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"option","qualname":"::option","value":"src/libcore/option.rs","parent":null,"children":[{"krate":0,"index":2120},{"krate":0,"index":2123},{"krate":0,"index":17076},{"krate":0,"index":17095},{"krate":0,"index":17094},{"krate":0,"index":17091},{"krate":0,"index":17085},{"krate":0,"index":17083},{"krate":0,"index":17081},{"krate":0,"index":17079},{"krate":0,"index":17077},{"krate":0,"index":2124},{"krate":0,"index":2147},{"krate":0,"index":2149},{"krate":0,"index":2151},{"krate":0,"index":2153},{"krate":0,"index":2154},{"krate":0,"index":2156},{"krate":0,"index":2160},{"krate":0,"index":2164},{"krate":0,"index":2168},{"krate":0,"index":17097},{"krate":0,"index":17100},{"krate":0,"index":17098},{"krate":0,"index":2170},{"krate":0,"index":2174},{"krate":0,"index":2176},{"krate":0,"index":2177},{"krate":0,"index":2178},{"krate":0,"index":17102},{"krate":0,"index":17103},{"krate":0,"index":2179},{"krate":0,"index":2183},{"krate":0,"index":2185},{"krate":0,"index":2186},{"krate":0,"index":2187},{"krate":0,"index":2188},{"krate":0,"index":17105},{"krate":0,"index":17106},{"krate":0,"index":2190},{"krate":0,"index":2194},{"krate":0,"index":2196},{"krate":0,"index":2197},{"krate":0,"index":2198},{"krate":0,"index":17108},{"krate":0,"index":17111},{"krate":0,"index":17109},{"krate":0,"index":2199},{"krate":0,"index":2203},{"krate":0,"index":2205},{"krate":0,"index":2206},{"krate":0,"index":2207},{"krate":0,"index":2208},{"krate":0,"index":17113},{"krate":0,"index":17127},{"krate":0,"index":17126},{"krate":0,"index":17124},{"krate":0,"index":17122},{"krate":0,"index":17120},{"krate":0,"index":17118},{"krate":0,"index":17116},{"krate":0,"index":17114},{"krate":0,"index":2214}],"decl_id":null,"docs":" Optional values.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1090649,"byte_end":1090695,"line_start":146,"line_end":146,"column_start":1,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147495321},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1091331,"byte_end":1091335,"line_start":162,"line_end":162,"column_start":5,"column_end":9},"name":"None","qualname":"::option::Option::None","value":"Option::None","parent":{"krate":0,"index":17076},"children":[],"decl_id":null,"docs":" No value\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1091281,"byte_end":1091326,"line_start":161,"line_end":161,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147495322},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1091414,"byte_end":1091418,"line_start":165,"line_end":165,"column_start":5,"column_end":9},"name":"Some","qualname":"::option::Option::Some","value":"Option::Some(T)","parent":{"krate":0,"index":17076},"children":[],"decl_id":null,"docs":" Some value `T`\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1091364,"byte_end":1091409,"line_start":164,"line_end":164,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":17076},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1091248,"byte_end":1091254,"line_start":159,"line_end":159,"column_start":10,"column_end":16},"name":"Option","qualname":"::option::Option","value":"Option::{None, Some}","parent":null,"children":[{"krate":0,"index":2147495321},{"krate":0,"index":2147495322}],"decl_id":null,"docs":" The `Option` type. See [the module level documentation](index.html) for more.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1091193,"byte_end":1091238,"line_start":158,"line_end":158,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1091239,"byte_end":1091470,"line_start":159,"line_end":166,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1091239,"byte_end":1091470,"line_start":159,"line_end":166,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":2125},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1092258,"byte_end":1092265,"line_start":192,"line_end":192,"column_start":12,"column_end":19},"name":"is_some","qualname":"<Option<T>>::is_some","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2126},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1092770,"byte_end":1092777,"line_start":214,"line_end":214,"column_start":12,"column_end":19},"name":"is_none","qualname":"<Option<T>>::is_none","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2127},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1094049,"byte_end":1094055,"line_start":244,"line_end":244,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<Option<T>>::as_ref","value":"fn (&self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2128},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1094524,"byte_end":1094530,"line_start":265,"line_end":265,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<Option<T>>::as_mut","value":"fn (&mut self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2129},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1095512,"byte_end":1095518,"line_start":299,"line_end":299,"column_start":12,"column_end":18},"name":"expect","qualname":"<Option<T>>::expect","value":"fn (self, msg: &str) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2130},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1096397,"byte_end":1096403,"line_start":332,"line_end":332,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<Option<T>>::unwrap","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2131},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1096854,"byte_end":1096863,"line_start":349,"line_end":349,"column_start":12,"column_end":21},"name":"unwrap_or","qualname":"<Option<T>>::unwrap_or","value":"fn (self, def: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2132},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1097307,"byte_end":1097321,"line_start":367,"line_end":367,"column_start":12,"column_end":26},"name":"unwrap_or_else","qualname":"<Option<T>>::unwrap_or_else","value":"fn <F> (self, f: F) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2133},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1098349,"byte_end":1098352,"line_start":396,"line_end":396,"column_start":12,"column_end":15},"name":"map","qualname":"<Option<T>>::map","value":"fn <U, F> (self, f: F) -> Option<U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2134},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1098990,"byte_end":1098996,"line_start":419,"line_end":419,"column_start":12,"column_end":18},"name":"map_or","qualname":"<Option<T>>::map_or","value":"fn <U, F> (self, default: U, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2135},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1099686,"byte_end":1099697,"line_start":444,"line_end":444,"column_start":12,"column_end":23},"name":"map_or_else","qualname":"<Option<T>>::map_or_else","value":"fn <U, D, F> (self, default: D, f: F) -> U","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2136},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1100555,"byte_end":1100560,"line_start":471,"line_end":471,"column_start":12,"column_end":17},"name":"ok_or","qualname":"<Option<T>>::ok_or","value":"fn <E> (self, err: E) -> Result<T, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2137},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1101402,"byte_end":1101412,"line_start":498,"line_end":498,"column_start":12,"column_end":22},"name":"ok_or_else","qualname":"<Option<T>>::ok_or_else","value":"fn <E, F> (self, err: F) -> Result<T, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2138},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1102107,"byte_end":1102111,"line_start":522,"line_end":522,"column_start":12,"column_end":16},"name":"iter","qualname":"<Option<T>>::iter","value":"fn (&self) -> Iter<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2139},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1102653,"byte_end":1102661,"line_start":543,"line_end":543,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<Option<T>>::iter_mut","value":"fn (&mut self) -> IterMut<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2140},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1103641,"byte_end":1103644,"line_start":576,"line_end":576,"column_start":12,"column_end":15},"name":"and","qualname":"<Option<T>>::and","value":"fn <U> (self, optb: Option<U>) -> Option<U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2141},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1104498,"byte_end":1104506,"line_start":603,"line_end":603,"column_start":12,"column_end":20},"name":"and_then","qualname":"<Option<T>>::and_then","value":"fn <U, F> (self, f: F) -> Option<U>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2142},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1105248,"byte_end":1105250,"line_start":633,"line_end":633,"column_start":12,"column_end":14},"name":"or","qualname":"<Option<T>>::or","value":"fn (self, optb: Option<T>) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2143},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1105930,"byte_end":1105937,"line_start":655,"line_end":655,"column_start":12,"column_end":19},"name":"or_else","qualname":"<Option<T>>::or_else","value":"fn <F> (self, f: F) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2144},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1106815,"byte_end":1106828,"line_start":687,"line_end":687,"column_start":12,"column_end":25},"name":"get_or_insert","qualname":"<Option<T>>::get_or_insert","value":"fn (&mut self, v: T) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2145},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1107590,"byte_end":1107608,"line_start":720,"line_end":720,"column_start":12,"column_end":30},"name":"get_or_insert_with","qualname":"<Option<T>>::get_or_insert_with","value":"fn <F> (&mut self, f: F) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2146},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1108444,"byte_end":1108448,"line_start":753,"line_end":753,"column_start":12,"column_end":16},"name":"take","qualname":"<Option<T>>::take","value":"fn (&mut self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2148},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1108929,"byte_end":1108935,"line_start":772,"line_end":772,"column_start":12,"column_end":18},"name":"cloned","qualname":"<Option<&'a T>>::cloned","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2150},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1109491,"byte_end":1109497,"line_start":792,"line_end":792,"column_start":12,"column_end":18},"name":"cloned","qualname":"<Option<&'a mut T>>::cloned","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2152},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1110702,"byte_end":1110719,"line_start":827,"line_end":827,"column_start":12,"column_end":29},"name":"unwrap_or_default","qualname":"<Option<T>>::unwrap_or_default","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17102},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1113849,"byte_end":1113853,"line_start":955,"line_end":955,"column_start":12,"column_end":16},"name":"Iter","qualname":"::option::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":2147495338}],"decl_id":null,"docs":" An iterator over a reference to the [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1113775,"byte_end":1113820,"line_start":953,"line_end":953,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17105},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1115273,"byte_end":1115280,"line_start":1000,"line_end":1000,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::option::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":2147495343}],"decl_id":null,"docs":" An iterator over a mutable reference to the [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1115199,"byte_end":1115244,"line_start":998,"line_end":998,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17108},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1116555,"byte_end":1116563,"line_start":1037,"line_end":1037,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::option::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":2147495348}],"decl_id":null,"docs":" An iterator over the value in [`Some`] variant of an [`Option`].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1116498,"byte_end":1116543,"line_start":1036,"line_end":1036,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17113},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1119875,"byte_end":1119884,"line_start":1133,"line_end":1133,"column_start":12,"column_end":21},"name":"NoneError","qualname":"::option::NoneError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type that results from applying the try operator (`?`) to a `None` value. If you wish\n to allow `x?` (where `x` is an `Option<T>`) to be converted into your error type, you can\n implement `impl From<NoneError>` for `YourErrorType`. In that case, `x?` within a function that\n returns `Result<_, YourErrorType>` will translate a `None` value into an `Err` result.\n","sig":null,"attributes":[{"value":"unstable(feature = \"try_trait\", issue = \"42327\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1119744,"byte_end":1119795,"line_start":1131,"line_end":1131,"column_start":1,"column_end":52}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1119864,"byte_end":1119885,"line_start":1133,"line_end":1133,"column_start":1,"column_end":22}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1119864,"byte_end":1119885,"line_start":1133,"line_end":1133,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":2220},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"raw","qualname":"::raw","value":"src/libcore/raw.rs","parent":null,"children":[{"krate":0,"index":17129},{"krate":0,"index":17132},{"krate":0,"index":17130}],"decl_id":null,"docs":" Contains struct definitions for the layout of compiler built-in types.","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1120691,"byte_end":1120714,"line_start":11,"line_end":11,"column_start":1,"column_end":24}},{"value":"unstable(feature = \"raw\", issue = \"27751\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1120715,"byte_end":1120761,"line_start":12,"line_end":12,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":17129},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1123540,"byte_end":1123551,"line_start":96,"line_end":96,"column_start":12,"column_end":23},"name":"TraitObject","qualname":"::raw::TraitObject","value":"TraitObject { data, vtable }","parent":null,"children":[{"krate":0,"index":2147495354},{"krate":0,"index":2147495355}],"decl_id":null,"docs":" The representation of a trait object like `&SomeTrait`.","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1123455,"byte_end":1123465,"line_start":93,"line_end":93,"column_start":1,"column_end":11}},{"value":"allow(missing_debug_implementations)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1123489,"byte_end":1123528,"line_start":95,"line_end":95,"column_start":1,"column_end":40}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1123529,"byte_end":1123603,"line_start":96,"line_end":99,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":2147495354},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1123562,"byte_end":1123566,"line_start":97,"line_end":97,"column_start":9,"column_end":13},"name":"data","qualname":"::raw::TraitObject::data","value":"*mut ()","parent":{"krate":0,"index":17129},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2147495355},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,97,119,46,114,115],"byte_start":1123585,"byte_end":1123591,"line_start":98,"line_end":98,"column_start":9,"column_end":15},"name":"vtable","qualname":"::raw::TraitObject::vtable","value":"*mut ()","parent":{"krate":0,"index":17129},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2221},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"result","qualname":"::result","value":"src/libcore/result.rs","parent":null,"children":[{"krate":0,"index":2222},{"krate":0,"index":2226},{"krate":0,"index":2227},{"krate":0,"index":17133},{"krate":0,"index":17152},{"krate":0,"index":17151},{"krate":0,"index":17148},{"krate":0,"index":17142},{"krate":0,"index":17140},{"krate":0,"index":17138},{"krate":0,"index":17136},{"krate":0,"index":17134},{"krate":0,"index":2228},{"krate":0,"index":2245},{"krate":0,"index":2248},{"krate":0,"index":2251},{"krate":0,"index":2253},{"krate":0,"index":2254},{"krate":0,"index":2258},{"krate":0,"index":2262},{"krate":0,"index":17154},{"krate":0,"index":17155},{"krate":0,"index":2266},{"krate":0,"index":2270},{"krate":0,"index":2272},{"krate":0,"index":2273},{"krate":0,"index":2274},{"krate":0,"index":2275},{"krate":0,"index":17157},{"krate":0,"index":17158},{"krate":0,"index":2277},{"krate":0,"index":2281},{"krate":0,"index":2283},{"krate":0,"index":2284},{"krate":0,"index":2285},{"krate":0,"index":17160},{"krate":0,"index":17163},{"krate":0,"index":17161},{"krate":0,"index":2286},{"krate":0,"index":2290},{"krate":0,"index":2292},{"krate":0,"index":2293},{"krate":0,"index":2294},{"krate":0,"index":2295},{"krate":0,"index":2302}],"decl_id":null,"docs":" Error handling with the `Result` type.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1131441,"byte_end":1131487,"line_start":241,"line_end":241,"column_start":1,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147495356},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1132049,"byte_end":1132051,"line_start":259,"line_end":259,"column_start":5,"column_end":7},"name":"Ok","qualname":"::result::Result::Ok","value":"Result::Ok(T)","parent":{"krate":0,"index":17133},"children":[],"decl_id":null,"docs":" Contains the success value\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1131999,"byte_end":1132044,"line_start":258,"line_end":258,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147495358},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1132190,"byte_end":1132193,"line_start":263,"line_end":263,"column_start":5,"column_end":8},"name":"Err","qualname":"::result::Result::Err","value":"Result::Err(E)","parent":{"krate":0,"index":17133},"children":[],"decl_id":null,"docs":" Contains the error value\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1132140,"byte_end":1132185,"line_start":262,"line_end":262,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":17133},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1131945,"byte_end":1131951,"line_start":256,"line_end":256,"column_start":10,"column_end":16},"name":"Result","qualname":"::result::Result","value":"Result::{Ok, Err}","parent":null,"children":[{"krate":0,"index":2147495356},{"krate":0,"index":2147495358}],"decl_id":null,"docs":" `Result` is a type that represents either success ([`Ok`]) or failure ([`Err`]).","sig":null,"attributes":[{"value":"must_use","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1131878,"byte_end":1131889,"line_start":254,"line_end":254,"column_start":1,"column_end":12}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1131890,"byte_end":1131935,"line_start":255,"line_end":255,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1131936,"byte_end":1132245,"line_start":256,"line_end":264,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1131936,"byte_end":1132245,"line_start":256,"line_end":264,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":2229},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1133098,"byte_end":1133103,"line_start":292,"line_end":292,"column_start":12,"column_end":17},"name":"is_ok","qualname":"<Result<T, E>>::is_ok","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2230},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1133671,"byte_end":1133677,"line_start":316,"line_end":316,"column_start":12,"column_end":18},"name":"is_err","qualname":"<Result<T, E>>::is_err","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2231},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1134488,"byte_end":1134490,"line_start":344,"line_end":344,"column_start":12,"column_end":14},"name":"ok","qualname":"<Result<T, E>>::ok","value":"fn (self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2232},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1135207,"byte_end":1135210,"line_start":371,"line_end":371,"column_start":12,"column_end":15},"name":"err","qualname":"<Result<T, E>>::err","value":"fn (self) -> Option<E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2233},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1136058,"byte_end":1136064,"line_start":400,"line_end":400,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<Result<T, E>>::as_ref","value":"fn (&self) -> Result<&T, &E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2234},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1136826,"byte_end":1136832,"line_start":431,"line_end":431,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<Result<T, E>>::as_mut","value":"fn (&mut self) -> Result<&mut T, &mut E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2235},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1137945,"byte_end":1137948,"line_start":466,"line_end":466,"column_start":12,"column_end":15},"name":"map","qualname":"<Result<T, E>>::map","value":"fn <U, F> (self, op: F) -> Result<U, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2236},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1138914,"byte_end":1138921,"line_start":497,"line_end":497,"column_start":12,"column_end":19},"name":"map_err","qualname":"<Result<T, E>>::map_err","value":"fn <F, O> (self, op: O) -> Result<T, F>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2237},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1139816,"byte_end":1139820,"line_start":527,"line_end":527,"column_start":12,"column_end":16},"name":"iter","qualname":"<Result<T, E>>::iter","value":"fn (&self) -> Iter<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2238},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1140553,"byte_end":1140561,"line_start":554,"line_end":554,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<Result<T, E>>::iter_mut","value":"fn (&mut self) -> IterMut<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2239},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1141849,"byte_end":1141852,"line_start":590,"line_end":590,"column_start":12,"column_end":15},"name":"and","qualname":"<Result<T, E>>::and","value":"fn <U> (self, res: Result<U, E>) -> Result<U, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2240},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1142795,"byte_end":1142803,"line_start":619,"line_end":619,"column_start":12,"column_end":20},"name":"and_then","qualname":"<Result<T, E>>::and_then","value":"fn <U, F> (self, op: F) -> Result<U, E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2241},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1143883,"byte_end":1143885,"line_start":654,"line_end":654,"column_start":12,"column_end":14},"name":"or","qualname":"<Result<T, E>>::or","value":"fn <F> (self, res: Result<T, F>) -> Result<T, F>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2242},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1144817,"byte_end":1144824,"line_start":683,"line_end":683,"column_start":12,"column_end":19},"name":"or_else","qualname":"<Result<T, E>>::or_else","value":"fn <F, O> (self, op: O) -> Result<T, F>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2243},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1145547,"byte_end":1145556,"line_start":710,"line_end":710,"column_start":12,"column_end":21},"name":"unwrap_or","qualname":"<Result<T, E>>::unwrap_or","value":"fn (self, optb: T) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2244},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1146224,"byte_end":1146238,"line_start":735,"line_end":735,"column_start":12,"column_end":26},"name":"unwrap_or_else","qualname":"<Result<T, E>>::unwrap_or_else","value":"fn <F> (self, op: F) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2246},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1147108,"byte_end":1147114,"line_start":769,"line_end":769,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<Result<T, E>>::unwrap","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2247},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1147937,"byte_end":1147943,"line_start":796,"line_end":796,"column_start":12,"column_end":18},"name":"expect","qualname":"<Result<T, E>>::expect","value":"fn (self, msg: &str) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2249},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1148810,"byte_end":1148820,"line_start":829,"line_end":829,"column_start":12,"column_end":22},"name":"unwrap_err","qualname":"<Result<T, E>>::unwrap_err","value":"fn (self) -> E","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2250},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1149629,"byte_end":1149639,"line_start":856,"line_end":856,"column_start":12,"column_end":22},"name":"expect_err","qualname":"<Result<T, E>>::expect_err","value":"fn (self, msg: &str) -> E","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2252},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1150956,"byte_end":1150973,"line_start":894,"line_end":894,"column_start":12,"column_end":29},"name":"unwrap_or_default","qualname":"<Result<T, E>>::unwrap_or_default","value":"fn (self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17154},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1153316,"byte_end":1153320,"line_start":978,"line_end":978,"column_start":12,"column_end":16},"name":"Iter","qualname":"::result::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":2147495379}],"decl_id":null,"docs":" An iterator over a reference to the [`Ok`] variant of a [`Result`].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1153259,"byte_end":1153304,"line_start":977,"line_end":977,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17157},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1154649,"byte_end":1154656,"line_start":1022,"line_end":1022,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::result::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":2147495384}],"decl_id":null,"docs":" An iterator over a mutable reference to the [`Ok`] variant of a [`Result`].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1154592,"byte_end":1154637,"line_start":1021,"line_end":1021,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17160},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1156092,"byte_end":1156100,"line_start":1065,"line_end":1065,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::result::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":2147495389}],"decl_id":null,"docs":" An iterator over the value in a [`Ok`] variant of a [`Result`].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1156035,"byte_end":1156080,"line_start":1064,"line_end":1064,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":2308},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"src/libcore/slice/mod.rs","parent":null,"children":[{"krate":0,"index":2309},{"krate":0,"index":2314},{"krate":0,"index":2315},{"krate":0,"index":2316},{"krate":0,"index":2317},{"krate":0,"index":2318},{"krate":0,"index":2321},{"krate":0,"index":2322},{"krate":0,"index":2325},{"krate":0,"index":2326},{"krate":0,"index":2329},{"krate":0,"index":2330},{"krate":0,"index":2331},{"krate":0,"index":2337},{"krate":0,"index":2338},{"krate":0,"index":2339},{"krate":0,"index":2349},{"krate":0,"index":2377},{"krate":0,"index":2378},{"krate":0,"index":2426},{"krate":0,"index":2427},{"krate":0,"index":2428},{"krate":0,"index":2429},{"krate":0,"index":2476},{"krate":0,"index":2479},{"krate":0,"index":2481},{"krate":0,"index":2482},{"krate":0,"index":2483},{"krate":0,"index":2491},{"krate":0,"index":2499},{"krate":0,"index":2507},{"krate":0,"index":2515},{"krate":0,"index":2523},{"krate":0,"index":2531},{"krate":0,"index":2539},{"krate":0,"index":2547},{"krate":0,"index":2549},{"krate":0,"index":2551},{"krate":0,"index":2555},{"krate":0,"index":2559},{"krate":0,"index":2560},{"krate":0,"index":2561},{"krate":0,"index":2562},{"krate":0,"index":2563},{"krate":0,"index":2564},{"krate":0,"index":2565},{"krate":0,"index":2566},{"krate":0,"index":2568},{"krate":0,"index":2569},{"krate":0,"index":2570},{"krate":0,"index":17165},{"krate":0,"index":17177},{"krate":0,"index":17180},{"krate":0,"index":2573},{"krate":0,"index":2575},{"krate":0,"index":2576},{"krate":0,"index":2577},{"krate":0,"index":2579},{"krate":0,"index":2581},{"krate":0,"index":2582},{"krate":0,"index":2584},{"krate":0,"index":2585},{"krate":0,"index":2586},{"krate":0,"index":17183},{"krate":0,"index":17195},{"krate":0,"index":17198},{"krate":0,"index":2589},{"krate":0,"index":2591},{"krate":0,"index":2592},{"krate":0,"index":2593},{"krate":0,"index":2594},{"krate":0,"index":2598},{"krate":0,"index":2600},{"krate":0,"index":2602},{"krate":0,"index":2604},{"krate":0,"index":2605},{"krate":0,"index":2607},{"krate":0,"index":2609},{"krate":0,"index":2613},{"krate":0,"index":2615},{"krate":0,"index":2617},{"krate":0,"index":2618},{"krate":0,"index":2619},{"krate":0,"index":2621},{"krate":0,"index":2623},{"krate":0,"index":2627},{"krate":0,"index":2629},{"krate":0,"index":17201},{"krate":0,"index":17202},{"krate":0,"index":2630},{"krate":0,"index":2632},{"krate":0,"index":2636},{"krate":0,"index":2638},{"krate":0,"index":2640},{"krate":0,"index":2641},{"krate":0,"index":2642},{"krate":0,"index":2644},{"krate":0,"index":2646},{"krate":0,"index":2650},{"krate":0,"index":2652},{"krate":0,"index":17204},{"krate":0,"index":17205},{"krate":0,"index":2653},{"krate":0,"index":2657},{"krate":0,"index":2658},{"krate":0,"index":2660},{"krate":0,"index":2661},{"krate":0,"index":2663},{"krate":0,"index":2664},{"krate":0,"index":2666},{"krate":0,"index":2667},{"krate":0,"index":2669},{"krate":0,"index":17207},{"krate":0,"index":17211},{"krate":0,"index":17212},{"krate":0,"index":17216},{"krate":0,"index":17217},{"krate":0,"index":17221},{"krate":0,"index":17222},{"krate":0,"index":17226},{"krate":0,"index":17227},{"krate":0,"index":17228},{"krate":0,"index":2670},{"krate":0,"index":2672},{"krate":0,"index":2679},{"krate":0,"index":2681},{"krate":0,"index":2682},{"krate":0,"index":17230},{"krate":0,"index":17231},{"krate":0,"index":2683},{"krate":0,"index":2685},{"krate":0,"index":2692},{"krate":0,"index":2694},{"krate":0,"index":2695},{"krate":0,"index":17233},{"krate":0,"index":17234},{"krate":0,"index":2696},{"krate":0,"index":2703},{"krate":0,"index":2705},{"krate":0,"index":2706},{"krate":0,"index":2707},{"krate":0,"index":2708},{"krate":0,"index":2709},{"krate":0,"index":2710},{"krate":0,"index":2711},{"krate":0,"index":2714},{"krate":0,"index":2715},{"krate":0,"index":2717},{"krate":0,"index":2719},{"krate":0,"index":2722},{"krate":0,"index":2724},{"krate":0,"index":2726},{"krate":0,"index":2728},{"krate":0,"index":2730},{"krate":0,"index":2732},{"krate":0,"index":2734},{"krate":0,"index":2736},{"krate":0,"index":2738},{"krate":0,"index":2739},{"krate":0,"index":17236},{"krate":0,"index":17237},{"krate":0,"index":17238},{"krate":0,"index":17239},{"krate":0,"index":17240},{"krate":0,"index":17241},{"krate":0,"index":17242},{"krate":0,"index":17243},{"krate":0,"index":17244},{"krate":0,"index":17245},{"krate":0,"index":17246},{"krate":0,"index":17247},{"krate":0,"index":2740},{"krate":0,"index":2743}],"decl_id":null,"docs":" Slice management and manipulation","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1159871,"byte_end":1159917,"line_start":17,"line_end":17,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":2348},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,114,111,116,97,116,101,46,114,115],"byte_start":1241461,"byte_end":1241471,"line_start":72,"line_end":72,"column_start":15,"column_end":25},"name":"ptr_rotate","qualname":"::slice::rotate::ptr_rotate","value":"fn <T> (mut left: usize, mid: *mut T, mut right: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Rotates the range `[mid-left, mid+right)` such that the element at `mid`\n becomes the first element.  Equivalently, rotates the range `left`\n elements to the left or `right` elements to the right.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2362},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,115,111,114,116,46,114,115],"byte_start":1248026,"byte_end":1248034,"line_start":156,"line_end":156,"column_start":8,"column_end":16},"name":"heapsort","qualname":"::slice::sort::heapsort","value":"fn <T, F> (v: &mut [T], is_less: &mut F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sorts `v` using heapsort, which guarantees `O(n log n)` worst-case.\n","sig":null,"attributes":[{"value":"cold","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,115,111,114,116,46,114,115],"byte_start":1248011,"byte_end":1248018,"line_start":155,"line_end":155,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":2376},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,115,111,114,116,46,114,115],"byte_start":1267493,"byte_end":1267502,"line_start":691,"line_end":691,"column_start":8,"column_end":17},"name":"quicksort","qualname":"::slice::sort::quicksort","value":"fn <T, F> (v: &mut [T], mut is_less: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Sorts `v` using pattern-defeating quicksort, which is `O(n log n)` worst-case.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2147485048},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161135,"byte_end":1161139,"line_start":61,"line_end":61,"column_start":9,"column_end":13},"name":"data","qualname":"::slice::Repr::data","value":"*const T","parent":{"krate":0,"index":2377},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2147485049},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161159,"byte_end":1161162,"line_start":62,"line_end":62,"column_start":9,"column_end":12},"name":"len","qualname":"::slice::Repr::len","value":"usize","parent":{"krate":0,"index":2377},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2378},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161439,"byte_end":1161447,"line_start":74,"line_end":74,"column_start":11,"column_end":19},"name":"SliceExt","qualname":"::slice::SliceExt","value":"SliceExt","parent":null,"children":[{"krate":0,"index":2379},{"krate":0,"index":2380},{"krate":0,"index":2381},{"krate":0,"index":2382},{"krate":0,"index":2383},{"krate":0,"index":2384},{"krate":0,"index":2385},{"krate":0,"index":2386},{"krate":0,"index":2387},{"krate":0,"index":2388},{"krate":0,"index":2389},{"krate":0,"index":2390},{"krate":0,"index":2391},{"krate":0,"index":2392},{"krate":0,"index":2393},{"krate":0,"index":2394},{"krate":0,"index":2395},{"krate":0,"index":2396},{"krate":0,"index":2397},{"krate":0,"index":2398},{"krate":0,"index":2399},{"krate":0,"index":2400},{"krate":0,"index":2401},{"krate":0,"index":2402},{"krate":0,"index":2403},{"krate":0,"index":2404},{"krate":0,"index":2405},{"krate":0,"index":2406},{"krate":0,"index":2407},{"krate":0,"index":2408},{"krate":0,"index":2409},{"krate":0,"index":2410},{"krate":0,"index":2411},{"krate":0,"index":2412},{"krate":0,"index":2413},{"krate":0,"index":2414},{"krate":0,"index":2415},{"krate":0,"index":2416},{"krate":0,"index":2417},{"krate":0,"index":2418},{"krate":0,"index":2419},{"krate":0,"index":2420},{"krate":0,"index":2421},{"krate":0,"index":2422},{"krate":0,"index":2423},{"krate":0,"index":2424},{"krate":0,"index":2425}],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":2379},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161459,"byte_end":1161463,"line_start":75,"line_end":75,"column_start":10,"column_end":14},"name":"Item","qualname":"::slice::SliceExt::Item","value":"type Item;","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2380},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161522,"byte_end":1161530,"line_start":78,"line_end":78,"column_start":8,"column_end":16},"name":"split_at","qualname":"::slice::SliceExt::split_at","value":"fn (&self, mid: usize) -> (&[Self::Item], &[Self::Item])","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2381},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161642,"byte_end":1161646,"line_start":81,"line_end":81,"column_start":8,"column_end":12},"name":"iter","qualname":"::slice::SliceExt::iter","value":"fn (&self) -> Iter<Self::Item>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2382},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161732,"byte_end":1161737,"line_start":84,"line_end":84,"column_start":8,"column_end":13},"name":"split","qualname":"::slice::SliceExt::split","value":"fn <P> (&self, pred: P) -> Split<Self::Item, P>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2383},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161893,"byte_end":1161899,"line_start":88,"line_end":88,"column_start":8,"column_end":14},"name":"rsplit","qualname":"::slice::SliceExt::rsplit","value":"fn <P> (&self, pred: P) -> RSplit<Self::Item, P>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2384},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1162046,"byte_end":1162052,"line_start":92,"line_end":92,"column_start":8,"column_end":14},"name":"splitn","qualname":"::slice::SliceExt::splitn","value":"fn <P> (&self, n: usize, pred: P) -> SplitN<Self::Item, P>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2385},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1162209,"byte_end":1162216,"line_start":96,"line_end":96,"column_start":8,"column_end":15},"name":"rsplitn","qualname":"::slice::SliceExt::rsplitn","value":"fn <P> (&self, n: usize, pred: P) -> RSplitN<Self::Item, P>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2386},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1162375,"byte_end":1162382,"line_start":100,"line_end":100,"column_start":8,"column_end":15},"name":"windows","qualname":"::slice::SliceExt::windows","value":"fn (&self, size: usize) -> Windows<Self::Item>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2387},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1162484,"byte_end":1162490,"line_start":103,"line_end":103,"column_start":8,"column_end":14},"name":"chunks","qualname":"::slice::SliceExt::chunks","value":"fn (&self, size: usize) -> Chunks<Self::Item>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2388},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1162591,"byte_end":1162594,"line_start":106,"line_end":106,"column_start":8,"column_end":11},"name":"get","qualname":"::slice::SliceExt::get","value":"fn <I> (&self, index: I) -> Option<&I::Output>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2389},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1162728,"byte_end":1162733,"line_start":109,"line_end":109,"column_start":8,"column_end":13},"name":"first","qualname":"::slice::SliceExt::first","value":"fn (&self) -> Option<&Self::Item>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2390},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1162822,"byte_end":1162833,"line_start":112,"line_end":112,"column_start":8,"column_end":19},"name":"split_first","qualname":"::slice::SliceExt::split_first","value":"fn (&self) -> Option<(&Self::Item, &[Self::Item])>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2391},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1162939,"byte_end":1162949,"line_start":115,"line_end":115,"column_start":8,"column_end":18},"name":"split_last","qualname":"::slice::SliceExt::split_last","value":"fn (&self) -> Option<(&Self::Item, &[Self::Item])>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2392},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1163055,"byte_end":1163059,"line_start":118,"line_end":118,"column_start":8,"column_end":12},"name":"last","qualname":"::slice::SliceExt::last","value":"fn (&self) -> Option<&Self::Item>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2393},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1163155,"byte_end":1163168,"line_start":121,"line_end":121,"column_start":15,"column_end":28},"name":"get_unchecked","qualname":"::slice::SliceExt::get_unchecked","value":"fn <I> (&self, index: I) -> &I::Output","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2394},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1163294,"byte_end":1163300,"line_start":124,"line_end":124,"column_start":8,"column_end":14},"name":"as_ptr","qualname":"::slice::SliceExt::as_ptr","value":"fn (&self) -> *const Self::Item","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2395},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1163387,"byte_end":1163400,"line_start":127,"line_end":127,"column_start":8,"column_end":21},"name":"binary_search","qualname":"::slice::SliceExt::binary_search","value":"fn (&self, x: &Self::Item) -> Result<usize, usize>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2396},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1163536,"byte_end":1163552,"line_start":131,"line_end":131,"column_start":8,"column_end":24},"name":"binary_search_by","qualname":"::slice::SliceExt::binary_search_by","value":"fn <'a, F> (&'a self, f: F) -> Result<usize, usize>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2397},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1163732,"byte_end":1163752,"line_start":135,"line_end":135,"column_start":8,"column_end":28},"name":"binary_search_by_key","qualname":"::slice::SliceExt::binary_search_by_key","value":"fn <'a, B, F> (&'a self, b: &B, f: F) -> Result<usize, usize>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2398},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1163934,"byte_end":1163937,"line_start":140,"line_end":140,"column_start":8,"column_end":11},"name":"len","qualname":"::slice::SliceExt::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2399},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1164012,"byte_end":1164020,"line_start":143,"line_end":143,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::slice::SliceExt::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2400},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1164113,"byte_end":1164120,"line_start":146,"line_end":146,"column_start":8,"column_end":15},"name":"get_mut","qualname":"::slice::SliceExt::get_mut","value":"fn <I> (&mut self, index: I) -> Option<&mut I::Output>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2401},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1164262,"byte_end":1164270,"line_start":149,"line_end":149,"column_start":8,"column_end":16},"name":"iter_mut","qualname":"::slice::SliceExt::iter_mut","value":"fn (&mut self) -> IterMut<Self::Item>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2402},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1164363,"byte_end":1164372,"line_start":152,"line_end":152,"column_start":8,"column_end":17},"name":"first_mut","qualname":"::slice::SliceExt::first_mut","value":"fn (&mut self) -> Option<&mut Self::Item>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2403},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1164469,"byte_end":1164484,"line_start":155,"line_end":155,"column_start":8,"column_end":23},"name":"split_first_mut","qualname":"::slice::SliceExt::split_first_mut","value":"fn (&mut self) -> Option<(&mut Self::Item, &mut [Self::Item])>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2404},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1164602,"byte_end":1164616,"line_start":158,"line_end":158,"column_start":8,"column_end":22},"name":"split_last_mut","qualname":"::slice::SliceExt::split_last_mut","value":"fn (&mut self) -> Option<(&mut Self::Item, &mut [Self::Item])>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2405},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1164734,"byte_end":1164742,"line_start":161,"line_end":161,"column_start":8,"column_end":16},"name":"last_mut","qualname":"::slice::SliceExt::last_mut","value":"fn (&mut self) -> Option<&mut Self::Item>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2406},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1164839,"byte_end":1164848,"line_start":164,"line_end":164,"column_start":8,"column_end":17},"name":"split_mut","qualname":"::slice::SliceExt::split_mut","value":"fn <P> (&mut self, pred: P) -> SplitMut<Self::Item, P>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2407},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1165011,"byte_end":1165021,"line_start":168,"line_end":168,"column_start":8,"column_end":18},"name":"rsplit_mut","qualname":"::slice::SliceExt::rsplit_mut","value":"fn <P> (&mut self, pred: P) -> RSplitMut<Self::Item, P>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2408},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1165175,"byte_end":1165185,"line_start":172,"line_end":172,"column_start":8,"column_end":18},"name":"splitn_mut","qualname":"::slice::SliceExt::splitn_mut","value":"fn <P> (&mut self, n: usize, pred: P) -> SplitNMut<Self::Item, P>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2409},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1165349,"byte_end":1165360,"line_start":176,"line_end":176,"column_start":8,"column_end":19},"name":"rsplitn_mut","qualname":"::slice::SliceExt::rsplitn_mut","value":"fn <P> (&mut self, n: usize, pred: P) -> RSplitNMut<Self::Item, P>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2410},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1165526,"byte_end":1165536,"line_start":180,"line_end":180,"column_start":8,"column_end":18},"name":"chunks_mut","qualname":"::slice::SliceExt::chunks_mut","value":"fn (&mut self, chunk_size: usize) -> ChunksMut<Self::Item>","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2411},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1165650,"byte_end":1165654,"line_start":183,"line_end":183,"column_start":8,"column_end":12},"name":"swap","qualname":"::slice::SliceExt::swap","value":"fn (&mut self, a: usize, b: usize) -> ()","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2412},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1165744,"byte_end":1165756,"line_start":186,"line_end":186,"column_start":8,"column_end":20},"name":"split_at_mut","qualname":"::slice::SliceExt::split_at_mut","value":"fn (&mut self, mid: usize) -> (&mut [Self::Item], &mut [Self::Item])","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2413},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1165880,"byte_end":1165887,"line_start":189,"line_end":189,"column_start":8,"column_end":15},"name":"reverse","qualname":"::slice::SliceExt::reverse","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2414},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1165964,"byte_end":1165981,"line_start":192,"line_end":192,"column_start":15,"column_end":32},"name":"get_unchecked_mut","qualname":"::slice::SliceExt::get_unchecked_mut","value":"fn <I> (&mut self, index: I) -> &mut I::Output","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2415},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1166115,"byte_end":1166125,"line_start":195,"line_end":195,"column_start":8,"column_end":18},"name":"as_mut_ptr","qualname":"::slice::SliceExt::as_mut_ptr","value":"fn (&mut self) -> *mut Self::Item","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2416},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1166214,"byte_end":1166222,"line_start":198,"line_end":198,"column_start":8,"column_end":16},"name":"contains","qualname":"::slice::SliceExt::contains","value":"fn (&self, x: &Self::Item) -> bool","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2417},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1166340,"byte_end":1166351,"line_start":201,"line_end":201,"column_start":8,"column_end":19},"name":"starts_with","qualname":"::slice::SliceExt::starts_with","value":"fn (&self, needle: &[Self::Item]) -> bool","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2418},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1166476,"byte_end":1166485,"line_start":204,"line_end":204,"column_start":8,"column_end":17},"name":"ends_with","qualname":"::slice::SliceExt::ends_with","value":"fn (&self, needle: &[Self::Item]) -> bool","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2419},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1166620,"byte_end":1166626,"line_start":207,"line_end":207,"column_start":8,"column_end":14},"name":"rotate","qualname":"::slice::SliceExt::rotate","value":"fn (&mut self, mid: usize) -> ()","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2420},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1166720,"byte_end":1166736,"line_start":210,"line_end":210,"column_start":8,"column_end":24},"name":"clone_from_slice","qualname":"::slice::SliceExt::clone_from_slice","value":"fn (&mut self, src: &[Self::Item]) -> ()","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2421},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1166861,"byte_end":1166876,"line_start":213,"line_end":213,"column_start":8,"column_end":23},"name":"copy_from_slice","qualname":"::slice::SliceExt::copy_from_slice","value":"fn (&mut self, src: &[Self::Item]) -> ()","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2422},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1167002,"byte_end":1167017,"line_start":216,"line_end":216,"column_start":8,"column_end":23},"name":"swap_with_slice","qualname":"::slice::SliceExt::swap_with_slice","value":"fn (&mut self, src: &mut [Self::Item]) -> ()","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2423},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1167121,"byte_end":1167134,"line_start":219,"line_end":219,"column_start":8,"column_end":21},"name":"sort_unstable","qualname":"::slice::SliceExt::sort_unstable","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2424},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1167244,"byte_end":1167260,"line_start":223,"line_end":223,"column_start":8,"column_end":24},"name":"sort_unstable_by","qualname":"::slice::SliceExt::sort_unstable_by","value":"fn <F> (&mut self, compare: F) -> ()","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2425},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1167416,"byte_end":1167436,"line_start":227,"line_end":227,"column_start":8,"column_end":28},"name":"sort_unstable_by_key","qualname":"::slice::SliceExt::sort_unstable_by_key","value":"fn <B, F> (&mut self, f: F) -> ()","parent":{"krate":0,"index":2378},"children":[],"decl_id":null,"docs":" Extension methods for slices.\n","sig":null,"attributes":[{"value":"unstable(feature = \"core_slice_ext\",\n           reason = \"stable interface provided by `impl [T]` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161235,"byte_end":1161381,"line_start":70,"line_end":72,"column_start":1,"column_end":29}},{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1161382,"byte_end":1161404,"line_start":73,"line_end":73,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":2483},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1182207,"byte_end":1182217,"line_start":758,"line_end":758,"column_start":11,"column_end":21},"name":"SliceIndex","qualname":"::slice::SliceIndex","value":"SliceIndex<T: ?Sized>","parent":null,"children":[{"krate":0,"index":2484},{"krate":0,"index":2485},{"krate":0,"index":2486},{"krate":0,"index":2487},{"krate":0,"index":2488},{"krate":0,"index":2489},{"krate":0,"index":2490}],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_get_slice\", issue = \"35729\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1182054,"byte_end":1182111,"line_start":756,"line_end":756,"column_start":1,"column_end":58}},{"value":"rustc_on_unimplemented =\n      \"slice indices are of type `usize` or ranges of `usize`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1182112,"byte_end":1182196,"line_start":757,"line_end":757,"column_start":1,"column_end":85}}]},{"kind":"Type","id":{"krate":0,"index":2484},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1182285,"byte_end":1182291,"line_start":760,"line_end":760,"column_start":10,"column_end":16},"name":"Output","qualname":"::slice::SliceIndex::Output","value":"type Output: ?Sized;","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" The output type returned by methods.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2485},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1182398,"byte_end":1182401,"line_start":764,"line_end":764,"column_start":8,"column_end":11},"name":"get","qualname":"::slice::SliceIndex::get","value":"fn (self, slice: &T) -> Option<&Self::Output>","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_get_slice\", issue = \"35729\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1182054,"byte_end":1182111,"line_start":756,"line_end":756,"column_start":1,"column_end":58}},{"value":"rustc_on_unimplemented =\n      \"slice indices are of type `usize` or ranges of `usize`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1182112,"byte_end":1182196,"line_start":757,"line_end":757,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2486},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1182543,"byte_end":1182550,"line_start":768,"line_end":768,"column_start":8,"column_end":15},"name":"get_mut","qualname":"::slice::SliceIndex::get_mut","value":"fn (self, slice: &mut T) -> Option<&mut Self::Output>","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_get_slice\", issue = \"35729\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1182054,"byte_end":1182111,"line_start":756,"line_end":756,"column_start":1,"column_end":58}},{"value":"rustc_on_unimplemented =\n      \"slice indices are of type `usize` or ranges of `usize`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1182112,"byte_end":1182196,"line_start":757,"line_end":757,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2487},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1182732,"byte_end":1182745,"line_start":772,"line_end":772,"column_start":15,"column_end":28},"name":"get_unchecked","qualname":"::slice::SliceIndex::get_unchecked","value":"fn (self, slice: &T) -> &Self::Output","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_get_slice\", issue = \"35729\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1182054,"byte_end":1182111,"line_start":756,"line_end":756,"column_start":1,"column_end":58}},{"value":"rustc_on_unimplemented =\n      \"slice indices are of type `usize` or ranges of `usize`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1182112,"byte_end":1182196,"line_start":757,"line_end":757,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2488},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1182912,"byte_end":1182929,"line_start":776,"line_end":776,"column_start":15,"column_end":32},"name":"get_unchecked_mut","qualname":"::slice::SliceIndex::get_unchecked_mut","value":"fn (self, slice: &mut T) -> &mut Self::Output","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_get_slice\", issue = \"35729\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1182054,"byte_end":1182111,"line_start":756,"line_end":756,"column_start":1,"column_end":58}},{"value":"rustc_on_unimplemented =\n      \"slice indices are of type `usize` or ranges of `usize`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1182112,"byte_end":1182196,"line_start":757,"line_end":757,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2489},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1183084,"byte_end":1183089,"line_start":780,"line_end":780,"column_start":8,"column_end":13},"name":"index","qualname":"::slice::SliceIndex::index","value":"fn (self, slice: &T) -> &Self::Output","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_get_slice\", issue = \"35729\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1182054,"byte_end":1182111,"line_start":756,"line_end":756,"column_start":1,"column_end":58}},{"value":"rustc_on_unimplemented =\n      \"slice indices are of type `usize` or ranges of `usize`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1182112,"byte_end":1182196,"line_start":757,"line_end":757,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2490},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1183237,"byte_end":1183246,"line_start":784,"line_end":784,"column_start":8,"column_end":17},"name":"index_mut","qualname":"::slice::SliceIndex::index_mut","value":"fn (self, slice: &mut T) -> &mut Self::Output","parent":{"krate":0,"index":2483},"children":[],"decl_id":null,"docs":" A helper trait used for indexing operations.\n","sig":null,"attributes":[{"value":"unstable(feature = \"slice_get_slice\", issue = \"35729\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1182054,"byte_end":1182111,"line_start":756,"line_end":756,"column_start":1,"column_end":58}},{"value":"rustc_on_unimplemented =\n      \"slice indices are of type `usize` or ranges of `usize`\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1182112,"byte_end":1182196,"line_start":757,"line_end":757,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":2565},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1200351,"byte_end":1200355,"line_start":1371,"line_end":1371,"column_start":12,"column_end":16},"name":"Iter","qualname":"::slice::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":2147485123},{"krate":0,"index":2147485124},{"krate":0,"index":2147485125}],"decl_id":null,"docs":" Immutable slice iterator","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1200294,"byte_end":1200339,"line_start":1370,"line_end":1370,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2571},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1201838,"byte_end":1201846,"line_start":1417,"line_end":1417,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Iter<'a, T>>::as_slice","value":"fn (&self) -> &'a [T]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2581},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1203771,"byte_end":1203778,"line_start":1488,"line_end":1488,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::slice::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":2147485146},{"krate":0,"index":2147485147},{"krate":0,"index":2147485148}],"decl_id":null,"docs":" Mutable slice iterator.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1203714,"byte_end":1203759,"line_start":1487,"line_end":1487,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2587},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1205747,"byte_end":1205757,"line_start":1545,"line_end":1545,"column_start":12,"column_end":22},"name":"into_slice","qualname":"<IterMut<'a, T>>::into_slice","value":"fn (self) -> &'a mut [T]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2595},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1207144,"byte_end":1207156,"line_start":1592,"line_end":1592,"column_start":15,"column_end":27},"name":"slice_offset","qualname":"::slice::PointerExt::slice_offset","value":"fn (self, i: isize) -> Self","parent":{"krate":0,"index":2594},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2596},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1207278,"byte_end":1207286,"line_start":1596,"line_end":1596,"column_start":15,"column_end":23},"name":"post_inc","qualname":"::slice::PointerExt::post_inc","value":"fn (&mut self) -> Self","parent":{"krate":0,"index":2594},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2597},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1207493,"byte_end":1207500,"line_start":1604,"line_end":1604,"column_start":15,"column_end":22},"name":"pre_dec","qualname":"::slice::PointerExt::pre_dec","value":"fn (&mut self) -> Self","parent":{"krate":0,"index":2594},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2603},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1208165,"byte_end":1208171,"line_start":1630,"line_end":1630,"column_start":8,"column_end":14},"name":"finish","qualname":"::slice::SplitIter::finish","value":"fn (&mut self) -> Option<Self::Item>","parent":{"krate":0,"index":2602},"children":[],"decl_id":null,"docs":" An internal abstraction over the splitting iterators, so that\n splitn, splitn_mut etc can be implemented once.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2604},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1208532,"byte_end":1208537,"line_start":1641,"line_end":1641,"column_start":12,"column_end":17},"name":"Split","qualname":"::slice::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":2147485168},{"krate":0,"index":2147485169},{"krate":0,"index":2147485170}],"decl_id":null,"docs":" An iterator over subslices separated by elements that match a predicate\n function.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1208475,"byte_end":1208520,"line_start":1640,"line_end":1640,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2618},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1211240,"byte_end":1211248,"line_start":1732,"line_end":1732,"column_start":12,"column_end":20},"name":"SplitMut","qualname":"::slice::SplitMut","value":"SplitMut {  }","parent":null,"children":[{"krate":0,"index":2147485194},{"krate":0,"index":2147485195},{"krate":0,"index":2147485196}],"decl_id":null,"docs":" An iterator over the subslices of the vector which are separated\n by elements that match `pred`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1211183,"byte_end":1211228,"line_start":1731,"line_end":1731,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17201},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1214374,"byte_end":1214380,"line_start":1831,"line_end":1831,"column_start":12,"column_end":18},"name":"RSplit","qualname":"::slice::RSplit","value":"RSplit {  }","parent":null,"children":[{"krate":0,"index":2147495437}],"decl_id":null,"docs":" An iterator over subslices separated by elements that match a predicate\n function, starting from the end of the slice.","sig":null,"attributes":[{"value":"unstable(feature = \"slice_rsplit\", issue = \"41020\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1214228,"byte_end":1214282,"line_start":1829,"line_end":1829,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":2641},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1216221,"byte_end":1216230,"line_start":1888,"line_end":1888,"column_start":12,"column_end":21},"name":"RSplitMut","qualname":"::slice::RSplitMut","value":"RSplitMut {  }","parent":null,"children":[{"krate":0,"index":2147485232}],"decl_id":null,"docs":" An iterator over the subslices of the vector which are separated\n by elements that match `pred`, starting from the end of the slice.","sig":null,"attributes":[{"value":"unstable(feature = \"slice_rsplit\", issue = \"41020\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1216155,"byte_end":1216209,"line_start":1887,"line_end":1887,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":2657},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1218813,"byte_end":1218819,"line_start":1975,"line_end":1975,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::slice::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":2147485254}],"decl_id":null,"docs":" An iterator over subslices separated by elements that match a predicate\n function, limited to a given number of splits.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1218756,"byte_end":1218801,"line_start":1974,"line_end":1974,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2660},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1219627,"byte_end":1219634,"line_start":1997,"line_end":1997,"column_start":12,"column_end":19},"name":"RSplitN","qualname":"::slice::RSplitN","value":"RSplitN {  }","parent":null,"children":[{"krate":0,"index":2147485261}],"decl_id":null,"docs":" An iterator over subslices separated by elements that match a\n predicate function, limited to a given number of splits, starting\n from the end of the slice.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1219570,"byte_end":1219615,"line_start":1996,"line_end":1996,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2663},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1220414,"byte_end":1220423,"line_start":2018,"line_end":2018,"column_start":12,"column_end":21},"name":"SplitNMut","qualname":"::slice::SplitNMut","value":"SplitNMut {  }","parent":null,"children":[{"krate":0,"index":2147485268}],"decl_id":null,"docs":" An iterator over subslices separated by elements that match a predicate\n function, limited to a given number of splits.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1220357,"byte_end":1220402,"line_start":2017,"line_end":2017,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2666},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1221252,"byte_end":1221262,"line_start":2040,"line_end":2040,"column_start":12,"column_end":22},"name":"RSplitNMut","qualname":"::slice::RSplitNMut","value":"RSplitNMut {  }","parent":null,"children":[{"krate":0,"index":2147485275}],"decl_id":null,"docs":" An iterator over subslices separated by elements that match a\n predicate function, limited to a given number of splits, starting\n from the end of the slice.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1221195,"byte_end":1221240,"line_start":2039,"line_end":2039,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17227},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1222895,"byte_end":1222902,"line_start":2091,"line_end":2091,"column_start":12,"column_end":19},"name":"Windows","qualname":"::slice::Windows","value":"Windows {  }","parent":null,"children":[{"krate":0,"index":2147495472},{"krate":0,"index":2147495473}],"decl_id":null,"docs":" An iterator over overlapping subslices of length `size`.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1222838,"byte_end":1222883,"line_start":2090,"line_end":2090,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17230},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1225525,"byte_end":1225531,"line_start":2193,"line_end":2193,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::slice::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":2147495478},{"krate":0,"index":2147495479}],"decl_id":null,"docs":" An iterator over a slice in (non-overlapping) chunks (`size` elements at a\n time).","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1225468,"byte_end":1225513,"line_start":2192,"line_end":2192,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17233},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1228600,"byte_end":1228609,"line_start":2302,"line_end":2302,"column_start":12,"column_end":21},"name":"ChunksMut","qualname":"::slice::ChunksMut","value":"ChunksMut {  }","parent":null,"children":[{"krate":0,"index":2147495484},{"krate":0,"index":2147495485}],"decl_id":null,"docs":" An iterator over a slice in (non-overlapping) mutable chunks (`size`\n elements at a time). When the slice len is not evenly divided by the chunk\n size, the last slice of the iteration will be the remainder.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1228543,"byte_end":1228588,"line_start":2301,"line_end":2301,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":2707},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1232564,"byte_end":1232578,"line_start":2436,"line_end":2436,"column_start":15,"column_end":29},"name":"from_raw_parts","qualname":"::slice::from_raw_parts","value":"fn <'a, T> (p: *const T, len: usize) -> &'a [T]","parent":null,"children":[],"decl_id":null,"docs":" Forms a slice from a pointer and a length.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1232494,"byte_end":1232503,"line_start":2434,"line_end":2434,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1232504,"byte_end":1232549,"line_start":2435,"line_end":2435,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":2708},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1233100,"byte_end":1233118,"line_start":2449,"line_end":2449,"column_start":15,"column_end":33},"name":"from_raw_parts_mut","qualname":"::slice::from_raw_parts_mut","value":"fn <'a, T> (p: *mut T, len: usize) -> &'a mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Performs the same functionality as `from_raw_parts`, except that a mutable\n slice is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1233030,"byte_end":1233039,"line_start":2447,"line_end":2447,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1233040,"byte_end":1233085,"line_start":2448,"line_end":2448,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":2709},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1233412,"byte_end":1233420,"line_start":2456,"line_end":2456,"column_start":8,"column_end":16},"name":"heapsort","qualname":"::slice::heapsort","value":"fn <T, F> (v: &mut [T], mut is_less: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"sort_internals\",\n           reason = \"internal to sort module\",\n           issue = \"0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1233301,"byte_end":1233389,"line_start":2454,"line_end":2454,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2720},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1234825,"byte_end":1234830,"line_start":2510,"line_end":2510,"column_start":8,"column_end":13},"name":"equal","qualname":"::slice::SlicePartialEq::equal","value":"fn (&self, other: &[B]) -> bool","parent":{"krate":0,"index":2719},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2721},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1234868,"byte_end":1234877,"line_start":2512,"line_end":2512,"column_start":8,"column_end":17},"name":"not_equal","qualname":"::slice::SlicePartialEq::not_equal","value":"fn (&self, other: &[B]) -> bool","parent":{"krate":0,"index":2719},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2727},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1235937,"byte_end":1235952,"line_start":2556,"line_end":2556,"column_start":8,"column_end":23},"name":"partial_compare","qualname":"::slice::SlicePartialOrd::partial_compare","value":"fn (&self, other: &[B]) -> Option<Ordering>","parent":{"krate":0,"index":2726},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2733},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1236867,"byte_end":1236874,"line_start":2592,"line_end":2592,"column_start":8,"column_end":15},"name":"compare","qualname":"::slice::SliceOrd::compare","value":"fn (&self, other: &[B]) -> Ordering","parent":{"krate":0,"index":2732},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":2746},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"str","qualname":"::str","value":"src/libcore/str/mod.rs","parent":null,"children":[{"krate":0,"index":2747},{"krate":0,"index":2751},{"krate":0,"index":2752},{"krate":0,"index":2753},{"krate":0,"index":2758},{"krate":0,"index":2759},{"krate":0,"index":2762},{"krate":0,"index":2763},{"krate":0,"index":2764},{"krate":0,"index":2867},{"krate":0,"index":2870},{"krate":0,"index":17333},{"krate":0,"index":17341},{"krate":0,"index":17339},{"krate":0,"index":17336},{"krate":0,"index":17334},{"krate":0,"index":2873},{"krate":0,"index":17343},{"krate":0,"index":17353},{"krate":0,"index":17351},{"krate":0,"index":17348},{"krate":0,"index":17346},{"krate":0,"index":17344},{"krate":0,"index":2875},{"krate":0,"index":2878},{"krate":0,"index":2879},{"krate":0,"index":2880},{"krate":0,"index":2881},{"krate":0,"index":2882},{"krate":0,"index":2883},{"krate":0,"index":17354},{"krate":0,"index":17357},{"krate":0,"index":17355},{"krate":0,"index":2885},{"krate":0,"index":2886},{"krate":0,"index":2887},{"krate":0,"index":2888},{"krate":0,"index":2889},{"krate":0,"index":2890},{"krate":0,"index":2891},{"krate":0,"index":2897},{"krate":0,"index":2899},{"krate":0,"index":2900},{"krate":0,"index":17359},{"krate":0,"index":17362},{"krate":0,"index":17360},{"krate":0,"index":2902},{"krate":0,"index":2908},{"krate":0,"index":2910},{"krate":0,"index":2911},{"krate":0,"index":17364},{"krate":0,"index":17367},{"krate":0,"index":17365},{"krate":0,"index":2913},{"krate":0,"index":2925},{"krate":0,"index":2928},{"krate":0,"index":2931},{"krate":0,"index":2932},{"krate":0,"index":2933},{"krate":0,"index":2936},{"krate":0,"index":2937},{"krate":0,"index":17369},{"krate":0,"index":2938},{"krate":0,"index":2939},{"krate":0,"index":2941},{"krate":0,"index":17371},{"krate":0,"index":17372},{"krate":0,"index":17374},{"krate":0,"index":17377},{"krate":0,"index":17379},{"krate":0,"index":17380},{"krate":0,"index":17382},{"krate":0,"index":17385},{"krate":0,"index":17387},{"krate":0,"index":17388},{"krate":0,"index":17389},{"krate":0,"index":17391},{"krate":0,"index":17393},{"krate":0,"index":17394},{"krate":0,"index":17396},{"krate":0,"index":17399},{"krate":0,"index":17401},{"krate":0,"index":17402},{"krate":0,"index":17404},{"krate":0,"index":17407},{"krate":0,"index":17409},{"krate":0,"index":17410},{"krate":0,"index":17411},{"krate":0,"index":17413},{"krate":0,"index":17415},{"krate":0,"index":2945},{"krate":0,"index":2946},{"krate":0,"index":2948},{"krate":0,"index":17417},{"krate":0,"index":17418},{"krate":0,"index":17420},{"krate":0,"index":17423},{"krate":0,"index":17425},{"krate":0,"index":17426},{"krate":0,"index":17428},{"krate":0,"index":17431},{"krate":0,"index":17433},{"krate":0,"index":17434},{"krate":0,"index":17435},{"krate":0,"index":2951},{"krate":0,"index":2952},{"krate":0,"index":2954},{"krate":0,"index":17437},{"krate":0,"index":17438},{"krate":0,"index":17440},{"krate":0,"index":17443},{"krate":0,"index":17445},{"krate":0,"index":17446},{"krate":0,"index":17448},{"krate":0,"index":17451},{"krate":0,"index":17453},{"krate":0,"index":17454},{"krate":0,"index":17455},{"krate":0,"index":17457},{"krate":0,"index":17459},{"krate":0,"index":2957},{"krate":0,"index":2958},{"krate":0,"index":2960},{"krate":0,"index":17461},{"krate":0,"index":17462},{"krate":0,"index":17464},{"krate":0,"index":17467},{"krate":0,"index":17469},{"krate":0,"index":17470},{"krate":0,"index":17472},{"krate":0,"index":17475},{"krate":0,"index":17477},{"krate":0,"index":17478},{"krate":0,"index":17479},{"krate":0,"index":17481},{"krate":0,"index":17483},{"krate":0,"index":17486},{"krate":0,"index":17484},{"krate":0,"index":2963},{"krate":0,"index":2967},{"krate":0,"index":2969},{"krate":0,"index":17488},{"krate":0,"index":17491},{"krate":0,"index":17489},{"krate":0,"index":17493},{"krate":0,"index":17494},{"krate":0,"index":2970},{"krate":0,"index":2972},{"krate":0,"index":2974},{"krate":0,"index":2977},{"krate":0,"index":2981},{"krate":0,"index":2983},{"krate":0,"index":2984},{"krate":0,"index":2985},{"krate":0,"index":2986},{"krate":0,"index":2989},{"krate":0,"index":2990},{"krate":0,"index":2991},{"krate":0,"index":2992},{"krate":0,"index":2993},{"krate":0,"index":3085},{"krate":0,"index":3125},{"krate":0,"index":3126},{"krate":0,"index":3128},{"krate":0,"index":3168},{"krate":0,"index":3170}],"decl_id":null,"docs":" String manipulation","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1268434,"byte_end":1268480,"line_start":15,"line_end":15,"column_start":1,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":2764},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pattern","qualname":"::str::pattern","value":"src/libcore/str/pattern.rs","parent":null,"children":[{"krate":0,"index":2765},{"krate":0,"index":2766},{"krate":0,"index":2767},{"krate":0,"index":2768},{"krate":0,"index":17248},{"krate":0,"index":17258},{"krate":0,"index":17256},{"krate":0,"index":17254},{"krate":0,"index":17251},{"krate":0,"index":17249},{"krate":0,"index":2774},{"krate":0,"index":2779},{"krate":0,"index":2783},{"krate":0,"index":2784},{"krate":0,"index":2787},{"krate":0,"index":2790},{"krate":0,"index":2793},{"krate":0,"index":2796},{"krate":0,"index":17259},{"krate":0,"index":17262},{"krate":0,"index":17260},{"krate":0,"index":2797},{"krate":0,"index":2800},{"krate":0,"index":2803},{"krate":0,"index":2805},{"krate":0,"index":2806},{"krate":0,"index":2807},{"krate":0,"index":17264},{"krate":0,"index":17267},{"krate":0,"index":17265},{"krate":0,"index":2808},{"krate":0,"index":2809},{"krate":0,"index":2810},{"krate":0,"index":2811},{"krate":0,"index":17276},{"krate":0,"index":17279},{"krate":0,"index":17277},{"krate":0,"index":2817},{"krate":0,"index":2818},{"krate":0,"index":2819},{"krate":0,"index":2820},{"krate":0,"index":17293},{"krate":0,"index":17294},{"krate":0,"index":2821},{"krate":0,"index":2823},{"krate":0,"index":2824},{"krate":0,"index":2825},{"krate":0,"index":2826},{"krate":0,"index":2827},{"krate":0,"index":2828},{"krate":0,"index":17313},{"krate":0,"index":17316},{"krate":0,"index":17314},{"krate":0,"index":17318},{"krate":0,"index":17321},{"krate":0,"index":17319},{"krate":0,"index":17323},{"krate":0,"index":17326},{"krate":0,"index":17324},{"krate":0,"index":2833},{"krate":0,"index":2835},{"krate":0,"index":2839},{"krate":0,"index":17328},{"krate":0,"index":17331},{"krate":0,"index":17329},{"krate":0,"index":2842},{"krate":0,"index":2850},{"krate":0,"index":2855},{"krate":0,"index":2856},{"krate":0,"index":2861},{"krate":0,"index":2862}],"decl_id":null,"docs":" The string Pattern API.","sig":null,"attributes":[{"value":"unstable(feature = \"pattern\",\n           reason = \"API not fully fleshed out and ready to be stabilized\",\n           issue = \"27721\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1349832,"byte_end":1349971,"line_start":16,"line_end":18,"column_start":1,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":2768},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1350454,"byte_end":1350461,"line_start":37,"line_end":37,"column_start":11,"column_end":18},"name":"Pattern","qualname":"::str::pattern::Pattern","value":"Pattern<'a>:  Sized","parent":null,"children":[{"krate":0,"index":2769},{"krate":0,"index":2770},{"krate":0,"index":2771},{"krate":0,"index":2772},{"krate":0,"index":2773}],"decl_id":null,"docs":" A string pattern.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2769},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1350529,"byte_end":1350537,"line_start":39,"line_end":39,"column_start":10,"column_end":18},"name":"Searcher","qualname":"::str::pattern::Pattern::Searcher","value":"type Searcher: Searcher<'a>;","parent":{"krate":0,"index":2768},"children":[],"decl_id":null,"docs":" Associated searcher for this pattern\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2770},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1350657,"byte_end":1350670,"line_start":43,"line_end":43,"column_start":8,"column_end":21},"name":"into_searcher","qualname":"::str::pattern::Pattern::into_searcher","value":"fn (self, haystack: &'a str) -> Self::Searcher","parent":{"krate":0,"index":2768},"children":[],"decl_id":null,"docs":" A string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2771},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1350805,"byte_end":1350820,"line_start":47,"line_end":47,"column_start":8,"column_end":23},"name":"is_contained_in","qualname":"::str::pattern::Pattern::is_contained_in","value":"fn (self, haystack: &'a str) -> bool","parent":{"krate":0,"index":2768},"children":[],"decl_id":null,"docs":" A string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2772},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1351016,"byte_end":1351028,"line_start":53,"line_end":53,"column_start":8,"column_end":20},"name":"is_prefix_of","qualname":"::str::pattern::Pattern::is_prefix_of","value":"fn (self, haystack: &'a str) -> bool","parent":{"krate":0,"index":2768},"children":[],"decl_id":null,"docs":" A string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2773},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1351294,"byte_end":1351306,"line_start":62,"line_end":62,"column_start":8,"column_end":20},"name":"is_suffix_of","qualname":"::str::pattern::Pattern::is_suffix_of","value":"fn (self, haystack: &'a str) -> bool","parent":{"krate":0,"index":2768},"children":[],"decl_id":null,"docs":" A string pattern.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147495490},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1351814,"byte_end":1351819,"line_start":79,"line_end":79,"column_start":5,"column_end":10},"name":"Match","qualname":"::str::pattern::SearchStep::Match","value":"SearchStep::Match(usize, usize)","parent":{"krate":0,"index":17248},"children":[],"decl_id":null,"docs":" Expresses that a match of the pattern has been found at\n `haystack[a..b]`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147495493},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1352094,"byte_end":1352100,"line_start":85,"line_end":85,"column_start":5,"column_end":11},"name":"Reject","qualname":"::str::pattern::SearchStep::Reject","value":"SearchStep::Reject(usize, usize)","parent":{"krate":0,"index":17248},"children":[],"decl_id":null,"docs":" Expresses that `haystack[a..b]` has been rejected as a possible match\n of the pattern.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147495496},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1352218,"byte_end":1352222,"line_start":88,"line_end":88,"column_start":5,"column_end":9},"name":"Done","qualname":"::str::pattern::SearchStep::Done","value":"SearchStep::Done","parent":{"krate":0,"index":17248},"children":[],"decl_id":null,"docs":" Expresses that every byte of the haystack has been visited, ending\n the iteration.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":17248},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1351707,"byte_end":1351717,"line_start":76,"line_end":76,"column_start":10,"column_end":20},"name":"SearchStep","qualname":"::str::pattern::SearchStep","value":"SearchStep::{Match, Reject, Done}","parent":null,"children":[{"krate":0,"index":2147495490},{"krate":0,"index":2147495493},{"krate":0,"index":2147495496}],"decl_id":null,"docs":" Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1351698,"byte_end":1352224,"line_start":76,"line_end":89,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1351698,"byte_end":1352224,"line_start":76,"line_end":89,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":2774},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1352765,"byte_end":1352773,"line_start":103,"line_end":103,"column_start":18,"column_end":26},"name":"Searcher","qualname":"::str::pattern::Searcher","value":"Searcher<'a>","parent":null,"children":[{"krate":0,"index":2775},{"krate":0,"index":2776},{"krate":0,"index":2777},{"krate":0,"index":2778}],"decl_id":null,"docs":" A searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2775},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1352897,"byte_end":1352905,"line_start":107,"line_end":107,"column_start":8,"column_end":16},"name":"haystack","qualname":"::str::pattern::Searcher::haystack","value":"fn (&self) -> &'a str","parent":{"krate":0,"index":2774},"children":[],"decl_id":null,"docs":" A searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2776},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1353854,"byte_end":1353858,"line_start":127,"line_end":127,"column_start":8,"column_end":12},"name":"next","qualname":"::str::pattern::Searcher::next","value":"fn (&mut self) -> SearchStep","parent":{"krate":0,"index":2774},"children":[],"decl_id":null,"docs":" A searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2777},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1353958,"byte_end":1353968,"line_start":131,"line_end":131,"column_start":8,"column_end":18},"name":"next_match","qualname":"::str::pattern::Searcher::next_match","value":"fn (&mut self) -> Option<(usize, usize)>","parent":{"krate":0,"index":2774},"children":[],"decl_id":null,"docs":" A searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2778},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1354303,"byte_end":1354314,"line_start":143,"line_end":143,"column_start":8,"column_end":19},"name":"next_reject","qualname":"::str::pattern::Searcher::next_reject","value":"fn (&mut self) -> Option<(usize, usize)>","parent":{"krate":0,"index":2774},"children":[],"decl_id":null,"docs":" A searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2779},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1355149,"byte_end":1355164,"line_start":168,"line_end":168,"column_start":18,"column_end":33},"name":"ReverseSearcher","qualname":"::str::pattern::ReverseSearcher","value":"ReverseSearcher<'a>:  Searcher<'a>","parent":null,"children":[{"krate":0,"index":2780},{"krate":0,"index":2781},{"krate":0,"index":2782}],"decl_id":null,"docs":" A reverse searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2780},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1356112,"byte_end":1356121,"line_start":187,"line_end":187,"column_start":8,"column_end":17},"name":"next_back","qualname":"::str::pattern::ReverseSearcher::next_back","value":"fn (&mut self) -> SearchStep","parent":{"krate":0,"index":2779},"children":[],"decl_id":null,"docs":" A reverse searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2781},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1356226,"byte_end":1356241,"line_start":191,"line_end":191,"column_start":8,"column_end":23},"name":"next_match_back","qualname":"::str::pattern::ReverseSearcher::next_match_back","value":"fn (&mut self) -> Option<(usize, usize)>","parent":{"krate":0,"index":2779},"children":[],"decl_id":null,"docs":" A reverse searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2782},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1356585,"byte_end":1356601,"line_start":203,"line_end":203,"column_start":8,"column_end":24},"name":"next_reject_back","qualname":"::str::pattern::ReverseSearcher::next_reject_back","value":"fn (&mut self) -> Option<(usize, usize)>","parent":{"krate":0,"index":2779},"children":[],"decl_id":null,"docs":" A reverse searcher for a string pattern.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2783},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1357739,"byte_end":1357758,"line_start":235,"line_end":235,"column_start":11,"column_end":30},"name":"DoubleEndedSearcher","qualname":"::str::pattern::DoubleEndedSearcher","value":"DoubleEndedSearcher<'a>:  ReverseSearcher<'a>","parent":null,"children":[],"decl_id":null,"docs":" A marker trait to express that a `ReverseSearcher`\n can be used for a `DoubleEndedIterator` implementation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2785},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1358011,"byte_end":1358018,"line_start":243,"line_end":243,"column_start":8,"column_end":15},"name":"matches","qualname":"::str::pattern::CharEq::matches","value":"fn (&mut self, c: char) -> bool","parent":{"krate":0,"index":2784},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2786},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1358055,"byte_end":1358065,"line_start":244,"line_end":244,"column_start":8,"column_end":18},"name":"only_ascii","qualname":"::str::pattern::CharEq::only_ascii","value":"fn (&self) -> bool","parent":{"krate":0,"index":2784},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17264},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1362786,"byte_end":1362798,"line_start":418,"line_end":418,"column_start":12,"column_end":24},"name":"CharSearcher","qualname":"::str::pattern::CharSearcher","value":"","parent":null,"children":[],"decl_id":null,"docs":" Associated type for `<char as Pattern<'a>>::Searcher`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17276},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1364303,"byte_end":1364320,"line_start":469,"line_end":469,"column_start":12,"column_end":29},"name":"CharSliceSearcher","qualname":"::str::pattern::CharSliceSearcher","value":"","parent":null,"children":[],"decl_id":null,"docs":" Associated type for `<&[char] as Pattern<'a>>::Searcher`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17293},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1365138,"byte_end":1365159,"line_start":492,"line_end":492,"column_start":12,"column_end":33},"name":"CharPredicateSearcher","qualname":"::str::pattern::CharPredicateSearcher","value":"","parent":null,"children":[],"decl_id":null,"docs":" Associated type for `<F as Pattern<'a>>::Searcher`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17313},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1367906,"byte_end":1367917,"line_start":574,"line_end":574,"column_start":12,"column_end":23},"name":"StrSearcher","qualname":"::str::pattern::StrSearcher","value":"StrSearcher {  }","parent":null,"children":[{"krate":0,"index":2147495531},{"krate":0,"index":2147495532},{"krate":0,"index":2147495533}],"decl_id":null,"docs":" Associated type for `<&str as Pattern<'a>>::Searcher`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":2851},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1393298,"byte_end":1393304,"line_start":1208,"line_end":1208,"column_start":10,"column_end":16},"name":"Output","qualname":"::str::pattern::TwoWayStrategy::Output","value":"type Output;","parent":{"krate":0,"index":2850},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2852},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1393313,"byte_end":1393329,"line_start":1209,"line_end":1209,"column_start":8,"column_end":24},"name":"use_early_reject","qualname":"::str::pattern::TwoWayStrategy::use_early_reject","value":"fn () -> bool","parent":{"krate":0,"index":2850},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2853},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1393348,"byte_end":1393357,"line_start":1210,"line_end":1210,"column_start":8,"column_end":17},"name":"rejecting","qualname":"::str::pattern::TwoWayStrategy::rejecting","value":"fn (a: usize, b: usize) -> Self::Output","parent":{"krate":0,"index":2850},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2854},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1393402,"byte_end":1393410,"line_start":1211,"line_end":1211,"column_start":8,"column_end":16},"name":"matching","qualname":"::str::pattern::TwoWayStrategy::matching","value":"fn (a: usize, b: usize) -> Self::Output","parent":{"krate":0,"index":2850},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2867},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1270027,"byte_end":1270034,"line_start":72,"line_end":72,"column_start":11,"column_end":18},"name":"FromStr","qualname":"::str::FromStr","value":"FromStr:  Sized","parent":null,"children":[{"krate":0,"index":2868},{"krate":0,"index":2869}],"decl_id":null,"docs":" A trait to abstract the idea of creating a new instance of a type from a\n string.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1269971,"byte_end":1270016,"line_start":71,"line_end":71,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":2868},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1270168,"byte_end":1270171,"line_start":75,"line_end":75,"column_start":10,"column_end":13},"name":"Err","qualname":"::str::FromStr::Err","value":"type Err;","parent":{"krate":0,"index":2867},"children":[],"decl_id":null,"docs":" The associated error which can be returned from parsing.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1270113,"byte_end":1270158,"line_start":74,"line_end":74,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2869},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1270865,"byte_end":1270873,"line_start":98,"line_end":98,"column_start":8,"column_end":16},"name":"from_str","qualname":"::str::FromStr::from_str","value":"fn (s: &str) -> Result<Self, Self::Err>","parent":{"krate":0,"index":2867},"children":[],"decl_id":null,"docs":" A trait to abstract the idea of creating a new instance of a type from a\n string.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1269971,"byte_end":1270016,"line_start":71,"line_end":71,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17333},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1272202,"byte_end":1272216,"line_start":142,"line_end":142,"column_start":12,"column_end":26},"name":"ParseBoolError","qualname":"::str::ParseBoolError","value":"ParseBoolError {  }","parent":null,"children":[{"krate":0,"index":2147495556}],"decl_id":null,"docs":" An error returned when parsing a `bool` using [`from_str`] fails","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1272145,"byte_end":1272190,"line_start":141,"line_end":141,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1272191,"byte_end":1272230,"line_start":142,"line_end":142,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":17343},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1272978,"byte_end":1272987,"line_start":167,"line_end":167,"column_start":12,"column_end":21},"name":"Utf8Error","qualname":"::str::Utf8Error","value":"Utf8Error {  }","parent":null,"children":[{"krate":0,"index":2147495557},{"krate":0,"index":2147495558}],"decl_id":null,"docs":" Errors which can occur when attempting to interpret a sequence of [`u8`]\n as a string.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1272921,"byte_end":1272966,"line_start":166,"line_end":166,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1272967,"byte_end":1273042,"line_start":167,"line_end":170,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1272967,"byte_end":1273042,"line_start":167,"line_end":170,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":2876},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1273760,"byte_end":1273771,"line_start":196,"line_end":196,"column_start":12,"column_end":23},"name":"valid_up_to","qualname":"<Utf8Error>::valid_up_to","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2877},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1274610,"byte_end":1274619,"line_start":211,"line_end":211,"column_start":12,"column_end":21},"name":"error_len","qualname":"<Utf8Error>::error_len","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":2878},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1277244,"byte_end":1277253,"line_start":298,"line_end":298,"column_start":8,"column_end":17},"name":"from_utf8","qualname":"::str::from_utf8","value":"fn (v: &[u8]) -> Result<&str, Utf8Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice of bytes to a string slice.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1277191,"byte_end":1277236,"line_start":297,"line_end":297,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":2879},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1278235,"byte_end":1278248,"line_start":336,"line_end":336,"column_start":8,"column_end":21},"name":"from_utf8_mut","qualname":"::str::from_utf8_mut","value":"fn (v: &mut [u8]) -> Result<&mut str, Utf8Error>","parent":null,"children":[],"decl_id":null,"docs":" Converts a mutable slice of bytes to a mutable string slice.","sig":null,"attributes":[{"value":"stable(feature = \"str_mut_extras\", since = \"1.20.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1278172,"byte_end":1278227,"line_start":335,"line_end":335,"column_start":1,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":2881},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1280463,"byte_end":1280482,"line_start":405,"line_end":405,"column_start":15,"column_end":34},"name":"from_utf8_unchecked","qualname":"::str::from_utf8_unchecked","value":"fn (v: &[u8]) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice of bytes to a string slice without checking\n that the string contains valid UTF-8.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1280393,"byte_end":1280402,"line_start":403,"line_end":403,"column_start":1,"column_end":10}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1280403,"byte_end":1280448,"line_start":404,"line_end":404,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":2882},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1281123,"byte_end":1281146,"line_start":430,"line_end":430,"column_start":15,"column_end":38},"name":"from_utf8_unchecked_mut","qualname":"::str::from_utf8_unchecked_mut","value":"fn (v: &mut [u8]) -> &mut str","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice of bytes to a string slice without checking\n that the string contains valid UTF-8; mutable version.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1281043,"byte_end":1281052,"line_start":428,"line_end":428,"column_start":1,"column_end":10}},{"value":"stable(feature = \"str_mut_extras\", since = \"1.20.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1281053,"byte_end":1281108,"line_start":429,"line_end":429,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":17354},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1282067,"byte_end":1282072,"line_start":461,"line_end":461,"column_start":12,"column_end":17},"name":"Chars","qualname":"::str::Chars","value":"Chars {  }","parent":null,"children":[{"krate":0,"index":2147495559}],"decl_id":null,"docs":" An iterator over the [`char`]s of a string slice.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1282010,"byte_end":1282055,"line_start":460,"line_end":460,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":2889},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1283027,"byte_end":1283042,"line_start":492,"line_end":492,"column_start":8,"column_end":23},"name":"next_code_point","qualname":"::str::next_code_point","value":"fn <'a, I> (bytes: &mut I) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Reads the next code point out of a byte iterator (assuming a\n UTF-8-like encoding).\n","sig":null,"attributes":[{"value":"unstable(feature = \"str_internals\", issue = \"0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1282958,"byte_end":1283009,"line_start":490,"line_end":490,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1283010,"byte_end":1283019,"line_start":491,"line_end":491,"column_start":1,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":2901},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1287388,"byte_end":1287394,"line_start":633,"line_end":633,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Chars<'a>>::as_str","value":"fn (&self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17359},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1287916,"byte_end":1287927,"line_start":649,"line_end":649,"column_start":12,"column_end":23},"name":"CharIndices","qualname":"::str::CharIndices","value":"CharIndices {  }","parent":null,"children":[{"krate":0,"index":2147495563},{"krate":0,"index":2147495564}],"decl_id":null,"docs":" An iterator over the [`char`]s of a string slice, and their positions.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1287859,"byte_end":1287904,"line_start":648,"line_end":648,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2912},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1289639,"byte_end":1289645,"line_start":713,"line_end":713,"column_start":12,"column_end":18},"name":"as_str","qualname":"<CharIndices<'a>>::as_str","value":"fn (&self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17364},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1290039,"byte_end":1290044,"line_start":727,"line_end":727,"column_start":12,"column_end":17},"name":"Bytes","qualname":"::str::Bytes","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the bytes of a string slice.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1289958,"byte_end":1290003,"line_start":725,"line_end":725,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17483},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1307752,"byte_end":1307757,"line_start":1313,"line_end":1313,"column_start":12,"column_end":17},"name":"Lines","qualname":"::str::Lines","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the lines of a string, as string slices.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1307671,"byte_end":1307716,"line_start":1311,"line_end":1311,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17488},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1308676,"byte_end":1308684,"line_start":1348,"line_end":1348,"column_start":12,"column_end":20},"name":"LinesAny","qualname":"::str::LinesAny","value":"","parent":null,"children":[],"decl_id":null,"docs":" Created with the method [`lines_any`].","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1308495,"byte_end":1308540,"line_start":1344,"line_end":1344,"column_start":1,"column_end":46}},{"value":"rustc_deprecated(since = \"1.4.0\", reason = \"use lines()/Lines instead now\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1308541,"byte_end":1308619,"line_start":1345,"line_end":1345,"column_start":1,"column_end":79}},{"value":"allow(deprecated)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1308644,"byte_end":1308664,"line_start":1347,"line_end":1347,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":2990},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1315913,"byte_end":1315928,"line_start":1566,"line_end":1566,"column_start":8,"column_end":23},"name":"utf8_char_width","qualname":"::str::utf8_char_width","value":"fn (b: u8) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Given a first byte, determines how many bytes are in this UTF-8 character.\n","sig":null,"attributes":[{"value":"unstable(feature = \"str_internals\", issue = \"0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1315844,"byte_end":1315895,"line_start":1564,"line_end":1564,"column_start":1,"column_end":52}},{"value":"inline","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1315896,"byte_end":1315905,"line_start":1565,"line_end":1565,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":3085},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334578,"byte_end":1334584,"line_start":2098,"line_end":2098,"column_start":11,"column_end":17},"name":"StrExt","qualname":"::str::StrExt","value":"StrExt","parent":null,"children":[{"krate":0,"index":3086},{"krate":0,"index":3087},{"krate":0,"index":3088},{"krate":0,"index":3089},{"krate":0,"index":3090},{"krate":0,"index":3091},{"krate":0,"index":3092},{"krate":0,"index":3093},{"krate":0,"index":3094},{"krate":0,"index":3095},{"krate":0,"index":3096},{"krate":0,"index":3097},{"krate":0,"index":3098},{"krate":0,"index":3099},{"krate":0,"index":3100},{"krate":0,"index":3101},{"krate":0,"index":3102},{"krate":0,"index":3103},{"krate":0,"index":3104},{"krate":0,"index":3105},{"krate":0,"index":3106},{"krate":0,"index":3107},{"krate":0,"index":3108},{"krate":0,"index":3109},{"krate":0,"index":3110},{"krate":0,"index":3111},{"krate":0,"index":3112},{"krate":0,"index":3113},{"krate":0,"index":3114},{"krate":0,"index":3115},{"krate":0,"index":3116},{"krate":0,"index":3117},{"krate":0,"index":3118},{"krate":0,"index":3119},{"krate":0,"index":3120},{"krate":0,"index":3121},{"krate":0,"index":3122},{"krate":0,"index":3123},{"krate":0,"index":3124}],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3086},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334751,"byte_end":1334759,"line_start":2103,"line_end":2103,"column_start":8,"column_end":16},"name":"contains","qualname":"::str::StrExt::contains","value":"fn <'a, P> (&'a self, pat: P) -> bool","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3087},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334863,"byte_end":1334868,"line_start":2105,"line_end":2105,"column_start":8,"column_end":13},"name":"chars","qualname":"::str::StrExt::chars","value":"fn (&self) -> Chars","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3088},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334942,"byte_end":1334947,"line_start":2107,"line_end":2107,"column_start":8,"column_end":13},"name":"bytes","qualname":"::str::StrExt::bytes","value":"fn (&self) -> Bytes","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3089},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1335021,"byte_end":1335033,"line_start":2109,"line_end":2109,"column_start":8,"column_end":20},"name":"char_indices","qualname":"::str::StrExt::char_indices","value":"fn (&self) -> CharIndices","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3090},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1335113,"byte_end":1335118,"line_start":2111,"line_end":2111,"column_start":8,"column_end":13},"name":"split","qualname":"::str::StrExt::split","value":"fn <'a, P> (&'a self, pat: P) -> Split<'a, P>","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3091},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1335230,"byte_end":1335236,"line_start":2113,"line_end":2113,"column_start":8,"column_end":14},"name":"rsplit","qualname":"::str::StrExt::rsplit","value":"fn <'a, P> (&'a self, pat: P) -> RSplit<'a, P>","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3092},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1335396,"byte_end":1335402,"line_start":2116,"line_end":2116,"column_start":8,"column_end":14},"name":"splitn","qualname":"::str::StrExt::splitn","value":"fn <'a, P> (&'a self, count: usize, pat: P) -> SplitN<'a, P>","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3093},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1335529,"byte_end":1335536,"line_start":2118,"line_end":2118,"column_start":8,"column_end":15},"name":"rsplitn","qualname":"::str::StrExt::rsplitn","value":"fn <'a, P> (&'a self, count: usize, pat: P) -> RSplitN<'a, P>","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3094},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1335711,"byte_end":1335727,"line_start":2121,"line_end":2121,"column_start":8,"column_end":24},"name":"split_terminator","qualname":"::str::StrExt::split_terminator","value":"fn <'a, P> (&'a self, pat: P) -> SplitTerminator<'a, P>","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3095},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1335849,"byte_end":1335866,"line_start":2123,"line_end":2123,"column_start":8,"column_end":25},"name":"rsplit_terminator","qualname":"::str::StrExt::rsplit_terminator","value":"fn <'a, P> (&'a self, pat: P) -> RSplitTerminator<'a, P>","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3096},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1336036,"byte_end":1336043,"line_start":2126,"line_end":2126,"column_start":8,"column_end":15},"name":"matches","qualname":"::str::StrExt::matches","value":"fn <'a, P> (&'a self, pat: P) -> Matches<'a, P>","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3097},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1336157,"byte_end":1336165,"line_start":2128,"line_end":2128,"column_start":8,"column_end":16},"name":"rmatches","qualname":"::str::StrExt::rmatches","value":"fn <'a, P> (&'a self, pat: P) -> RMatches<'a, P>","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3098},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1336327,"byte_end":1336340,"line_start":2131,"line_end":2131,"column_start":8,"column_end":21},"name":"match_indices","qualname":"::str::StrExt::match_indices","value":"fn <'a, P> (&'a self, pat: P) -> MatchIndices<'a, P>","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3099},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1336459,"byte_end":1336473,"line_start":2133,"line_end":2133,"column_start":8,"column_end":22},"name":"rmatch_indices","qualname":"::str::StrExt::rmatch_indices","value":"fn <'a, P> (&'a self, pat: P) -> RMatchIndices<'a, P>","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3100},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1336640,"byte_end":1336645,"line_start":2136,"line_end":2136,"column_start":8,"column_end":13},"name":"lines","qualname":"::str::StrExt::lines","value":"fn (&self) -> Lines","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3101},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1336821,"byte_end":1336830,"line_start":2140,"line_end":2140,"column_start":8,"column_end":17},"name":"lines_any","qualname":"::str::StrExt::lines_any","value":"fn (&self) -> LinesAny","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3102},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1336923,"byte_end":1336926,"line_start":2142,"line_end":2142,"column_start":8,"column_end":11},"name":"get","qualname":"::str::StrExt::get","value":"fn <I> (&self, i: I) -> Option<&I::Output>","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3103},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1337055,"byte_end":1337062,"line_start":2144,"line_end":2144,"column_start":8,"column_end":15},"name":"get_mut","qualname":"::str::StrExt::get_mut","value":"fn <I> (&mut self, i: I) -> Option<&mut I::Output>","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3104},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1337206,"byte_end":1337219,"line_start":2146,"line_end":2146,"column_start":15,"column_end":28},"name":"get_unchecked","qualname":"::str::StrExt::get_unchecked","value":"fn <I> (&self, i: I) -> &I::Output","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3105},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1337347,"byte_end":1337364,"line_start":2148,"line_end":2148,"column_start":15,"column_end":32},"name":"get_unchecked_mut","qualname":"::str::StrExt::get_unchecked_mut","value":"fn <I> (&mut self, i: I) -> &mut I::Output","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3106},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1337484,"byte_end":1337499,"line_start":2150,"line_end":2150,"column_start":15,"column_end":30},"name":"slice_unchecked","qualname":"::str::StrExt::slice_unchecked","value":"fn (&self, begin: usize, end: usize) -> &str","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3107},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1337605,"byte_end":1337624,"line_start":2152,"line_end":2152,"column_start":15,"column_end":34},"name":"slice_mut_unchecked","qualname":"::str::StrExt::slice_mut_unchecked","value":"fn (&mut self, begin: usize, end: usize) -> &mut str","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3108},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1337731,"byte_end":1337742,"line_start":2154,"line_end":2154,"column_start":8,"column_end":19},"name":"starts_with","qualname":"::str::StrExt::starts_with","value":"fn <'a, P> (&'a self, pat: P) -> bool","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3109},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1337846,"byte_end":1337855,"line_start":2156,"line_end":2156,"column_start":8,"column_end":17},"name":"ends_with","qualname":"::str::StrExt::ends_with","value":"fn <'a, P> (&'a self, pat: P) -> bool","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3110},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1338006,"byte_end":1338018,"line_start":2159,"line_end":2159,"column_start":8,"column_end":20},"name":"trim_matches","qualname":"::str::StrExt::trim_matches","value":"fn <'a, P> (&'a self, pat: P) -> &'a str","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3111},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1338176,"byte_end":1338193,"line_start":2162,"line_end":2162,"column_start":8,"column_end":25},"name":"trim_left_matches","qualname":"::str::StrExt::trim_left_matches","value":"fn <'a, P> (&'a self, pat: P) -> &'a str","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3112},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1338300,"byte_end":1338318,"line_start":2164,"line_end":2164,"column_start":8,"column_end":26},"name":"trim_right_matches","qualname":"::str::StrExt::trim_right_matches","value":"fn <'a, P> (&'a self, pat: P) -> &'a str","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3113},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1338484,"byte_end":1338500,"line_start":2167,"line_end":2167,"column_start":8,"column_end":24},"name":"is_char_boundary","qualname":"::str::StrExt::is_char_boundary","value":"fn (&self, index: usize) -> bool","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3114},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1338587,"byte_end":1338595,"line_start":2169,"line_end":2169,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::str::StrExt::as_bytes","value":"fn (&self) -> &[u8]","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3115},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1338687,"byte_end":1338699,"line_start":2171,"line_end":2171,"column_start":15,"column_end":27},"name":"as_bytes_mut","qualname":"::str::StrExt::as_bytes_mut","value":"fn (&mut self) -> &mut [u8]","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3116},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1338781,"byte_end":1338785,"line_start":2173,"line_end":2173,"column_start":8,"column_end":12},"name":"find","qualname":"::str::StrExt::find","value":"fn <'a, P> (&'a self, pat: P) -> Option<usize>","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3117},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1338898,"byte_end":1338903,"line_start":2175,"line_end":2175,"column_start":8,"column_end":13},"name":"rfind","qualname":"::str::StrExt::rfind","value":"fn <'a, P> (&'a self, pat: P) -> Option<usize>","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3118},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1339014,"byte_end":1339022,"line_start":2177,"line_end":2177,"column_start":8,"column_end":16},"name":"find_str","qualname":"::str::StrExt::find_str","value":"fn <'a, P> (&'a self, pat: P) -> Option<usize>","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3119},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1339135,"byte_end":1339143,"line_start":2179,"line_end":2179,"column_start":8,"column_end":16},"name":"split_at","qualname":"::str::StrExt::split_at","value":"fn (&self, mid: usize) -> (&str, &str)","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3120},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1339236,"byte_end":1339248,"line_start":2181,"line_end":2181,"column_start":8,"column_end":20},"name":"split_at_mut","qualname":"::str::StrExt::split_at_mut","value":"fn (&mut self, mid: usize) -> (&mut str, &mut str)","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3121},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1339353,"byte_end":1339359,"line_start":2183,"line_end":2183,"column_start":8,"column_end":14},"name":"as_ptr","qualname":"::str::StrExt::as_ptr","value":"fn (&self) -> *const u8","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3122},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1339437,"byte_end":1339440,"line_start":2185,"line_end":2185,"column_start":8,"column_end":11},"name":"len","qualname":"::str::StrExt::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3123},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1339514,"byte_end":1339522,"line_start":2187,"line_end":2187,"column_start":8,"column_end":16},"name":"is_empty","qualname":"::str::StrExt::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":3124},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1339595,"byte_end":1339600,"line_start":2189,"line_end":2189,"column_start":8,"column_end":13},"name":"parse","qualname":"::str::StrExt::parse","value":"fn <T> (&self) -> Result<T, T::Err>","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":" Methods for string slices\n","sig":null,"attributes":[{"value":"allow(missing_docs)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334385,"byte_end":1334407,"line_start":2093,"line_end":2093,"column_start":1,"column_end":23}},{"value":"unstable(feature = \"core_str_ext\",\n           reason = \"stable interface provided by `impl str` in later crates\",\n           issue = \"32110\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1334423,"byte_end":1334567,"line_start":2095,"line_end":2097,"column_start":1,"column_end":29}}]},{"kind":"Mod","id":{"krate":0,"index":3172},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hash","qualname":"::hash","value":"src/libcore/hash/mod.rs","parent":null,"children":[{"krate":0,"index":3173},{"krate":0,"index":3174},{"krate":0,"index":3175},{"krate":0,"index":3176},{"krate":0,"index":3179},{"krate":0,"index":3180},{"krate":0,"index":3228},{"krate":0,"index":3231},{"krate":0,"index":3246},{"krate":0,"index":3261},{"krate":0,"index":3264},{"krate":0,"index":3265},{"krate":0,"index":3267},{"krate":0,"index":3270},{"krate":0,"index":3272},{"krate":0,"index":3274}],"decl_id":null,"docs":" Generic hashing support.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1396506,"byte_end":1396552,"line_start":92,"line_end":92,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":17496},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1415664,"byte_end":1415675,"line_start":30,"line_end":30,"column_start":12,"column_end":23},"name":"SipHasher13","qualname":"::hash::sip::SipHasher13","value":"SipHasher13 {  }","parent":null,"children":[{"krate":0,"index":2147495728}],"decl_id":null,"docs":" An implementation of SipHash 1-3.","sig":null,"attributes":[{"value":"unstable(feature = \"sip_hash_13\", issue = \"34767\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1415441,"byte_end":1415494,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"rustc_deprecated(since = \"1.13.0\",\n                   reason =\n                       \"use `std::collections::hash_map::DefaultHasher` instead\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1415495,"byte_end":1415619,"line_start":27,"line_end":28,"column_start":1,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":17503},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1416018,"byte_end":1416029,"line_start":41,"line_end":41,"column_start":12,"column_end":23},"name":"SipHasher24","qualname":"::hash::sip::SipHasher24","value":"SipHasher24 {  }","parent":null,"children":[{"krate":0,"index":2147495729}],"decl_id":null,"docs":" An implementation of SipHash 2-4.","sig":null,"attributes":[{"value":"unstable(feature = \"sip_hash_13\", issue = \"34767\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1415795,"byte_end":1415848,"line_start":37,"line_end":37,"column_start":1,"column_end":54}},{"value":"rustc_deprecated(since = \"1.13.0\",\n                   reason =\n                       \"use `std::collections::hash_map::DefaultHasher` instead\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1415849,"byte_end":1415973,"line_start":38,"line_end":39,"column_start":1,"column_end":88}}]},{"kind":"Struct","id":{"krate":0,"index":17510},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1416881,"byte_end":1416890,"line_start":61,"line_end":61,"column_start":12,"column_end":21},"name":"SipHasher","qualname":"::hash::sip::SipHasher","value":"","parent":null,"children":[],"decl_id":null,"docs":" An implementation of SipHash 2-4.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1416666,"byte_end":1416711,"line_start":57,"line_end":57,"column_start":1,"column_end":46}},{"value":"rustc_deprecated(since = \"1.13.0\",\n                   reason =\n                       \"use `std::collections::hash_map::DefaultHasher` instead\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1416712,"byte_end":1416836,"line_start":58,"line_end":59,"column_start":1,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":3189},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1419745,"byte_end":1419748,"line_start":149,"line_end":149,"column_start":12,"column_end":15},"name":"new","qualname":"<SipHasher>::new","value":"fn () -> SipHasher","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3190},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1420087,"byte_end":1420100,"line_start":158,"line_end":158,"column_start":12,"column_end":25},"name":"new_with_keys","qualname":"<SipHasher>::new_with_keys","value":"fn (key0: u64, key1: u64) -> SipHasher","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3192},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1420512,"byte_end":1420515,"line_start":169,"line_end":169,"column_start":12,"column_end":15},"name":"new","qualname":"<SipHasher13>::new","value":"fn () -> SipHasher13","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3193},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1420868,"byte_end":1420881,"line_start":178,"line_end":178,"column_start":12,"column_end":25},"name":"new_with_keys","qualname":"<SipHasher13>::new_with_keys","value":"fn (key0: u64, key1: u64) -> SipHasher13","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3195},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1421323,"byte_end":1421326,"line_start":191,"line_end":191,"column_start":12,"column_end":15},"name":"new","qualname":"<SipHasher24>::new","value":"fn () -> SipHasher24","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3196},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1421679,"byte_end":1421692,"line_start":200,"line_end":200,"column_start":12,"column_end":25},"name":"new_with_keys","qualname":"<SipHasher24>::new_with_keys","value":"fn (key0: u64, key1: u64) -> SipHasher24","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3220},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1427091,"byte_end":1427099,"line_start":407,"line_end":407,"column_start":8,"column_end":16},"name":"c_rounds","qualname":"::hash::sip::Sip::c_rounds","value":"fn (_: &mut State) -> ()","parent":{"krate":0,"index":3219},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3221},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1427123,"byte_end":1427131,"line_start":408,"line_end":408,"column_start":8,"column_end":16},"name":"d_rounds","qualname":"::hash::sip::Sip::d_rounds","value":"fn (_: &mut State) -> ()","parent":{"krate":0,"index":3219},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3228},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1398466,"byte_end":1398470,"line_start":168,"line_end":168,"column_start":11,"column_end":15},"name":"Hash","qualname":"::hash::Hash","value":"Hash","parent":null,"children":[{"krate":0,"index":3229},{"krate":0,"index":3230}],"decl_id":null,"docs":" A hashable type.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1398410,"byte_end":1398455,"line_start":167,"line_end":167,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3229},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1398920,"byte_end":1398924,"line_start":184,"line_end":184,"column_start":8,"column_end":12},"name":"hash","qualname":"::hash::Hash::hash","value":"fn <H> (&self, state: &mut H) -> ()","parent":{"krate":0,"index":3228},"children":[],"decl_id":null,"docs":" A hashable type.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1398410,"byte_end":1398455,"line_start":167,"line_end":167,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3230},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1399481,"byte_end":1399491,"line_start":202,"line_end":202,"column_start":8,"column_end":18},"name":"hash_slice","qualname":"::hash::Hash::hash_slice","value":"fn <H> (data: &[Self], state: &mut H) -> ()","parent":{"krate":0,"index":3228},"children":[],"decl_id":null,"docs":" A hashable type.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1398410,"byte_end":1398455,"line_start":167,"line_end":167,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":3231},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1400611,"byte_end":1400617,"line_start":242,"line_end":242,"column_start":11,"column_end":17},"name":"Hasher","qualname":"::hash::Hasher","value":"Hasher","parent":null,"children":[{"krate":0,"index":3232},{"krate":0,"index":3233},{"krate":0,"index":3234},{"krate":0,"index":3235},{"krate":0,"index":3236},{"krate":0,"index":3237},{"krate":0,"index":3238},{"krate":0,"index":3239},{"krate":0,"index":3240},{"krate":0,"index":3241},{"krate":0,"index":3242},{"krate":0,"index":3243},{"krate":0,"index":3244},{"krate":0,"index":3245}],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1400555,"byte_end":1400600,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3232},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1401328,"byte_end":1401334,"line_start":264,"line_end":264,"column_start":8,"column_end":14},"name":"finish","qualname":"::hash::Hasher::finish","value":"fn (&self) -> u64","parent":{"krate":0,"index":3231},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1400555,"byte_end":1400600,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3233},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1401819,"byte_end":1401824,"line_start":282,"line_end":282,"column_start":8,"column_end":13},"name":"write","qualname":"::hash::Hasher::write","value":"fn (&mut self, bytes: &[u8]) -> ()","parent":{"krate":0,"index":3231},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1400555,"byte_end":1400600,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3234},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1401977,"byte_end":1401985,"line_start":287,"line_end":287,"column_start":8,"column_end":16},"name":"write_u8","qualname":"::hash::Hasher::write_u8","value":"fn (&mut self, i: u8) -> ()","parent":{"krate":0,"index":3231},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1400555,"byte_end":1400600,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3235},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1402163,"byte_end":1402172,"line_start":293,"line_end":293,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::hash::Hasher::write_u16","value":"fn (&mut self, i: u16) -> ()","parent":{"krate":0,"index":3231},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1400555,"byte_end":1400600,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3236},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1402390,"byte_end":1402399,"line_start":299,"line_end":299,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::hash::Hasher::write_u32","value":"fn (&mut self, i: u32) -> ()","parent":{"krate":0,"index":3231},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1400555,"byte_end":1400600,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3237},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1402617,"byte_end":1402626,"line_start":305,"line_end":305,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::hash::Hasher::write_u64","value":"fn (&mut self, i: u64) -> ()","parent":{"krate":0,"index":3231},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1400555,"byte_end":1400600,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3238},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1402839,"byte_end":1402849,"line_start":311,"line_end":311,"column_start":8,"column_end":18},"name":"write_u128","qualname":"::hash::Hasher::write_u128","value":"fn (&mut self, i: u128) -> ()","parent":{"krate":0,"index":3231},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1400555,"byte_end":1400600,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3239},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1403071,"byte_end":1403082,"line_start":317,"line_end":317,"column_start":8,"column_end":19},"name":"write_usize","qualname":"::hash::Hasher::write_usize","value":"fn (&mut self, i: usize) -> ()","parent":{"krate":0,"index":3231},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1400555,"byte_end":1400600,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3240},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1403399,"byte_end":1403407,"line_start":327,"line_end":327,"column_start":8,"column_end":16},"name":"write_i8","qualname":"::hash::Hasher::write_i8","value":"fn (&mut self, i: i8) -> ()","parent":{"krate":0,"index":3231},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1400555,"byte_end":1400600,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3241},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1403591,"byte_end":1403600,"line_start":333,"line_end":333,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::hash::Hasher::write_i16","value":"fn (&mut self, i: i16) -> ()","parent":{"krate":0,"index":3231},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1400555,"byte_end":1400600,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3242},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1403787,"byte_end":1403796,"line_start":339,"line_end":339,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::hash::Hasher::write_i32","value":"fn (&mut self, i: i32) -> ()","parent":{"krate":0,"index":3231},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1400555,"byte_end":1400600,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3243},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1403983,"byte_end":1403992,"line_start":345,"line_end":345,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::hash::Hasher::write_i64","value":"fn (&mut self, i: i64) -> ()","parent":{"krate":0,"index":3231},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1400555,"byte_end":1400600,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3244},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1404174,"byte_end":1404184,"line_start":351,"line_end":351,"column_start":8,"column_end":18},"name":"write_i128","qualname":"::hash::Hasher::write_i128","value":"fn (&mut self, i: i128) -> ()","parent":{"krate":0,"index":3231},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1400555,"byte_end":1400600,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3245},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1404376,"byte_end":1404387,"line_start":357,"line_end":357,"column_start":8,"column_end":19},"name":"write_isize","qualname":"::hash::Hasher::write_isize","value":"fn (&mut self, i: isize) -> ()","parent":{"krate":0,"index":3231},"children":[],"decl_id":null,"docs":" A trait for hashing an arbitrary stream of bytes.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1400555,"byte_end":1400600,"line_start":241,"line_end":241,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":3261},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1406652,"byte_end":1406663,"line_start":438,"line_end":438,"column_start":11,"column_end":22},"name":"BuildHasher","qualname":"::hash::BuildHasher","value":"BuildHasher","parent":null,"children":[{"krate":0,"index":3262},{"krate":0,"index":3263}],"decl_id":null,"docs":" A trait for creating instances of [`Hasher`].","sig":null,"attributes":[{"value":"stable(since = \"1.7.0\", feature = \"build_hasher\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1406589,"byte_end":1406641,"line_start":437,"line_end":437,"column_start":1,"column_end":53}}]},{"kind":"Type","id":{"krate":0,"index":3262},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1406781,"byte_end":1406787,"line_start":441,"line_end":441,"column_start":10,"column_end":16},"name":"Hasher","qualname":"::hash::BuildHasher::Hasher","value":"type Hasher: Hasher;","parent":{"krate":0,"index":3261},"children":[],"decl_id":null,"docs":" Type of the hasher that will be created.\n","sig":null,"attributes":[{"value":"stable(since = \"1.7.0\", feature = \"build_hasher\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1406719,"byte_end":1406771,"line_start":440,"line_end":440,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":3263},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1407279,"byte_end":1407291,"line_start":460,"line_end":460,"column_start":8,"column_end":20},"name":"build_hasher","qualname":"::hash::BuildHasher::build_hasher","value":"fn (&self) -> Self::Hasher","parent":{"krate":0,"index":3261},"children":[],"decl_id":null,"docs":" A trait for creating instances of [`Hasher`].","sig":null,"attributes":[{"value":"stable(since = \"1.7.0\", feature = \"build_hasher\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1406589,"byte_end":1406641,"line_start":437,"line_end":437,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":3264},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1409020,"byte_end":1409038,"line_start":512,"line_end":512,"column_start":12,"column_end":30},"name":"BuildHasherDefault","qualname":"::hash::BuildHasherDefault","value":"","parent":null,"children":[],"decl_id":null,"docs":" Used to create a default [`BuildHasher`] instance for types that implement\n [`Hasher`] and [`Default`].","sig":null,"attributes":[{"value":"stable(since = \"1.7.0\", feature = \"build_hasher\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1408956,"byte_end":1409008,"line_start":511,"line_end":511,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":3297},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fmt","qualname":"::fmt","value":"src/libcore/fmt/mod.rs","parent":null,"children":[{"krate":0,"index":3303},{"krate":0,"index":3304},{"krate":0,"index":3305},{"krate":0,"index":3306},{"krate":0,"index":3307},{"krate":0,"index":3308},{"krate":0,"index":3309},{"krate":0,"index":3310},{"krate":0,"index":3311},{"krate":0,"index":3328},{"krate":0,"index":3358},{"krate":0,"index":17903},{"krate":0,"index":17904},{"krate":0,"index":3406},{"krate":0,"index":3407},{"krate":0,"index":3409},{"krate":0,"index":17930},{"krate":0,"index":17947},{"krate":0,"index":17945},{"krate":0,"index":17943},{"krate":0,"index":17941},{"krate":0,"index":17939},{"krate":0,"index":17937},{"krate":0,"index":17935},{"krate":0,"index":17933},{"krate":0,"index":17931},{"krate":0,"index":3410},{"krate":0,"index":3419},{"krate":0,"index":3423},{"krate":0,"index":3424},{"krate":0,"index":17948},{"krate":0,"index":17949},{"krate":0,"index":3425},{"krate":0,"index":3427},{"krate":0,"index":17950},{"krate":0,"index":17953},{"krate":0,"index":17951},{"krate":0,"index":3432},{"krate":0,"index":17954},{"krate":0,"index":17957},{"krate":0,"index":17955},{"krate":0,"index":3436},{"krate":0,"index":3438},{"krate":0,"index":3440},{"krate":0,"index":3442},{"krate":0,"index":3444},{"krate":0,"index":3446},{"krate":0,"index":3448},{"krate":0,"index":3450},{"krate":0,"index":3452},{"krate":0,"index":3454},{"krate":0,"index":3456},{"krate":0,"index":3458},{"krate":0,"index":3459},{"krate":0,"index":3485},{"krate":0,"index":3489},{"krate":0,"index":3491},{"krate":0,"index":17958},{"krate":0,"index":17960},{"krate":0,"index":17962},{"krate":0,"index":17964},{"krate":0,"index":17966},{"krate":0,"index":17968},{"krate":0,"index":17970},{"krate":0,"index":17972},{"krate":0,"index":17974},{"krate":0,"index":17976},{"krate":0,"index":17978},{"krate":0,"index":17980},{"krate":0,"index":17982},{"krate":0,"index":17984},{"krate":0,"index":17986},{"krate":0,"index":17988},{"krate":0,"index":3492},{"krate":0,"index":3494},{"krate":0,"index":3496},{"krate":0,"index":3498},{"krate":0,"index":3500},{"krate":0,"index":3502},{"krate":0,"index":3504},{"krate":0,"index":3506},{"krate":0,"index":3508},{"krate":0,"index":3510},{"krate":0,"index":3512},{"krate":0,"index":3514},{"krate":0,"index":3516},{"krate":0,"index":3518},{"krate":0,"index":3520},{"krate":0,"index":3521},{"krate":0,"index":3522},{"krate":0,"index":17990},{"krate":0,"index":17992},{"krate":0,"index":17994},{"krate":0,"index":17996},{"krate":0,"index":17998},{"krate":0,"index":18000},{"krate":0,"index":18002},{"krate":0,"index":18004},{"krate":0,"index":18006},{"krate":0,"index":18008},{"krate":0,"index":18010},{"krate":0,"index":18012},{"krate":0,"index":3523},{"krate":0,"index":3525},{"krate":0,"index":3527},{"krate":0,"index":3529},{"krate":0,"index":3531},{"krate":0,"index":3536},{"krate":0,"index":3538},{"krate":0,"index":3540}],"decl_id":null,"docs":" Utilities for formatting and printing strings.\n","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1428333,"byte_end":1428379,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":3339},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1488520,"byte_end":1488524,"line_start":26,"line_end":26,"column_start":8,"column_end":12},"name":"zero","qualname":"::fmt::num::Int::zero","value":"fn () -> Self","parent":{"krate":0,"index":3338},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3340},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1488543,"byte_end":1488550,"line_start":27,"line_end":27,"column_start":8,"column_end":15},"name":"from_u8","qualname":"::fmt::num::Int::from_u8","value":"fn (u: u8) -> Self","parent":{"krate":0,"index":3338},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3341},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1488574,"byte_end":1488579,"line_start":28,"line_end":28,"column_start":8,"column_end":13},"name":"to_u8","qualname":"::fmt::num::Int::to_u8","value":"fn (&self) -> u8","parent":{"krate":0,"index":3338},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3342},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1488601,"byte_end":1488607,"line_start":29,"line_end":29,"column_start":8,"column_end":14},"name":"to_u16","qualname":"::fmt::num::Int::to_u16","value":"fn (&self) -> u16","parent":{"krate":0,"index":3338},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3343},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1488630,"byte_end":1488636,"line_start":30,"line_end":30,"column_start":8,"column_end":14},"name":"to_u32","qualname":"::fmt::num::Int::to_u32","value":"fn (&self) -> u32","parent":{"krate":0,"index":3338},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3344},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1488659,"byte_end":1488665,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"to_u64","qualname":"::fmt::num::Int::to_u64","value":"fn (&self) -> u64","parent":{"krate":0,"index":3338},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3345},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1488688,"byte_end":1488695,"line_start":32,"line_end":32,"column_start":8,"column_end":15},"name":"to_u128","qualname":"::fmt::num::Int::to_u128","value":"fn (&self) -> u128","parent":{"krate":0,"index":3338},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3348},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1489288,"byte_end":1489292,"line_start":52,"line_end":52,"column_start":8,"column_end":12},"name":"base","qualname":"::fmt::num::GenericRadix::base","value":"fn (&self) -> u8","parent":{"krate":0,"index":3347},"children":[],"decl_id":null,"docs":" A type that represents a specific radix\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3349},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1489355,"byte_end":1489361,"line_start":55,"line_end":55,"column_start":8,"column_end":14},"name":"prefix","qualname":"::fmt::num::GenericRadix::prefix","value":"fn (&self) -> &'static str","parent":{"krate":0,"index":3347},"children":[],"decl_id":null,"docs":" A type that represents a specific radix\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3350},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1489470,"byte_end":1489475,"line_start":60,"line_end":60,"column_start":8,"column_end":13},"name":"digit","qualname":"::fmt::num::GenericRadix::digit","value":"fn (&self, x: u8) -> u8","parent":{"krate":0,"index":3347},"children":[],"decl_id":null,"docs":" A type that represents a specific radix\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3351},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1489566,"byte_end":1489573,"line_start":63,"line_end":63,"column_start":8,"column_end":15},"name":"fmt_int","qualname":"::fmt::num::GenericRadix::fmt_int","value":"fn <T> (&self, mut x: T, f: &mut fmt::Formatter) -> fmt::Result","parent":{"krate":0,"index":3347},"children":[],"decl_id":null,"docs":" A type that represents a specific radix\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3365},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1499501,"byte_end":1499512,"line_start":86,"line_end":86,"column_start":12,"column_end":23},"name":"DebugStruct","qualname":"::fmt::builders::DebugStruct","value":"DebugStruct {  }","parent":null,"children":[{"krate":0,"index":2147485619},{"krate":0,"index":2147485620},{"krate":0,"index":2147485621}],"decl_id":null,"docs":" A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.","sig":null,"attributes":[{"value":"must_use","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1499383,"byte_end":1499394,"line_start":83,"line_end":83,"column_start":1,"column_end":12}},{"value":"allow(missing_debug_implementations)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1499395,"byte_end":1499434,"line_start":84,"line_end":84,"column_start":1,"column_end":40}},{"value":"stable(feature = \"debug_builders\", since = \"1.2.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1499435,"byte_end":1499489,"line_start":85,"line_end":85,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":3366},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1499621,"byte_end":1499637,"line_start":92,"line_end":92,"column_start":8,"column_end":24},"name":"debug_struct_new","qualname":"::fmt::builders::debug_struct_new","value":"fn <'a, 'b, > (fmt: &'a mut fmt::Formatter<'b>, name: &str) -> DebugStruct<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3368},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1500067,"byte_end":1500072,"line_start":106,"line_end":106,"column_start":12,"column_end":17},"name":"field","qualname":"<DebugStruct<'a, 'b>>::field","value":"fn (&mut self, name: &str, value: &fmt::Debug) -> &mut DebugStruct<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3369},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1500830,"byte_end":1500836,"line_start":129,"line_end":129,"column_start":12,"column_end":18},"name":"finish","qualname":"<DebugStruct<'a, 'b>>::finish","value":"fn (&mut self) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3371},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1502139,"byte_end":1502149,"line_start":178,"line_end":178,"column_start":12,"column_end":22},"name":"DebugTuple","qualname":"::fmt::builders::DebugTuple","value":"DebugTuple {  }","parent":null,"children":[{"krate":0,"index":2147485630},{"krate":0,"index":2147485631},{"krate":0,"index":2147485632},{"krate":0,"index":2147485633}],"decl_id":null,"docs":" A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.","sig":null,"attributes":[{"value":"must_use","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1502021,"byte_end":1502032,"line_start":175,"line_end":175,"column_start":1,"column_end":12}},{"value":"allow(missing_debug_implementations)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1502033,"byte_end":1502072,"line_start":176,"line_end":176,"column_start":1,"column_end":40}},{"value":"stable(feature = \"debug_builders\", since = \"1.2.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1502073,"byte_end":1502127,"line_start":177,"line_end":177,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":3372},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1502277,"byte_end":1502292,"line_start":185,"line_end":185,"column_start":8,"column_end":23},"name":"debug_tuple_new","qualname":"::fmt::builders::debug_tuple_new","value":"fn <'a, 'b, > (fmt: &'a mut fmt::Formatter<'b>, name: &str) -> DebugTuple<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3374},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1502690,"byte_end":1502695,"line_start":198,"line_end":198,"column_start":12,"column_end":17},"name":"field","qualname":"<DebugTuple<'a, 'b>>::field","value":"fn (&mut self, value: &fmt::Debug) -> &mut DebugTuple<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3375},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1503416,"byte_end":1503422,"line_start":220,"line_end":220,"column_start":12,"column_end":18},"name":"finish","qualname":"<DebugTuple<'a, 'b>>::finish","value":"fn (&mut self) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3380},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1504789,"byte_end":1504795,"line_start":270,"line_end":270,"column_start":12,"column_end":18},"name":"finish","qualname":"<DebugInner<'a, 'b>>::finish","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3382},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1505888,"byte_end":1505896,"line_start":312,"line_end":312,"column_start":12,"column_end":20},"name":"DebugSet","qualname":"::fmt::builders::DebugSet","value":"DebugSet {  }","parent":null,"children":[{"krate":0,"index":2147485651}],"decl_id":null,"docs":" A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.","sig":null,"attributes":[{"value":"must_use","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1505770,"byte_end":1505781,"line_start":309,"line_end":309,"column_start":1,"column_end":12}},{"value":"allow(missing_debug_implementations)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1505782,"byte_end":1505821,"line_start":310,"line_end":310,"column_start":1,"column_end":40}},{"value":"stable(feature = \"debug_builders\", since = \"1.2.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1505822,"byte_end":1505876,"line_start":311,"line_end":311,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":3383},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1505952,"byte_end":1505965,"line_start":316,"line_end":316,"column_start":8,"column_end":21},"name":"debug_set_new","qualname":"::fmt::builders::debug_set_new","value":"fn <'a, 'b, > (fmt: &'a mut fmt::Formatter<'b>) -> DebugSet<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3385},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1506346,"byte_end":1506351,"line_start":330,"line_end":330,"column_start":12,"column_end":17},"name":"entry","qualname":"<DebugSet<'a, 'b>>::entry","value":"fn (&mut self, entry: &fmt::Debug) -> &mut DebugSet<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3386},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1506604,"byte_end":1506611,"line_start":337,"line_end":337,"column_start":12,"column_end":19},"name":"entries","qualname":"<DebugSet<'a, 'b>>::entries","value":"fn <D, I> (&mut self, entries: I) -> &mut DebugSet<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3387},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1506963,"byte_end":1506969,"line_start":349,"line_end":349,"column_start":12,"column_end":18},"name":"finish","qualname":"<DebugSet<'a, 'b>>::finish","value":"fn (&mut self) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3388},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1507912,"byte_end":1507921,"line_start":383,"line_end":383,"column_start":12,"column_end":21},"name":"DebugList","qualname":"::fmt::builders::DebugList","value":"DebugList {  }","parent":null,"children":[{"krate":0,"index":2147485661}],"decl_id":null,"docs":" A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.","sig":null,"attributes":[{"value":"must_use","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1507794,"byte_end":1507805,"line_start":380,"line_end":380,"column_start":1,"column_end":12}},{"value":"allow(missing_debug_implementations)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1507806,"byte_end":1507845,"line_start":381,"line_end":381,"column_start":1,"column_end":40}},{"value":"stable(feature = \"debug_builders\", since = \"1.2.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1507846,"byte_end":1507900,"line_start":382,"line_end":382,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":3389},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1507977,"byte_end":1507991,"line_start":387,"line_end":387,"column_start":8,"column_end":22},"name":"debug_list_new","qualname":"::fmt::builders::debug_list_new","value":"fn <'a, 'b, > (fmt: &'a mut fmt::Formatter<'b>) -> DebugList<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3391},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1508375,"byte_end":1508380,"line_start":401,"line_end":401,"column_start":12,"column_end":17},"name":"entry","qualname":"<DebugList<'a, 'b>>::entry","value":"fn (&mut self, entry: &fmt::Debug) -> &mut DebugList<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3392},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1508635,"byte_end":1508642,"line_start":408,"line_end":408,"column_start":12,"column_end":19},"name":"entries","qualname":"<DebugList<'a, 'b>>::entries","value":"fn <D, I> (&mut self, entries: I) -> &mut DebugList<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3393},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1508995,"byte_end":1509001,"line_start":420,"line_end":420,"column_start":12,"column_end":18},"name":"finish","qualname":"<DebugList<'a, 'b>>::finish","value":"fn (&mut self) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3394},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1510019,"byte_end":1510027,"line_start":454,"line_end":454,"column_start":12,"column_end":20},"name":"DebugMap","qualname":"::fmt::builders::DebugMap","value":"DebugMap {  }","parent":null,"children":[{"krate":0,"index":2147485671},{"krate":0,"index":2147485672},{"krate":0,"index":2147485673}],"decl_id":null,"docs":" A struct to help with [`fmt::Debug`](trait.Debug.html) implementations.","sig":null,"attributes":[{"value":"must_use","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1509901,"byte_end":1509912,"line_start":451,"line_end":451,"column_start":1,"column_end":12}},{"value":"allow(missing_debug_implementations)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1509913,"byte_end":1509952,"line_start":452,"line_end":452,"column_start":1,"column_end":40}},{"value":"stable(feature = \"debug_builders\", since = \"1.2.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1509953,"byte_end":1510007,"line_start":453,"line_end":453,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":3395},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1510136,"byte_end":1510149,"line_start":460,"line_end":460,"column_start":8,"column_end":21},"name":"debug_map_new","qualname":"::fmt::builders::debug_map_new","value":"fn <'a, 'b, > (fmt: &'a mut fmt::Formatter<'b>) -> DebugMap<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3397},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1510479,"byte_end":1510484,"line_start":472,"line_end":472,"column_start":12,"column_end":17},"name":"entry","qualname":"<DebugMap<'a, 'b>>::entry","value":"fn (&mut self, key: &fmt::Debug, value: &fmt::Debug) -> &mut DebugMap<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3398},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1511418,"byte_end":1511425,"line_start":499,"line_end":499,"column_start":12,"column_end":19},"name":"entries","qualname":"<DebugMap<'a, 'b>>::entries","value":"fn <K, V, I> (&mut self, entries: I) -> &mut DebugMap<'a, 'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3399},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1511815,"byte_end":1511821,"line_start":512,"line_end":512,"column_start":12,"column_end":18},"name":"finish","qualname":"<DebugMap<'a, 'b>>::finish","value":"fn (&mut self) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147495879},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1428781,"byte_end":1428785,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"Left","qualname":"::fmt::Alignment::Left","value":"Alignment::Left","parent":{"krate":0,"index":17903},"children":[],"decl_id":null,"docs":" Indication that contents should be left-aligned.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147495880},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1428849,"byte_end":1428854,"line_start":35,"line_end":35,"column_start":5,"column_end":10},"name":"Right","qualname":"::fmt::Alignment::Right","value":"Alignment::Right","parent":{"krate":0,"index":17903},"children":[],"decl_id":null,"docs":" Indication that contents should be right-aligned.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147495881},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1428919,"byte_end":1428925,"line_start":37,"line_end":37,"column_start":5,"column_end":11},"name":"Center","qualname":"::fmt::Alignment::Center","value":"Alignment::Center","parent":{"krate":0,"index":17903},"children":[],"decl_id":null,"docs":" Indication that contents should be center-aligned.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147495882},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1428967,"byte_end":1428974,"line_start":39,"line_end":39,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::fmt::Alignment::Unknown","value":"Alignment::Unknown","parent":{"krate":0,"index":17903},"children":[],"decl_id":null,"docs":" No alignment was requested.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":17903},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1428708,"byte_end":1428717,"line_start":31,"line_end":31,"column_start":10,"column_end":19},"name":"Alignment","qualname":"::fmt::Alignment","value":"Alignment::{Left, Right, Center, Unknown}","parent":null,"children":[{"krate":0,"index":2147495879},{"krate":0,"index":2147495880},{"krate":0,"index":2147495881},{"krate":0,"index":2147495882}],"decl_id":null,"docs":" Possible alignments returned by `Formatter::align`\n","sig":null,"attributes":[{"value":"unstable(feature = \"fmt_flags_align\", issue = \"27726\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1428569,"byte_end":1428626,"line_start":28,"line_end":28,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":3407},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1429240,"byte_end":1429242,"line_start":48,"line_end":48,"column_start":9,"column_end":11},"name":"rt","qualname":"::fmt::rt","value":"src/libcore/fmt/mod.rs","parent":null,"children":[{"krate":0,"index":3408}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"unstable(feature = \"fmt_internals\",\n           reason = \"internal to format_args!\",\n           issue = \"0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1429117,"byte_end":1429216,"line_start":45,"line_end":46,"column_start":1,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":3408},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"v1","qualname":"::fmt::rt::v1","value":"src/libcore/fmt/rt/v1.rs","parent":null,"children":[{"krate":0,"index":17906},{"krate":0,"index":17909},{"krate":0,"index":17907},{"krate":0,"index":17910},{"krate":0,"index":17913},{"krate":0,"index":17911},{"krate":0,"index":17914},{"krate":0,"index":17921},{"krate":0,"index":17919},{"krate":0,"index":17917},{"krate":0,"index":17915},{"krate":0,"index":17922},{"krate":0,"index":17925},{"krate":0,"index":17923},{"krate":0,"index":17926},{"krate":0,"index":17929},{"krate":0,"index":17927}],"decl_id":null,"docs":" This is an internal module used by the ifmt! runtime. These structures are\n emitted to static arrays to precompile format strings ahead of time.","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1512902,"byte_end":1512942,"line_start":16,"line_end":16,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":17906},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1512978,"byte_end":1512986,"line_start":19,"line_end":19,"column_start":12,"column_end":20},"name":"Argument","qualname":"::fmt::rt::v1::Argument","value":"Argument { position, format }","parent":null,"children":[{"krate":0,"index":2147495883},{"krate":0,"index":2147495884}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1512967,"byte_end":1513046,"line_start":19,"line_end":22,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":2147495883},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1512997,"byte_end":1513005,"line_start":20,"line_end":20,"column_start":9,"column_end":17},"name":"position","qualname":"::fmt::rt::v1::Argument::position","value":"fmt::rt::v1::Position","parent":{"krate":0,"index":17906},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2147495884},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513025,"byte_end":1513031,"line_start":21,"line_end":21,"column_start":9,"column_end":15},"name":"format","qualname":"::fmt::rt::v1::Argument::format","value":"fmt::rt::v1::FormatSpec","parent":{"krate":0,"index":17906},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17910},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513082,"byte_end":1513092,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"FormatSpec","qualname":"::fmt::rt::v1::FormatSpec","value":"FormatSpec { fill, align, flags, precision, width }","parent":null,"children":[{"krate":0,"index":2147495885},{"krate":0,"index":2147495886},{"krate":0,"index":2147495887},{"krate":0,"index":2147495888},{"krate":0,"index":2147495889}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513071,"byte_end":1513210,"line_start":25,"line_end":31,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":2147495885},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513103,"byte_end":1513107,"line_start":26,"line_end":26,"column_start":9,"column_end":13},"name":"fill","qualname":"::fmt::rt::v1::FormatSpec::fill","value":"char","parent":{"krate":0,"index":17910},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2147495886},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513123,"byte_end":1513128,"line_start":27,"line_end":27,"column_start":9,"column_end":14},"name":"align","qualname":"::fmt::rt::v1::FormatSpec::align","value":"fmt::rt::v1::Alignment","parent":{"krate":0,"index":17910},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2147495887},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513149,"byte_end":1513154,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"name":"flags","qualname":"::fmt::rt::v1::FormatSpec::flags","value":"u32","parent":{"krate":0,"index":17910},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2147495888},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513169,"byte_end":1513178,"line_start":29,"line_end":29,"column_start":9,"column_end":18},"name":"precision","qualname":"::fmt::rt::v1::FormatSpec::precision","value":"fmt::rt::v1::Count","parent":{"krate":0,"index":17910},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":2147495889},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513195,"byte_end":1513200,"line_start":30,"line_end":30,"column_start":9,"column_end":14},"name":"width","qualname":"::fmt::rt::v1::FormatSpec::width","value":"fmt::rt::v1::Count","parent":{"krate":0,"index":17910},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147495890},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513413,"byte_end":1513417,"line_start":37,"line_end":37,"column_start":5,"column_end":9},"name":"Left","qualname":"::fmt::rt::v1::Alignment::Left","value":"Alignment::Left","parent":{"krate":0,"index":17914},"children":[],"decl_id":null,"docs":" Indication that contents should be left-aligned.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147495891},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513481,"byte_end":1513486,"line_start":39,"line_end":39,"column_start":5,"column_end":10},"name":"Right","qualname":"::fmt::rt::v1::Alignment::Right","value":"Alignment::Right","parent":{"krate":0,"index":17914},"children":[],"decl_id":null,"docs":" Indication that contents should be right-aligned.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147495892},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513551,"byte_end":1513557,"line_start":41,"line_end":41,"column_start":5,"column_end":11},"name":"Center","qualname":"::fmt::rt::v1::Alignment::Center","value":"Alignment::Center","parent":{"krate":0,"index":17914},"children":[],"decl_id":null,"docs":" Indication that contents should be center-aligned.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147495893},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513599,"byte_end":1513606,"line_start":43,"line_end":43,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::fmt::rt::v1::Alignment::Unknown","value":"Alignment::Unknown","parent":{"krate":0,"index":17914},"children":[],"decl_id":null,"docs":" No alignment was requested.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":17914},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513340,"byte_end":1513349,"line_start":35,"line_end":35,"column_start":10,"column_end":19},"name":"Alignment","qualname":"::fmt::rt::v1::Alignment","value":"Alignment::{Left, Right, Center, Unknown}","parent":null,"children":[{"krate":0,"index":2147495890},{"krate":0,"index":2147495891},{"krate":0,"index":2147495892},{"krate":0,"index":2147495893}],"decl_id":null,"docs":" Possible alignments that can be requested as part of a formatting directive.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513331,"byte_end":1513609,"line_start":35,"line_end":44,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513331,"byte_end":1513609,"line_start":35,"line_end":44,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147495894},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513655,"byte_end":1513657,"line_start":48,"line_end":48,"column_start":5,"column_end":7},"name":"Is","qualname":"::fmt::rt::v1::Count::Is","value":"Count::Is(usize)","parent":{"krate":0,"index":17922},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147495896},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513670,"byte_end":1513675,"line_start":49,"line_end":49,"column_start":5,"column_end":10},"name":"Param","qualname":"::fmt::rt::v1::Count::Param","value":"Count::Param(usize)","parent":{"krate":0,"index":17922},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147495898},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513688,"byte_end":1513697,"line_start":50,"line_end":50,"column_start":5,"column_end":14},"name":"NextParam","qualname":"::fmt::rt::v1::Count::NextParam","value":"Count::NextParam","parent":{"krate":0,"index":17922},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147495899},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513703,"byte_end":1513710,"line_start":51,"line_end":51,"column_start":5,"column_end":12},"name":"Implied","qualname":"::fmt::rt::v1::Count::Implied","value":"Count::Implied","parent":{"krate":0,"index":17922},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":17922},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513643,"byte_end":1513648,"line_start":47,"line_end":47,"column_start":10,"column_end":15},"name":"Count","qualname":"::fmt::rt::v1::Count","value":"Count::{Is, Param, NextParam, Implied}","parent":null,"children":[{"krate":0,"index":2147495894},{"krate":0,"index":2147495896},{"krate":0,"index":2147495898},{"krate":0,"index":2147495899}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513634,"byte_end":1513713,"line_start":47,"line_end":52,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147495900},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513762,"byte_end":1513766,"line_start":56,"line_end":56,"column_start":5,"column_end":9},"name":"Next","qualname":"::fmt::rt::v1::Position::Next","value":"Position::Next","parent":{"krate":0,"index":17926},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2147495901},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513772,"byte_end":1513774,"line_start":57,"line_end":57,"column_start":5,"column_end":7},"name":"At","qualname":"::fmt::rt::v1::Position::At","value":"Position::At(usize)","parent":{"krate":0,"index":17926},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":17926},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513747,"byte_end":1513755,"line_start":55,"line_end":55,"column_start":10,"column_end":18},"name":"Position","qualname":"::fmt::rt::v1::Position","value":"Position::{Next, At}","parent":null,"children":[{"krate":0,"index":2147495900},{"krate":0,"index":2147495901}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,114,116,47,118,49,46,114,115],"byte_start":1513738,"byte_end":1513784,"line_start":55,"line_end":58,"column_start":1,"column_end":2}}]},{"kind":"Type","id":{"krate":0,"index":3409},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1429816,"byte_end":1429822,"line_start":77,"line_end":77,"column_start":10,"column_end":16},"name":"Result","qualname":"::fmt::Result","value":"result::Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" The type returned by formatter methods.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1429761,"byte_end":1429806,"line_start":76,"line_end":76,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17930},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1430693,"byte_end":1430698,"line_start":102,"line_end":102,"column_start":12,"column_end":17},"name":"Error","qualname":"::fmt::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type which is returned from formatting a message into a stream.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1430559,"byte_end":1430604,"line_start":100,"line_end":100,"column_start":1,"column_end":46}},{"value":"structural_match","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1430682,"byte_end":1430699,"line_start":102,"line_end":102,"column_start":1,"column_end":18}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1430682,"byte_end":1430699,"line_start":102,"line_end":102,"column_start":1,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":3410},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1431366,"byte_end":1431371,"line_start":117,"line_end":117,"column_start":11,"column_end":16},"name":"Write","qualname":"::fmt::Write","value":"Write","parent":null,"children":[{"krate":0,"index":3411},{"krate":0,"index":3412},{"krate":0,"index":3413}],"decl_id":null,"docs":" A collection of methods that are required to format a message into a stream.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1431310,"byte_end":1431355,"line_start":116,"line_end":116,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3411},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1432206,"byte_end":1432215,"line_start":145,"line_end":145,"column_start":8,"column_end":17},"name":"write_str","qualname":"::fmt::Write::write_str","value":"fn (&mut self, s: &str) -> Result","parent":{"krate":0,"index":3410},"children":[],"decl_id":null,"docs":" A collection of methods that are required to format a message into a stream.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1431310,"byte_end":1431355,"line_start":116,"line_end":116,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3412},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1433226,"byte_end":1433236,"line_start":176,"line_end":176,"column_start":8,"column_end":18},"name":"write_char","qualname":"::fmt::Write::write_char","value":"fn (&mut self, c: char) -> Result","parent":{"krate":0,"index":3410},"children":[],"decl_id":null,"docs":" A collection of methods that are required to format a message into a stream.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1431310,"byte_end":1431355,"line_start":116,"line_end":116,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3413},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1434002,"byte_end":1434011,"line_start":201,"line_end":201,"column_start":8,"column_end":17},"name":"write_fmt","qualname":"::fmt::Write::write_fmt","value":"fn (&mut self, args: Arguments) -> Result","parent":{"krate":0,"index":3410},"children":[],"decl_id":null,"docs":" A collection of methods that are required to format a message into a stream.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1431310,"byte_end":1431355,"line_start":116,"line_end":116,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":3423},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1435405,"byte_end":1435414,"line_start":247,"line_end":247,"column_start":12,"column_end":21},"name":"Formatter","qualname":"::fmt::Formatter","value":"Formatter {  }","parent":null,"children":[{"krate":0,"index":2147485694},{"krate":0,"index":2147485695},{"krate":0,"index":2147485696},{"krate":0,"index":2147485697},{"krate":0,"index":2147485698},{"krate":0,"index":2147485699},{"krate":0,"index":2147485700},{"krate":0,"index":2147485701}],"decl_id":null,"docs":" A struct to represent both where to emit formatting strings to and how they\n should be formatted. A mutable version of this is passed to all formatting\n traits.\n","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1435308,"byte_end":1435347,"line_start":245,"line_end":245,"column_start":1,"column_end":40}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1435348,"byte_end":1435393,"line_start":246,"line_end":246,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":17948},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1436331,"byte_end":1436341,"line_start":275,"line_end":275,"column_start":12,"column_end":22},"name":"ArgumentV1","qualname":"::fmt::ArgumentV1","value":"ArgumentV1 {  }","parent":null,"children":[{"krate":0,"index":2147495905},{"krate":0,"index":2147495906}],"decl_id":null,"docs":" This struct represents the generic \"argument\" which is taken by the Xprintf\n family of functions. It contains a function to format the given value. At\n compile time it is ensured that the function and the value have the correct\n types, and then this struct is used to canonicalize arguments to one type.\n","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1436165,"byte_end":1436204,"line_start":271,"line_end":271,"column_start":1,"column_end":40}},{"value":"unstable(feature = \"fmt_internals\",\n           reason = \"internal to format_args!\",\n           issue = \"0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1436205,"byte_end":1436304,"line_start":272,"line_end":273,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":3429},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1436902,"byte_end":1436905,"line_start":297,"line_end":297,"column_start":12,"column_end":15},"name":"new","qualname":"<ArgumentV1<'a>>::new","value":"fn <'b, T> (x: &'b T, f: fn(&T, &mut Formatter) -> Result) -> ArgumentV1<'b>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3430},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1437300,"byte_end":1437310,"line_start":310,"line_end":310,"column_start":12,"column_end":22},"name":"from_usize","qualname":"<ArgumentV1<'a>>::from_usize","value":"fn (x: &usize) -> ArgumentV1","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3433},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1438060,"byte_end":1438066,"line_start":333,"line_end":333,"column_start":12,"column_end":18},"name":"new_v1","qualname":"<Arguments<'a>>::new_v1","value":"fn (pieces: &'a [&'a str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3434},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1438822,"byte_end":1438838,"line_start":351,"line_end":351,"column_start":12,"column_end":28},"name":"new_v1_formatted","qualname":"<Arguments<'a>>::new_v1_formatted","value":"fn (pieces: &'a [&'a str], args: &'a [ArgumentV1<'a>], fmt: &'a [rt::v1::Argument]) -> Arguments<'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3435},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1439458,"byte_end":1439476,"line_start":368,"line_end":368,"column_start":12,"column_end":30},"name":"estimated_capacity","qualname":"<Arguments<'a>>::estimated_capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17954},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1440931,"byte_end":1440940,"line_start":403,"line_end":403,"column_start":12,"column_end":21},"name":"Arguments","qualname":"::fmt::Arguments","value":"Arguments {  }","parent":null,"children":[{"krate":0,"index":2147495913},{"krate":0,"index":2147495914},{"krate":0,"index":2147495915}],"decl_id":null,"docs":" This structure represents a safely precompiled version of a format string\n and its arguments. This cannot be generated at runtime because it cannot\n safely be done, so no constructors are given and the fields are private\n to prevent modification.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1440851,"byte_end":1440896,"line_start":401,"line_end":401,"column_start":1,"column_end":46}},{"value":"rustc_copy_clone_marker","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1440920,"byte_end":1441302,"line_start":403,"line_end":413,"column_start":1,"column_end":2}}]},{"kind":"Trait","id":{"krate":0,"index":3440},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1444231,"byte_end":1444236,"line_start":526,"line_end":526,"column_start":11,"column_end":16},"name":"Debug","qualname":"::fmt::Debug","value":"Debug","parent":null,"children":[{"krate":0,"index":3441}],"decl_id":null,"docs":" `?` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1443940,"byte_end":1443985,"line_start":521,"line_end":521,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` cannot be formatted using `:?`; if it is defined in your crate, add `#[derive(Debug)]` or manually implement it\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1443986,"byte_end":1444196,"line_start":522,"line_end":524,"column_start":1,"column_end":52}},{"value":"lang = \"debug_trait\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1444197,"byte_end":1444220,"line_start":525,"line_end":525,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":3441},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1444349,"byte_end":1444352,"line_start":529,"line_end":529,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::Debug::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":3440},"children":[],"decl_id":null,"docs":" `?` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1443940,"byte_end":1443985,"line_start":521,"line_end":521,"column_start":1,"column_end":46}},{"value":"rustc_on_unimplemented =\n      \"`{Self}` cannot be formatted using `:?`; if it is defined in your crate, add `#[derive(Debug)]` or manually implement it\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1443986,"byte_end":1444196,"line_start":522,"line_end":524,"column_start":1,"column_end":52}},{"value":"lang = \"debug_trait\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1444197,"byte_end":1444220,"line_start":525,"line_end":525,"column_start":1,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":3442},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1445401,"byte_end":1445408,"line_start":569,"line_end":569,"column_start":11,"column_end":18},"name":"Display","qualname":"::fmt::Display","value":"Display","parent":null,"children":[{"krate":0,"index":3443}],"decl_id":null,"docs":" Format trait for an empty format, `{}`.","sig":null,"attributes":[{"value":"rustc_on_unimplemented =\n      \"`{Self}` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1445142,"byte_end":1445344,"line_start":565,"line_end":567,"column_start":1,"column_end":46}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1445345,"byte_end":1445390,"line_start":568,"line_end":568,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3443},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1446050,"byte_end":1446053,"line_start":592,"line_end":592,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::Display::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":3442},"children":[],"decl_id":null,"docs":" Format trait for an empty format, `{}`.","sig":null,"attributes":[{"value":"rustc_on_unimplemented =\n      \"`{Self}` cannot be formatted with the default formatter; try using `:?` instead if you are using a format string\"","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1445142,"byte_end":1445344,"line_start":565,"line_end":567,"column_start":1,"column_end":46}},{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1445345,"byte_end":1445390,"line_start":568,"line_end":568,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":3444},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1447045,"byte_end":1447050,"line_start":636,"line_end":636,"column_start":11,"column_end":16},"name":"Octal","qualname":"::fmt::Octal","value":"Octal","parent":null,"children":[{"krate":0,"index":3445}],"decl_id":null,"docs":" `o` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1446989,"byte_end":1447034,"line_start":635,"line_end":635,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3445},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1447163,"byte_end":1447166,"line_start":639,"line_end":639,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::Octal::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":3444},"children":[],"decl_id":null,"docs":" `o` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1446989,"byte_end":1447034,"line_start":635,"line_end":635,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":3446},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1448177,"byte_end":1448183,"line_start":683,"line_end":683,"column_start":11,"column_end":17},"name":"Binary","qualname":"::fmt::Binary","value":"Binary","parent":null,"children":[{"krate":0,"index":3447}],"decl_id":null,"docs":" `b` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1448121,"byte_end":1448166,"line_start":682,"line_end":682,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3447},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1448296,"byte_end":1448299,"line_start":686,"line_end":686,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::Binary::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":3446},"children":[],"decl_id":null,"docs":" `b` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1448121,"byte_end":1448166,"line_start":682,"line_end":682,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":3448},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1449341,"byte_end":1449349,"line_start":731,"line_end":731,"column_start":11,"column_end":19},"name":"LowerHex","qualname":"::fmt::LowerHex","value":"LowerHex","parent":null,"children":[{"krate":0,"index":3449}],"decl_id":null,"docs":" `x` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1449285,"byte_end":1449330,"line_start":730,"line_end":730,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3449},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1449462,"byte_end":1449465,"line_start":734,"line_end":734,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::LowerHex::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":3448},"children":[],"decl_id":null,"docs":" `x` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1449285,"byte_end":1449330,"line_start":730,"line_end":730,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":3450},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1450507,"byte_end":1450515,"line_start":779,"line_end":779,"column_start":11,"column_end":19},"name":"UpperHex","qualname":"::fmt::UpperHex","value":"UpperHex","parent":null,"children":[{"krate":0,"index":3451}],"decl_id":null,"docs":" `X` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1450451,"byte_end":1450496,"line_start":778,"line_end":778,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3451},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1450628,"byte_end":1450631,"line_start":782,"line_end":782,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::UpperHex::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":3450},"children":[],"decl_id":null,"docs":" `X` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1450451,"byte_end":1450496,"line_start":778,"line_end":778,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":3452},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1451639,"byte_end":1451646,"line_start":824,"line_end":824,"column_start":11,"column_end":18},"name":"Pointer","qualname":"::fmt::Pointer","value":"Pointer","parent":null,"children":[{"krate":0,"index":3453}],"decl_id":null,"docs":" `p` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1451583,"byte_end":1451628,"line_start":823,"line_end":823,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3453},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1451759,"byte_end":1451762,"line_start":827,"line_end":827,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::Pointer::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":3452},"children":[],"decl_id":null,"docs":" `p` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1451583,"byte_end":1451628,"line_start":823,"line_end":823,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":3454},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1452677,"byte_end":1452685,"line_start":867,"line_end":867,"column_start":11,"column_end":19},"name":"LowerExp","qualname":"::fmt::LowerExp","value":"LowerExp","parent":null,"children":[{"krate":0,"index":3455}],"decl_id":null,"docs":" `e` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1452621,"byte_end":1452666,"line_start":866,"line_end":866,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3455},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1452798,"byte_end":1452801,"line_start":870,"line_end":870,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::LowerExp::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":3454},"children":[],"decl_id":null,"docs":" `e` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1452621,"byte_end":1452666,"line_start":866,"line_end":866,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":3456},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1453717,"byte_end":1453725,"line_start":910,"line_end":910,"column_start":11,"column_end":19},"name":"UpperExp","qualname":"::fmt::UpperExp","value":"UpperExp","parent":null,"children":[{"krate":0,"index":3457}],"decl_id":null,"docs":" `E` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1453661,"byte_end":1453706,"line_start":909,"line_end":909,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3457},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1453838,"byte_end":1453841,"line_start":913,"line_end":913,"column_start":8,"column_end":11},"name":"fmt","qualname":"::fmt::UpperExp::fmt","value":"fn (&self, f: &mut Formatter) -> Result","parent":{"krate":0,"index":3456},"children":[],"decl_id":null,"docs":" `E` formatting.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1453661,"byte_end":1453706,"line_start":909,"line_end":909,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":3458},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1454834,"byte_end":1454839,"line_start":948,"line_end":948,"column_start":8,"column_end":13},"name":"write","qualname":"::fmt::write","value":"fn (output: &mut Write, args: Arguments) -> Result","parent":null,"children":[],"decl_id":null,"docs":" The `write` function takes an output stream, and an `Arguments` struct\n that can be precompiled with the `format_args!` macro.","sig":null,"attributes":[{"value":"stable(feature = \"rust1\", since = \"1.0.0\")","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1454781,"byte_end":1454826,"line_start":947,"line_end":947,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3462},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1458122,"byte_end":1458134,"line_start":1040,"line_end":1040,"column_start":12,"column_end":24},"name":"pad_integral","qualname":"<Formatter<'a>>::pad_integral","value":"fn (&mut self, is_nonnegative: bool, prefix: &str, buf: &str) -> Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3463},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1460900,"byte_end":1460903,"line_start":1111,"line_end":1111,"column_start":12,"column_end":15},"name":"pad","qualname":"<Formatter<'a>>::pad","value":"fn (&mut self, s: &str) -> Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3469},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1467020,"byte_end":1467029,"line_start":1268,"line_end":1268,"column_start":12,"column_end":21},"name":"write_str","qualname":"<Formatter<'a>>::write_str","value":"fn (&mut self, data: &str) -> Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3470},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1467227,"byte_end":1467236,"line_start":1274,"line_end":1274,"column_start":12,"column_end":21},"name":"write_fmt","qualname":"<Formatter<'a>>::write_fmt","value":"fn (&mut self, fmt: Arguments) -> Result","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3471},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1467402,"byte_end":1467407,"line_start":1280,"line_end":1280,"column_start":12,"column_end":17},"name":"flags","qualname":"<Formatter<'a>>::flags","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3472},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1467564,"byte_end":1467568,"line_start":1284,"line_end":1284,"column_start":12,"column_end":16},"name":"fill","qualname":"<Formatter<'a>>::fill","value":"fn (&self) -> char","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3473},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1467784,"byte_end":1467789,"line_start":1289,"line_end":1289,"column_start":12,"column_end":17},"name":"align","qualname":"<Formatter<'a>>::align","value":"fn (&self) -> Alignment","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3474},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1468226,"byte_end":1468231,"line_start":1300,"line_end":1300,"column_start":12,"column_end":17},"name":"width","qualname":"<Formatter<'a>>::width","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3475},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1468394,"byte_end":1468403,"line_start":1304,"line_end":1304,"column_start":12,"column_end":21},"name":"precision","qualname":"<Formatter<'a>>::precision","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3476},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1468563,"byte_end":1468572,"line_start":1308,"line_end":1308,"column_start":12,"column_end":21},"name":"sign_plus","qualname":"<Formatter<'a>>::sign_plus","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3477},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1468757,"byte_end":1468767,"line_start":1312,"line_end":1312,"column_start":12,"column_end":22},"name":"sign_minus","qualname":"<Formatter<'a>>::sign_minus","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3478},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1468953,"byte_end":1468962,"line_start":1316,"line_end":1316,"column_start":12,"column_end":21},"name":"alternate","qualname":"<Formatter<'a>>::alternate","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3479},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1469148,"byte_end":1469167,"line_start":1320,"line_end":1320,"column_start":12,"column_end":31},"name":"sign_aware_zero_pad","qualname":"<Formatter<'a>>::sign_aware_zero_pad","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3480},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1470188,"byte_end":1470200,"line_start":1353,"line_end":1353,"column_start":12,"column_end":24},"name":"debug_struct","qualname":"<Formatter<'a>>::debug_struct","value":"fn <'b, > (&'b mut self, name: &str) -> DebugStruct<'b, 'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3481},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1471026,"byte_end":1471037,"line_start":1380,"line_end":1380,"column_start":12,"column_end":23},"name":"debug_tuple","qualname":"<Formatter<'a>>::debug_tuple","value":"fn <'b, > (&'b mut self, name: &str) -> DebugTuple<'b, 'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3482},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1471757,"byte_end":1471767,"line_start":1404,"line_end":1404,"column_start":12,"column_end":22},"name":"debug_list","qualname":"<Formatter<'a>>::debug_list","value":"fn <'b, > (&'b mut self) -> DebugList<'b, 'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3483},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1472464,"byte_end":1472473,"line_start":1428,"line_end":1428,"column_start":12,"column_end":21},"name":"debug_set","qualname":"<Formatter<'a>>::debug_set","value":"fn <'b, > (&'b mut self) -> DebugSet<'b, 'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3484},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1473256,"byte_end":1473265,"line_start":1452,"line_end":1452,"column_start":12,"column_end":21},"name":"debug_map","qualname":"<Formatter<'a>>::debug_map","value":"fn <'b, > (&'b mut self) -> DebugMap<'b, 'a>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":3544},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,95,112,114,105,118,97,116,101,46,114,115],"byte_start":1515353,"byte_end":1515365,"line_start":50,"line_end":50,"column_start":8,"column_end":20},"name":"is_printable","qualname":"::char_private::is_printable","value":"fn (x: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":3552},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,95,112,114,105,118,97,116,101,46,114,115],"byte_start":1526485,"byte_end":1526504,"line_start":23,"line_end":23,"column_start":18,"column_end":37},"name":"TrustedRandomAccess","qualname":"::iter_private::TrustedRandomAccess","value":"TrustedRandomAccess:  ExactSizeIterator","parent":null,"children":[{"krate":0,"index":3553},{"krate":0,"index":3554}],"decl_id":null,"docs":" An iterator whose items are random accessible efficiently","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3553},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,95,112,114,105,118,97,116,101,46,114,115],"byte_start":1526541,"byte_end":1526554,"line_start":24,"line_end":24,"column_start":15,"column_end":28},"name":"get_unchecked","qualname":"::iter_private::TrustedRandomAccess::get_unchecked","value":"fn (&mut self, i: usize) -> Self::Item","parent":{"krate":0,"index":3552},"children":[],"decl_id":null,"docs":" An iterator whose items are random accessible efficiently","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":3554},"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,95,112,114,105,118,97,116,101,46,114,115],"byte_start":1526730,"byte_end":1526750,"line_start":27,"line_end":27,"column_start":8,"column_end":28},"name":"may_have_side_effect","qualname":"::iter_private::TrustedRandomAccess::may_have_side_effect","value":"fn () -> bool","parent":{"krate":0,"index":3552},"children":[],"decl_id":null,"docs":" An iterator whose items are random accessible efficiently","sig":null,"attributes":[]}],"impls":[],"refs":[{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4863,"byte_end":4868,"line_start":129,"line_end":129,"column_start":34,"column_end":39},"ref_id":{"krate":0,"index":24}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4903,"byte_end":4905,"line_start":130,"line_end":130,"column_start":34,"column_end":36},"ref_id":{"krate":0,"index":25}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4940,"byte_end":4943,"line_start":131,"line_end":131,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":26}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":4978,"byte_end":4981,"line_start":132,"line_end":132,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":27}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5016,"byte_end":5019,"line_start":133,"line_end":133,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":28}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5055,"byte_end":5059,"line_start":134,"line_end":134,"column_start":35,"column_end":39},"ref_id":{"krate":0,"index":29}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5095,"byte_end":5100,"line_start":136,"line_end":136,"column_start":34,"column_end":39},"ref_id":{"krate":0,"index":30}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5135,"byte_end":5137,"line_start":137,"line_end":137,"column_start":34,"column_end":36},"ref_id":{"krate":0,"index":31}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5172,"byte_end":5175,"line_start":138,"line_end":138,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":32}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5210,"byte_end":5213,"line_start":139,"line_end":139,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":33}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5248,"byte_end":5251,"line_start":140,"line_end":140,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":34}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5287,"byte_end":5291,"line_start":141,"line_end":141,"column_start":35,"column_end":39},"ref_id":{"krate":0,"index":35}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5327,"byte_end":5330,"line_start":143,"line_end":143,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":36}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5365,"byte_end":5368,"line_start":144,"line_end":144,"column_start":34,"column_end":37},"ref_id":{"krate":0,"index":91}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5392,"byte_end":5395,"line_start":147,"line_end":147,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":146}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":65724,"byte_end":65731,"line_start":93,"line_end":93,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":186}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":178863,"byte_end":178872,"line_start":136,"line_end":136,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":193}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":178882,"byte_end":178889,"line_start":137,"line_end":137,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":195}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":178956,"byte_end":178962,"line_start":141,"line_end":141,"column_start":13,"column_end":19},"ref_id":{"krate":0,"index":209}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":178976,"byte_end":178981,"line_start":142,"line_end":142,"column_start":13,"column_end":18},"ref_id":{"krate":0,"index":230}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":65741,"byte_end":65748,"line_start":94,"line_end":94,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":276}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":258507,"byte_end":258512,"line_start":106,"line_end":106,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":334}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":258522,"byte_end":258527,"line_start":107,"line_end":107,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":420}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":65758,"byte_end":65764,"line_start":95,"line_end":95,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":445}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":65774,"byte_end":65783,"line_start":96,"line_end":96,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":458}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5480,"byte_end":5487,"line_start":151,"line_end":151,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":528}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,114,101,108,117,100,101,47,109,111,100,46,114,115],"byte_start":351878,"byte_end":351880,"line_start":15,"line_end":15,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":529}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5543,"byte_end":5553,"line_start":155,"line_end":155,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":571}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5563,"byte_end":5566,"line_start":156,"line_end":156,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":575}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5576,"byte_end":5583,"line_start":157,"line_end":157,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":647}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5593,"byte_end":5596,"line_start":158,"line_end":158,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":664}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5635,"byte_end":5641,"line_start":162,"line_end":162,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":810}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5651,"byte_end":5654,"line_start":163,"line_end":163,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":839}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5664,"byte_end":5667,"line_start":164,"line_end":164,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1095}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5677,"byte_end":5682,"line_start":165,"line_end":165,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1190}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5692,"byte_end":5699,"line_start":166,"line_end":166,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1196}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5709,"byte_end":5716,"line_start":167,"line_end":167,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1200}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5726,"byte_end":5732,"line_start":168,"line_end":168,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1240}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5787,"byte_end":5790,"line_start":172,"line_end":172,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1255}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5800,"byte_end":5805,"line_start":173,"line_end":173,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1276}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5815,"byte_end":5819,"line_start":174,"line_end":174,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1299}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,109,111,100,46,114,115],"byte_start":752891,"byte_end":752897,"line_start":15,"line_end":15,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1300}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5829,"byte_end":5833,"line_start":175,"line_end":175,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1358}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5843,"byte_end":5847,"line_start":176,"line_end":176,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1496}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5857,"byte_end":5866,"line_start":177,"line_end":177,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1593}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5876,"byte_end":5880,"line_start":178,"line_end":178,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1599}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5890,"byte_end":5896,"line_start":179,"line_end":179,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2116}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5906,"byte_end":5909,"line_start":180,"line_end":180,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2220}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5919,"byte_end":5925,"line_start":181,"line_end":181,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":2221}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5936,"byte_end":5941,"line_start":183,"line_end":183,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2308}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5951,"byte_end":5954,"line_start":184,"line_end":184,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":2746}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1268739,"byte_end":1268746,"line_start":27,"line_end":27,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":2764}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5964,"byte_end":5968,"line_start":185,"line_end":185,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":3172}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,108,105,98,46,114,115],"byte_start":5978,"byte_end":5981,"line_start":186,"line_end":186,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":3297}},{"kind":"Mod","span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1429257,"byte_end":1429259,"line_start":49,"line_end":49,"column_start":13,"column_end":15},"ref_id":{"krate":0,"index":3408}}],"macro_refs":[],"relations":[{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":64533,"byte_end":64541,"line_start":49,"line_end":49,"column_start":36,"column_end":44},"kind":"Impl","from":{"krate":0,"index":3587},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":64734,"byte_end":64742,"line_start":56,"line_end":56,"column_start":40,"column_end":48},"kind":"Impl","from":{"krate":0,"index":3587},"to":{"krate":0,"index":3442}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":64929,"byte_end":64937,"line_start":63,"line_end":63,"column_start":38,"column_end":46},"kind":"Impl","from":{"krate":0,"index":3587},"to":{"krate":0,"index":3446}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":65122,"byte_end":65130,"line_start":70,"line_end":70,"column_start":36,"column_end":44},"kind":"Impl","from":{"krate":0,"index":3587},"to":{"krate":0,"index":3444}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":65321,"byte_end":65329,"line_start":77,"line_end":77,"column_start":42,"column_end":50},"kind":"Impl","from":{"krate":0,"index":3587},"to":{"krate":0,"index":3448}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":65520,"byte_end":65528,"line_start":84,"line_end":84,"column_start":42,"column_end":50},"kind":"Impl","from":{"krate":0,"index":3587},"to":{"krate":0,"index":3450}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":204375,"byte_end":204383,"line_start":54,"line_end":54,"column_start":27,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":362},"to":{"krate":0,"index":201}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,100,101,99,111,100,101,114,46,114,115],"byte_start":204386,"byte_end":204390,"line_start":54,"line_end":54,"column_start":38,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":821},"to":{"krate":0,"index":201}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":180313,"byte_end":180317,"line_start":184,"line_end":184,"column_start":10,"column_end":14},"kind":"Impl","from":{"krate":0,"index":5450},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,102,108,116,50,100,101,99,47,109,111,100,46,114,115],"byte_start":182050,"byte_end":182059,"line_start":233,"line_end":233,"column_start":10,"column_end":19},"kind":"Impl","from":{"krate":0,"index":5461},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":312081,"byte_end":312089,"line_start":47,"line_end":47,"column_start":6,"column_end":14},"kind":"Impl","from":{"krate":0,"index":5474},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":312564,"byte_end":312569,"line_start":59,"line_end":59,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":478},"to":{"krate":0,"index":362}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":312572,"byte_end":312576,"line_start":59,"line_end":59,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":821},"to":{"krate":0,"index":362}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":312579,"byte_end":312584,"line_start":59,"line_end":59,"column_start":37,"column_end":42},"kind":"SuperTrait","from":{"krate":0,"index":3440},"to":{"krate":0,"index":362}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":312587,"byte_end":312595,"line_start":59,"line_end":59,"column_start":45,"column_end":53},"kind":"SuperTrait","from":{"krate":0,"index":3454},"to":{"krate":0,"index":362}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":312618,"byte_end":312621,"line_start":60,"line_end":60,"column_start":23,"column_end":26},"kind":"SuperTrait","from":{"krate":0,"index":849},"to":{"krate":0,"index":362}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":312637,"byte_end":312640,"line_start":60,"line_end":60,"column_start":42,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":853},"to":{"krate":0,"index":362}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,114,97,119,102,112,46,114,115],"byte_start":312656,"byte_end":312659,"line_start":60,"line_end":60,"column_start":61,"column_end":64},"kind":"SuperTrait","from":{"krate":0,"index":863},"to":{"krate":0,"index":362}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,112,97,114,115,101,46,114,115],"byte_start":325603,"byte_end":325610,"line_start":41,"line_end":41,"column_start":10,"column_end":17},"kind":"Impl","from":{"krate":0,"index":5505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":260328,"byte_end":260343,"line_start":169,"line_end":169,"column_start":6,"column_end":21},"kind":"Impl","from":{"krate":0,"index":5527},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,101,99,50,102,108,116,47,109,111,100,46,114,115],"byte_start":260869,"byte_end":260884,"line_start":184,"line_end":184,"column_start":23,"column_end":38},"kind":"Impl","from":{"krate":0,"index":5527},"to":{"krate":0,"index":3442}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,98,105,103,110,117,109,46,114,115],"byte_start":330224,"byte_end":330229,"line_start":34,"line_end":34,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":819},"to":{"krate":0,"index":448}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,100,105,121,95,102,108,111,97,116,46,114,115],"byte_start":349577,"byte_end":349579,"line_start":30,"line_end":30,"column_start":6,"column_end":8},"kind":"Impl","from":{"krate":0,"index":5653},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":141014,"byte_end":141019,"line_start":2410,"line_end":2410,"column_start":18,"column_end":23},"kind":"SuperTrait","from":{"krate":0,"index":819},"to":{"krate":0,"index":478}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":144233,"byte_end":144248,"line_start":2492,"line_end":2492,"column_start":6,"column_end":21},"kind":"Impl","from":{"krate":0,"index":6275},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":144660,"byte_end":144675,"line_start":2504,"line_end":2504,"column_start":23,"column_end":38},"kind":"Impl","from":{"krate":0,"index":6275},"to":{"krate":0,"index":3442}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":144863,"byte_end":144878,"line_start":2511,"line_end":2511,"column_start":27,"column_end":42},"kind":"Impl","from":{"krate":0,"index":6275},"to":{"krate":0,"index":1210}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":151206,"byte_end":151216,"line_start":2710,"line_end":2710,"column_start":27,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":1124},"to":{"krate":0,"index":511}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":151219,"byte_end":151223,"line_start":2710,"line_end":2710,"column_start":40,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":821},"to":{"krate":0,"index":511}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":155034,"byte_end":155047,"line_start":2830,"line_end":2830,"column_start":6,"column_end":19},"kind":"Impl","from":{"krate":0,"index":6665},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,117,109,47,109,111,100,46,114,115],"byte_start":155745,"byte_end":155758,"line_start":2847,"line_end":2847,"column_start":23,"column_end":36},"kind":"Impl","from":{"krate":0,"index":6665},"to":{"krate":0,"index":3442}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":448070,"byte_end":448082,"line_start":846,"line_end":846,"column_start":18,"column_end":30},"kind":"Impl","from":{"krate":0,"index":604},"to":{"krate":0,"index":821}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":448175,"byte_end":448187,"line_start":849,"line_end":849,"column_start":26,"column_end":38},"kind":"Impl","from":{"krate":0,"index":604},"to":{"krate":0,"index":1191}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":448333,"byte_end":448345,"line_start":856,"line_end":856,"column_start":28,"column_end":40},"kind":"Impl","from":{"krate":0,"index":604},"to":{"krate":0,"index":1097}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":448503,"byte_end":448515,"line_start":863,"line_end":863,"column_start":21,"column_end":33},"kind":"Impl","from":{"krate":0,"index":604},"to":{"krate":0,"index":1100}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":448606,"byte_end":448618,"line_start":866,"line_end":866,"column_start":24,"column_end":36},"kind":"Impl","from":{"krate":0,"index":604},"to":{"krate":0,"index":3228}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":448797,"byte_end":448809,"line_start":873,"line_end":873,"column_start":24,"column_end":36},"kind":"Impl","from":{"krate":0,"index":604},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":451496,"byte_end":451508,"line_start":953,"line_end":953,"column_start":9,"column_end":21},"kind":"Impl","from":{"krate":0,"index":6770},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":452869,"byte_end":452881,"line_start":1000,"line_end":1000,"column_start":19,"column_end":31},"kind":"Impl","from":{"krate":0,"index":6770},"to":{"krate":0,"index":929}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":453097,"byte_end":453109,"line_start":1011,"line_end":1011,"column_start":22,"column_end":34},"kind":"Impl","from":{"krate":0,"index":6770},"to":{"krate":0,"index":938}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":453338,"byte_end":453350,"line_start":1021,"line_end":1021,"column_start":40,"column_end":52},"kind":"Impl","from":{"krate":0,"index":6770},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":453609,"byte_end":453621,"line_start":1030,"line_end":1030,"column_start":26,"column_end":38},"kind":"Impl","from":{"krate":0,"index":6770},"to":{"krate":0,"index":1191}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":453896,"byte_end":453908,"line_start":1041,"line_end":1041,"column_start":30,"column_end":42},"kind":"Impl","from":{"krate":0,"index":6770},"to":{"krate":0,"index":1197}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":454084,"byte_end":454096,"line_start":1048,"line_end":1048,"column_start":34,"column_end":46},"kind":"Impl","from":{"krate":0,"index":6770},"to":{"krate":0,"index":1097}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":454336,"byte_end":454348,"line_start":1059,"line_end":1059,"column_start":20,"column_end":32},"kind":"Impl","from":{"krate":0,"index":6770},"to":{"krate":0,"index":1100}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":454446,"byte_end":454458,"line_start":1062,"line_end":1062,"column_start":36,"column_end":48},"kind":"Impl","from":{"krate":0,"index":6770},"to":{"krate":0,"index":1124}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":454974,"byte_end":454986,"line_start":1085,"line_end":1085,"column_start":22,"column_end":34},"kind":"Impl","from":{"krate":0,"index":6770},"to":{"krate":0,"index":1115}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,101,109,46,114,115],"byte_start":455180,"byte_end":455192,"line_start":1092,"line_end":1092,"column_start":40,"column_end":52},"kind":"Impl","from":{"krate":0,"index":6770},"to":{"krate":0,"index":3228}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":457783,"byte_end":457790,"line_start":68,"line_end":68,"column_start":19,"column_end":26},"kind":"Impl","from":{"krate":0,"index":6800},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":458618,"byte_end":458625,"line_start":96,"line_end":96,"column_start":79,"column_end":86},"kind":"Impl","from":{"krate":0,"index":6800},"to":{"krate":0,"index":1029}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":458673,"byte_end":458680,"line_start":98,"line_end":98,"column_start":41,"column_end":48},"kind":"Impl","from":{"krate":0,"index":6800},"to":{"krate":0,"index":1210}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":458811,"byte_end":458818,"line_start":104,"line_end":104,"column_start":41,"column_end":48},"kind":"Impl","from":{"krate":0,"index":6800},"to":{"krate":0,"index":1210}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,110,111,110,122,101,114,111,46,114,115],"byte_start":458978,"byte_end":458985,"line_start":111,"line_end":111,"column_start":37,"column_end":44},"kind":"Impl","from":{"krate":0,"index":6800},"to":{"krate":0,"index":1210}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":537406,"byte_end":537412,"line_start":2305,"line_end":2305,"column_start":40,"column_end":46},"kind":"Impl","from":{"krate":0,"index":765},"to":{"krate":0,"index":815}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":537737,"byte_end":537743,"line_start":2312,"line_end":2312,"column_start":40,"column_end":46},"kind":"Impl","from":{"krate":0,"index":765},"to":{"krate":0,"index":822}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":537816,"byte_end":537822,"line_start":2315,"line_end":2315,"column_start":16,"column_end":22},"kind":"Impl","from":{"krate":0,"index":765},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":538225,"byte_end":538231,"line_start":2329,"line_end":2329,"column_start":17,"column_end":23},"kind":"Impl","from":{"krate":0,"index":765},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":539669,"byte_end":539675,"line_start":2371,"line_end":2371,"column_start":27,"column_end":33},"kind":"Impl","from":{"krate":0,"index":765},"to":{"krate":0,"index":1191}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":539808,"byte_end":539814,"line_start":2378,"line_end":2378,"column_start":26,"column_end":32},"kind":"Impl","from":{"krate":0,"index":765},"to":{"krate":0,"index":821}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":539928,"byte_end":539934,"line_start":2381,"line_end":2381,"column_start":57,"column_end":63},"kind":"Impl","from":{"krate":0,"index":765},"to":{"krate":0,"index":1029}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540044,"byte_end":540050,"line_start":2384,"line_end":2384,"column_start":34,"column_end":40},"kind":"Impl","from":{"krate":0,"index":765},"to":{"krate":0,"index":3452}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540258,"byte_end":540264,"line_start":2391,"line_end":2391,"column_start":41,"column_end":47},"kind":"Impl","from":{"krate":0,"index":765},"to":{"krate":0,"index":1210}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":540483,"byte_end":540489,"line_start":2398,"line_end":2398,"column_start":37,"column_end":43},"kind":"Impl","from":{"krate":0,"index":765},"to":{"krate":0,"index":1210}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":542725,"byte_end":542731,"line_start":2442,"line_end":2442,"column_start":27,"column_end":33},"kind":"Impl","from":{"krate":0,"index":786},"to":{"krate":0,"index":815}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":542975,"byte_end":542981,"line_start":2447,"line_end":2447,"column_start":27,"column_end":33},"kind":"Impl","from":{"krate":0,"index":786},"to":{"krate":0,"index":822}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":543054,"byte_end":543060,"line_start":2450,"line_end":2450,"column_start":16,"column_end":22},"kind":"Impl","from":{"krate":0,"index":786},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":543463,"byte_end":543469,"line_start":2464,"line_end":2464,"column_start":17,"column_end":23},"kind":"Impl","from":{"krate":0,"index":786},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":545201,"byte_end":545207,"line_start":2513,"line_end":2513,"column_start":27,"column_end":33},"kind":"Impl","from":{"krate":0,"index":786},"to":{"krate":0,"index":1191}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":545340,"byte_end":545346,"line_start":2520,"line_end":2520,"column_start":26,"column_end":32},"kind":"Impl","from":{"krate":0,"index":786},"to":{"krate":0,"index":821}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":545460,"byte_end":545466,"line_start":2523,"line_end":2523,"column_start":57,"column_end":63},"kind":"Impl","from":{"krate":0,"index":786},"to":{"krate":0,"index":1029}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":545576,"byte_end":545582,"line_start":2526,"line_end":2526,"column_start":34,"column_end":40},"kind":"Impl","from":{"krate":0,"index":786},"to":{"krate":0,"index":3452}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":545786,"byte_end":545792,"line_start":2533,"line_end":2533,"column_start":37,"column_end":43},"kind":"Impl","from":{"krate":0,"index":786},"to":{"krate":0,"index":1210}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":546002,"byte_end":546008,"line_start":2540,"line_end":2540,"column_start":41,"column_end":47},"kind":"Impl","from":{"krate":0,"index":786},"to":{"krate":0,"index":1210}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,112,116,114,46,114,115],"byte_start":546227,"byte_end":546233,"line_start":2547,"line_end":2547,"column_start":37,"column_end":43},"kind":"Impl","from":{"krate":0,"index":786},"to":{"krate":0,"index":1210}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":555767,"byte_end":555772,"line_start":272,"line_end":272,"column_start":18,"column_end":23},"kind":"SuperTrait","from":{"krate":0,"index":1191},"to":{"krate":0,"index":821}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":566490,"byte_end":566500,"line_start":567,"line_end":567,"column_start":29,"column_end":39},"kind":"Impl","from":{"krate":0,"index":1483},"to":{"krate":0,"index":831}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,109,97,114,107,101,114,46,114,115],"byte_start":566541,"byte_end":566552,"line_start":568,"line_end":568,"column_start":35,"column_end":46},"kind":"Impl","from":{"krate":0,"index":827},"to":{"krate":0,"index":831}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,100,101,114,101,102,46,114,115],"byte_start":626522,"byte_end":626527,"line_start":166,"line_end":166,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":0,"index":929},"to":{"krate":0,"index":938}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":632941,"byte_end":632946,"line_start":70,"line_end":70,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":0,"index":948},"to":{"krate":0,"index":946}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,102,117,110,99,116,105,111,110,46,114,115],"byte_start":635355,"byte_end":635361,"line_start":143,"line_end":143,"column_start":25,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":950},"to":{"krate":0,"index":948}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,105,110,100,101,120,46,114,115],"byte_start":649685,"byte_end":649690,"line_start":149,"line_end":149,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":976},"to":{"krate":0,"index":979}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":653100,"byte_end":653105,"line_start":79,"line_end":79,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":982},"to":{"krate":0,"index":987}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,112,108,97,99,101,46,114,115],"byte_start":655270,"byte_end":655275,"line_start":137,"line_end":137,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":982},"to":{"krate":0,"index":994}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":656991,"byte_end":657000,"line_start":53,"line_end":53,"column_start":21,"column_end":30},"kind":"Impl","from":{"krate":0,"index":14322},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":658076,"byte_end":658081,"line_start":89,"line_end":89,"column_start":38,"column_end":43},"kind":"Impl","from":{"krate":0,"index":14332},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":658337,"byte_end":658342,"line_start":96,"line_end":96,"column_start":28,"column_end":33},"kind":"Impl","from":{"krate":0,"index":14332},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":660013,"byte_end":660022,"line_start":149,"line_end":149,"column_start":38,"column_end":47},"kind":"Impl","from":{"krate":0,"index":14342},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":660264,"byte_end":660273,"line_start":156,"line_end":156,"column_start":28,"column_end":37},"kind":"Impl","from":{"krate":0,"index":14342},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":662129,"byte_end":662136,"line_start":220,"line_end":220,"column_start":38,"column_end":45},"kind":"Impl","from":{"krate":0,"index":14352},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":662376,"byte_end":662383,"line_start":227,"line_end":227,"column_start":28,"column_end":35},"kind":"Impl","from":{"krate":0,"index":14352},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":664006,"byte_end":664020,"line_start":277,"line_end":277,"column_start":38,"column_end":52},"kind":"Impl","from":{"krate":0,"index":14363},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":664277,"byte_end":664291,"line_start":284,"line_end":284,"column_start":28,"column_end":42},"kind":"Impl","from":{"krate":0,"index":14363},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":666682,"byte_end":666698,"line_start":358,"line_end":358,"column_start":38,"column_end":54},"kind":"Impl","from":{"krate":0,"index":14373},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,115,47,114,97,110,103,101,46,114,115],"byte_start":666939,"byte_end":666955,"line_start":365,"line_end":365,"column_start":28,"column_end":44},"kind":"Impl","from":{"krate":0,"index":14373},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":679774,"byte_end":679783,"line_start":164,"line_end":164,"column_start":15,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":1097},"to":{"krate":0,"index":1100}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":681541,"byte_end":681549,"line_start":219,"line_end":219,"column_start":6,"column_end":14},"kind":"Impl","from":{"krate":0,"index":14384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":685542,"byte_end":685549,"line_start":351,"line_end":351,"column_start":36,"column_end":43},"kind":"Impl","from":{"krate":0,"index":14394},"to":{"krate":0,"index":1124}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":686060,"byte_end":686067,"line_start":368,"line_end":368,"column_start":22,"column_end":29},"kind":"Impl","from":{"krate":0,"index":14394},"to":{"krate":0,"index":1115}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":688061,"byte_end":688063,"line_start":431,"line_end":431,"column_start":16,"column_end":18},"kind":"SuperTrait","from":{"krate":0,"index":1100},"to":{"krate":0,"index":1115}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":688066,"byte_end":688076,"line_start":431,"line_end":431,"column_start":21,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":1124},"to":{"krate":0,"index":1115}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":689586,"byte_end":689594,"line_start":483,"line_end":483,"column_start":13,"column_end":21},"kind":"Impl","from":{"krate":0,"index":14384},"to":{"krate":0,"index":1100}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":689658,"byte_end":689666,"line_start":486,"line_end":486,"column_start":14,"column_end":22},"kind":"Impl","from":{"krate":0,"index":14384},"to":{"krate":0,"index":1115}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":689853,"byte_end":689861,"line_start":494,"line_end":494,"column_start":21,"column_end":29},"kind":"Impl","from":{"krate":0,"index":14384},"to":{"krate":0,"index":1124}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,109,112,46,114,115],"byte_start":693194,"byte_end":693203,"line_start":602,"line_end":602,"column_start":43,"column_end":52},"kind":"SuperTrait","from":{"krate":0,"index":1097},"to":{"krate":0,"index":1124}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,108,111,110,101,46,114,115],"byte_start":708623,"byte_end":708628,"line_start":92,"line_end":92,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":819},"to":{"krate":0,"index":1191}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,100,101,102,97,117,108,116,46,114,115],"byte_start":712442,"byte_end":712447,"line_start":94,"line_end":94,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":819},"to":{"krate":0,"index":1197}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":717420,"byte_end":717430,"line_start":64,"line_end":64,"column_start":23,"column_end":33},"kind":"Impl","from":{"krate":0,"index":14615},"to":{"krate":0,"index":3442}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":723054,"byte_end":723059,"line_start":244,"line_end":244,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":819},"to":{"krate":0,"index":1208}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":725657,"byte_end":725662,"line_start":327,"line_end":327,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":819},"to":{"krate":0,"index":1210}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":726367,"byte_end":726372,"line_start":345,"line_end":345,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":819},"to":{"krate":0,"index":1212}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":726662,"byte_end":726667,"line_start":355,"line_end":355,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":819},"to":{"krate":0,"index":1215}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":728329,"byte_end":728330,"line_start":412,"line_end":412,"column_start":24,"column_end":25},"kind":"Impl","from":{"krate":0,"index":2147484336},"to":{"krate":0,"index":1208}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":728509,"byte_end":728510,"line_start":421,"line_end":421,"column_start":21,"column_end":22},"kind":"Impl","from":{"krate":0,"index":2147484338},"to":{"krate":0,"index":1210}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":728650,"byte_end":728651,"line_start":428,"line_end":428,"column_start":27,"column_end":28},"kind":"Impl","from":{"krate":0,"index":2147484339},"to":{"krate":0,"index":1212}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,111,110,118,101,114,116,46,114,115],"byte_start":728974,"byte_end":728975,"line_start":440,"line_end":440,"column_start":27,"column_end":28},"kind":"Impl","from":{"krate":0,"index":2147484341},"to":{"krate":0,"index":1215}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":731983,"byte_end":731989,"line_start":64,"line_end":64,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":1241},"to":{"krate":0,"index":1243}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":732507,"byte_end":732508,"line_start":85,"line_end":85,"column_start":31,"column_end":32},"kind":"Impl","from":{"krate":0,"index":2147484347},"to":{"krate":0,"index":1241}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,98,111,114,114,111,119,46,114,115],"byte_start":732629,"byte_end":732630,"line_start":90,"line_end":90,"column_start":34,"column_end":35},"kind":"Impl","from":{"krate":0,"index":2147484348},"to":{"krate":0,"index":1243}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":737229,"byte_end":737230,"line_start":114,"line_end":114,"column_start":36,"column_end":37},"kind":"Impl","from":{"krate":0,"index":2147484355},"to":{"krate":0,"index":1258}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":737565,"byte_end":737568,"line_start":123,"line_end":123,"column_start":21,"column_end":24},"kind":"Impl","from":{"krate":0,"index":1258},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":738004,"byte_end":738007,"line_start":139,"line_end":139,"column_start":6,"column_end":9},"kind":"Impl","from":{"krate":0,"index":1258},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,110,121,46,114,115],"byte_start":743712,"byte_end":743718,"line_start":351,"line_end":351,"column_start":6,"column_end":12},"kind":"Impl","from":{"krate":0,"index":14631},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,97,114,114,97,121,46,114,115],"byte_start":746272,"byte_end":746273,"line_start":49,"line_end":49,"column_start":54,"column_end":55},"kind":"Impl","from":{"krate":0,"index":2147484365},"to":{"krate":0,"index":1289}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":757441,"byte_end":757451,"line_start":133,"line_end":133,"column_start":18,"column_end":28},"kind":"Impl","from":{"krate":0,"index":1306},"to":{"krate":0,"index":1197}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":757720,"byte_end":757730,"line_start":143,"line_end":143,"column_start":22,"column_end":32},"kind":"Impl","from":{"krate":0,"index":1306},"to":{"krate":0,"index":822}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":758109,"byte_end":758118,"line_start":156,"line_end":156,"column_start":21,"column_end":30},"kind":"Impl","from":{"krate":0,"index":1310},"to":{"krate":0,"index":1197}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":758353,"byte_end":758362,"line_start":165,"line_end":165,"column_start":25,"column_end":34},"kind":"Impl","from":{"krate":0,"index":1310},"to":{"krate":0,"index":815}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":758473,"byte_end":758482,"line_start":168,"line_end":168,"column_start":25,"column_end":34},"kind":"Impl","from":{"krate":0,"index":1310},"to":{"krate":0,"index":822}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":761010,"byte_end":761020,"line_start":233,"line_end":233,"column_start":6,"column_end":16},"kind":"Impl","from":{"krate":0,"index":1306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":775803,"byte_end":775812,"line_start":647,"line_end":647,"column_start":9,"column_end":18},"kind":"Impl","from":{"krate":0,"index":1310},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":821588,"byte_end":821598,"line_start":1803,"line_end":1803,"column_start":21,"column_end":31},"kind":"Impl","from":{"krate":0,"index":1306},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,121,110,99,47,97,116,111,109,105,99,46,114,115],"byte_start":821860,"byte_end":821869,"line_start":1811,"line_end":1811,"column_start":24,"column_end":33},"kind":"Impl","from":{"krate":0,"index":1310},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":830531,"byte_end":830535,"line_start":225,"line_end":225,"column_start":14,"column_end":18},"kind":"Impl","from":{"krate":0,"index":1371},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":830958,"byte_end":830962,"line_start":245,"line_end":245,"column_start":25,"column_end":29},"kind":"Impl","from":{"krate":0,"index":1371},"to":{"krate":0,"index":815}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":831048,"byte_end":831052,"line_start":248,"line_end":248,"column_start":19,"column_end":23},"kind":"Impl","from":{"krate":0,"index":1371},"to":{"krate":0,"index":822}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":831129,"byte_end":831133,"line_start":251,"line_end":251,"column_start":24,"column_end":28},"kind":"Impl","from":{"krate":0,"index":1371},"to":{"krate":0,"index":1191}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":831299,"byte_end":831303,"line_start":259,"line_end":259,"column_start":29,"column_end":33},"kind":"Impl","from":{"krate":0,"index":1371},"to":{"krate":0,"index":1197}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":831546,"byte_end":831550,"line_start":268,"line_end":268,"column_start":40,"column_end":44},"kind":"Impl","from":{"krate":0,"index":1371},"to":{"krate":0,"index":1097}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":831730,"byte_end":831734,"line_start":276,"line_end":276,"column_start":26,"column_end":30},"kind":"Impl","from":{"krate":0,"index":1371},"to":{"krate":0,"index":1100}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":831833,"byte_end":831837,"line_start":279,"line_end":279,"column_start":42,"column_end":46},"kind":"Impl","from":{"krate":0,"index":1371},"to":{"krate":0,"index":1124}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":832447,"byte_end":832451,"line_start":307,"line_end":307,"column_start":28,"column_end":32},"kind":"Impl","from":{"krate":0,"index":1371},"to":{"krate":0,"index":1115}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":832637,"byte_end":832641,"line_start":315,"line_end":315,"column_start":21,"column_end":25},"kind":"Impl","from":{"krate":0,"index":1371},"to":{"krate":0,"index":1210}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":832716,"byte_end":832720,"line_start":321,"line_end":321,"column_start":9,"column_end":13},"kind":"Impl","from":{"krate":0,"index":1371},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":835932,"byte_end":835936,"line_start":458,"line_end":458,"column_start":18,"column_end":22},"kind":"Impl","from":{"krate":0,"index":1371},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":836501,"byte_end":836505,"line_start":479,"line_end":479,"column_start":57,"column_end":61},"kind":"Impl","from":{"krate":0,"index":1371},"to":{"krate":0,"index":1029}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":837039,"byte_end":837050,"line_start":497,"line_end":497,"column_start":16,"column_end":27},"kind":"Impl","from":{"krate":0,"index":1405},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":837237,"byte_end":837248,"line_start":504,"line_end":504,"column_start":18,"column_end":29},"kind":"Impl","from":{"krate":0,"index":1405},"to":{"krate":0,"index":3442}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":837636,"byte_end":837650,"line_start":517,"line_end":517,"column_start":16,"column_end":30},"kind":"Impl","from":{"krate":0,"index":1410},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":837840,"byte_end":837854,"line_start":524,"line_end":524,"column_start":18,"column_end":32},"kind":"Impl","from":{"krate":0,"index":1410},"to":{"krate":0,"index":3442}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":838202,"byte_end":838209,"line_start":536,"line_end":536,"column_start":9,"column_end":16},"kind":"Impl","from":{"krate":0,"index":1404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":841043,"byte_end":841050,"line_start":631,"line_end":631,"column_start":17,"column_end":24},"kind":"Impl","from":{"krate":0,"index":1404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":846852,"byte_end":846859,"line_start":838,"line_end":838,"column_start":33,"column_end":40},"kind":"Impl","from":{"krate":0,"index":1404},"to":{"krate":0,"index":815}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":846953,"byte_end":846960,"line_start":841,"line_end":841,"column_start":27,"column_end":34},"kind":"Impl","from":{"krate":0,"index":1404},"to":{"krate":0,"index":822}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":847039,"byte_end":847046,"line_start":844,"line_end":844,"column_start":26,"column_end":33},"kind":"Impl","from":{"krate":0,"index":1404},"to":{"krate":0,"index":1191}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":847229,"byte_end":847236,"line_start":852,"line_end":852,"column_start":29,"column_end":36},"kind":"Impl","from":{"krate":0,"index":1404},"to":{"krate":0,"index":1197}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":847491,"byte_end":847498,"line_start":861,"line_end":861,"column_start":43,"column_end":50},"kind":"Impl","from":{"krate":0,"index":1404},"to":{"krate":0,"index":1097}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":847692,"byte_end":847699,"line_start":869,"line_end":869,"column_start":29,"column_end":36},"kind":"Impl","from":{"krate":0,"index":1404},"to":{"krate":0,"index":1100}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":847801,"byte_end":847808,"line_start":872,"line_end":872,"column_start":45,"column_end":52},"kind":"Impl","from":{"krate":0,"index":1404},"to":{"krate":0,"index":1124}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":848475,"byte_end":848482,"line_start":900,"line_end":900,"column_start":31,"column_end":38},"kind":"Impl","from":{"krate":0,"index":1404},"to":{"krate":0,"index":1115}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":848678,"byte_end":848685,"line_start":908,"line_end":908,"column_start":21,"column_end":28},"kind":"Impl","from":{"krate":0,"index":1404},"to":{"krate":0,"index":1210}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":848874,"byte_end":848881,"line_start":915,"line_end":915,"column_start":60,"column_end":67},"kind":"Impl","from":{"krate":0,"index":1404},"to":{"krate":0,"index":1029}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":848958,"byte_end":848967,"line_start":921,"line_end":921,"column_start":10,"column_end":19},"kind":"Impl","from":{"krate":0,"index":1450},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":849271,"byte_end":849280,"line_start":934,"line_end":934,"column_start":19,"column_end":28},"kind":"Impl","from":{"krate":0,"index":1450},"to":{"krate":0,"index":943}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":849493,"byte_end":849502,"line_start":943,"line_end":943,"column_start":20,"column_end":29},"kind":"Impl","from":{"krate":0,"index":1450},"to":{"krate":0,"index":1191}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":850323,"byte_end":850326,"line_start":968,"line_end":968,"column_start":31,"column_end":34},"kind":"Impl","from":{"krate":0,"index":1457},"to":{"krate":0,"index":929}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":850448,"byte_end":850451,"line_start":977,"line_end":977,"column_start":21,"column_end":24},"kind":"Impl","from":{"krate":0,"index":1457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":852081,"byte_end":852084,"line_start":1026,"line_end":1026,"column_start":74,"column_end":77},"kind":"Impl","from":{"krate":0,"index":1457},"to":{"krate":0,"index":1029}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":852205,"byte_end":852208,"line_start":1029,"line_end":1029,"column_start":53,"column_end":56},"kind":"Impl","from":{"krate":0,"index":1457},"to":{"krate":0,"index":3442}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":852332,"byte_end":852338,"line_start":1035,"line_end":1035,"column_start":21,"column_end":27},"kind":"Impl","from":{"krate":0,"index":1474},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":853507,"byte_end":853519,"line_start":1075,"line_end":1075,"column_start":19,"column_end":31},"kind":"Impl","from":{"krate":0,"index":1469},"to":{"krate":0,"index":943}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":853698,"byte_end":853710,"line_start":1084,"line_end":1084,"column_start":10,"column_end":22},"kind":"Impl","from":{"krate":0,"index":1469},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":854356,"byte_end":854362,"line_start":1107,"line_end":1107,"column_start":31,"column_end":37},"kind":"Impl","from":{"krate":0,"index":1474},"to":{"krate":0,"index":929}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":854543,"byte_end":854549,"line_start":1117,"line_end":1117,"column_start":34,"column_end":40},"kind":"Impl","from":{"krate":0,"index":1474},"to":{"krate":0,"index":938}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":854774,"byte_end":854780,"line_start":1125,"line_end":1125,"column_start":77,"column_end":83},"kind":"Impl","from":{"krate":0,"index":1474},"to":{"krate":0,"index":1029}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":854901,"byte_end":854907,"line_start":1128,"line_end":1128,"column_start":53,"column_end":59},"kind":"Impl","from":{"krate":0,"index":1474},"to":{"krate":0,"index":3442}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":856970,"byte_end":856980,"line_start":1177,"line_end":1177,"column_start":27,"column_end":37},"kind":"Impl","from":{"krate":0,"index":1483},"to":{"krate":0,"index":822}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":856996,"byte_end":857006,"line_start":1179,"line_end":1179,"column_start":9,"column_end":19},"kind":"Impl","from":{"krate":0,"index":1483},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":858068,"byte_end":858078,"line_start":1222,"line_end":1222,"column_start":17,"column_end":27},"kind":"Impl","from":{"krate":0,"index":1483},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":858782,"byte_end":858792,"line_start":1247,"line_end":1247,"column_start":30,"column_end":40},"kind":"Impl","from":{"krate":0,"index":1483},"to":{"krate":0,"index":1197}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":859023,"byte_end":859033,"line_start":1255,"line_end":1255,"column_start":21,"column_end":31},"kind":"Impl","from":{"krate":0,"index":1483},"to":{"krate":0,"index":1210}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,101,108,108,46,114,115],"byte_start":859231,"byte_end":859241,"line_start":1262,"line_end":1262,"column_start":63,"column_end":73},"kind":"Impl","from":{"krate":0,"index":1483},"to":{"krate":0,"index":1029}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":866834,"byte_end":866848,"line_start":219,"line_end":219,"column_start":6,"column_end":20},"kind":"Impl","from":{"krate":0,"index":16594},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":867476,"byte_end":867490,"line_start":241,"line_end":241,"column_start":23,"column_end":37},"kind":"Impl","from":{"krate":0,"index":16594},"to":{"krate":0,"index":3442}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":868780,"byte_end":868796,"line_start":288,"line_end":288,"column_start":23,"column_end":39},"kind":"Impl","from":{"krate":0,"index":16609},"to":{"krate":0,"index":3442}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":878024,"byte_end":878037,"line_start":571,"line_end":571,"column_start":19,"column_end":32},"kind":"Impl","from":{"krate":0,"index":16620},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":879820,"byte_end":879833,"line_start":631,"line_end":631,"column_start":28,"column_end":41},"kind":"Impl","from":{"krate":0,"index":16620},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":880357,"byte_end":880370,"line_start":647,"line_end":647,"column_start":24,"column_end":37},"kind":"Impl","from":{"krate":0,"index":16620},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":880458,"byte_end":880471,"line_start":650,"line_end":650,"column_start":23,"column_end":36},"kind":"Impl","from":{"krate":0,"index":16620},"to":{"krate":0,"index":3442}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":881255,"byte_end":881268,"line_start":681,"line_end":681,"column_start":19,"column_end":32},"kind":"Impl","from":{"krate":0,"index":16630},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":883250,"byte_end":883263,"line_start":748,"line_end":748,"column_start":28,"column_end":41},"kind":"Impl","from":{"krate":0,"index":16630},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":883617,"byte_end":883630,"line_start":760,"line_end":760,"column_start":24,"column_end":37},"kind":"Impl","from":{"krate":0,"index":16630},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":883718,"byte_end":883731,"line_start":763,"line_end":763,"column_start":23,"column_end":36},"kind":"Impl","from":{"krate":0,"index":16630},"to":{"krate":0,"index":3442}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":884387,"byte_end":884398,"line_start":784,"line_end":784,"column_start":19,"column_end":30},"kind":"Impl","from":{"krate":0,"index":16640},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":884642,"byte_end":884653,"line_start":791,"line_end":791,"column_start":28,"column_end":39},"kind":"Impl","from":{"krate":0,"index":16640},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":884730,"byte_end":884741,"line_start":794,"line_end":794,"column_start":24,"column_end":35},"kind":"Impl","from":{"krate":0,"index":16640},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":884827,"byte_end":884838,"line_start":797,"line_end":797,"column_start":23,"column_end":34},"kind":"Impl","from":{"krate":0,"index":16640},"to":{"krate":0,"index":3442}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":885720,"byte_end":885730,"line_start":824,"line_end":824,"column_start":43,"column_end":53},"kind":"Impl","from":{"krate":0,"index":16645},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,99,104,97,114,46,114,115],"byte_start":888997,"byte_end":889007,"line_start":908,"line_end":908,"column_start":53,"column_end":63},"kind":"Impl","from":{"krate":0,"index":16645},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1037243,"byte_end":1037248,"line_start":25,"line_end":25,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":1191},"to":{"krate":0,"index":1727}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1037251,"byte_end":1037261,"line_start":25,"line_end":25,"column_start":25,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":1124},"to":{"krate":0,"index":1727}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1037264,"byte_end":1037269,"line_start":25,"line_end":25,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":819},"to":{"krate":0,"index":1727}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1043265,"byte_end":1043270,"line_start":213,"line_end":213,"column_start":33,"column_end":38},"kind":"Impl","from":{"krate":0,"index":14332},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1045242,"byte_end":1045247,"line_start":271,"line_end":271,"column_start":44,"column_end":49},"kind":"Impl","from":{"krate":0,"index":14332},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1045561,"byte_end":1045566,"line_start":284,"line_end":284,"column_start":38,"column_end":43},"kind":"Impl","from":{"krate":0,"index":14332},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1045652,"byte_end":1045661,"line_start":287,"line_end":287,"column_start":33,"column_end":42},"kind":"Impl","from":{"krate":0,"index":14342},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1046246,"byte_end":1046255,"line_start":311,"line_end":311,"column_start":38,"column_end":47},"kind":"Impl","from":{"krate":0,"index":14342},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1046393,"byte_end":1046407,"line_start":314,"line_end":314,"column_start":33,"column_end":47},"kind":"Impl","from":{"krate":0,"index":14363},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1048049,"byte_end":1048063,"line_start":373,"line_end":373,"column_start":44,"column_end":58},"kind":"Impl","from":{"krate":0,"index":14363},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,114,97,110,103,101,46,114,115],"byte_start":1048639,"byte_end":1048653,"line_start":394,"line_end":394,"column_start":38,"column_end":52},"kind":"Impl","from":{"krate":0,"index":14363},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1049571,"byte_end":1049577,"line_start":29,"line_end":29,"column_start":29,"column_end":35},"kind":"Impl","from":{"krate":0,"index":16774},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1049859,"byte_end":1049865,"line_start":39,"line_end":39,"column_start":40,"column_end":46},"kind":"Impl","from":{"krate":0,"index":16774},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1050041,"byte_end":1050047,"line_start":45,"line_end":45,"column_start":34,"column_end":40},"kind":"Impl","from":{"krate":0,"index":16774},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1051745,"byte_end":1051750,"line_start":108,"line_end":108,"column_start":24,"column_end":29},"kind":"Impl","from":{"krate":0,"index":1782},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1051919,"byte_end":1051924,"line_start":115,"line_end":115,"column_start":22,"column_end":27},"kind":"Impl","from":{"krate":0,"index":1782},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1052172,"byte_end":1052177,"line_start":128,"line_end":128,"column_start":33,"column_end":38},"kind":"Impl","from":{"krate":0,"index":1782},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1052329,"byte_end":1052334,"line_start":135,"line_end":135,"column_start":31,"column_end":36},"kind":"Impl","from":{"krate":0,"index":1782},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1052472,"byte_end":1052477,"line_start":142,"line_end":142,"column_start":31,"column_end":36},"kind":"Impl","from":{"krate":0,"index":1782},"to":{"krate":0,"index":1860}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1052559,"byte_end":1052564,"line_start":145,"line_end":145,"column_start":27,"column_end":32},"kind":"Impl","from":{"krate":0,"index":1782},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1052722,"byte_end":1052727,"line_start":150,"line_end":150,"column_start":19,"column_end":24},"kind":"Impl","from":{"krate":0,"index":1782},"to":{"krate":0,"index":1191}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1052965,"byte_end":1052970,"line_start":159,"line_end":159,"column_start":21,"column_end":26},"kind":"Impl","from":{"krate":0,"index":1782},"to":{"krate":0,"index":1197}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1053828,"byte_end":1053832,"line_start":196,"line_end":196,"column_start":22,"column_end":26},"kind":"Impl","from":{"krate":0,"index":16779},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1054103,"byte_end":1054107,"line_start":209,"line_end":209,"column_start":33,"column_end":37},"kind":"Impl","from":{"krate":0,"index":16779},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1054276,"byte_end":1054280,"line_start":216,"line_end":216,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":16779},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1054433,"byte_end":1054437,"line_start":223,"line_end":223,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":16779},"to":{"krate":0,"index":1860}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,115,111,117,114,99,101,115,46,114,115],"byte_start":1054519,"byte_end":1054523,"line_start":226,"line_end":226,"column_start":27,"column_end":31},"kind":"Impl","from":{"krate":0,"index":16779},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1059162,"byte_end":1059167,"line_start":107,"line_end":107,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":819},"to":{"krate":0,"index":1816}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1063007,"byte_end":1063008,"line_start":250,"line_end":250,"column_start":36,"column_end":37},"kind":"Impl","from":{"krate":0,"index":2147484578},"to":{"krate":0,"index":1818}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1067213,"byte_end":1067221,"line_start":388,"line_end":388,"column_start":32,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":1657},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1074421,"byte_end":1074429,"line_start":616,"line_end":616,"column_start":30,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":1657},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1077222,"byte_end":1077227,"line_start":700,"line_end":700,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":819},"to":{"krate":0,"index":1840}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1078140,"byte_end":1078145,"line_start":719,"line_end":719,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":819},"to":{"krate":0,"index":1842}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1081069,"byte_end":1081080,"line_start":812,"line_end":812,"column_start":15,"column_end":26},"kind":"Impl","from":{"krate":0,"index":1846},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1081998,"byte_end":1082009,"line_start":844,"line_end":844,"column_start":28,"column_end":39},"kind":"Impl","from":{"krate":0,"index":1846},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1082445,"byte_end":1082451,"line_start":862,"line_end":862,"column_start":37,"column_end":43},"kind":"Impl","from":{"krate":0,"index":17133},"to":{"krate":0,"index":1840}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1083341,"byte_end":1083347,"line_start":890,"line_end":890,"column_start":41,"column_end":47},"kind":"Impl","from":{"krate":0,"index":17133},"to":{"krate":0,"index":1842}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1084609,"byte_end":1084617,"line_start":918,"line_end":918,"column_start":26,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":1657},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,116,114,97,105,116,115,46,114,115],"byte_start":1085567,"byte_end":1085575,"line_start":941,"line_end":941,"column_start":31,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":1657},"to":{"krate":0,"index":1860}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":903529,"byte_end":903532,"line_start":354,"line_end":354,"column_start":22,"column_end":25},"kind":"Impl","from":{"krate":0,"index":16992},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":904356,"byte_end":904359,"line_start":384,"line_end":384,"column_start":33,"column_end":36},"kind":"Impl","from":{"krate":0,"index":16992},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":904867,"byte_end":904870,"line_start":402,"line_end":402,"column_start":31,"column_end":34},"kind":"Impl","from":{"krate":0,"index":16992},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":905134,"byte_end":905137,"line_start":415,"line_end":415,"column_start":27,"column_end":30},"kind":"Impl","from":{"krate":0,"index":16992},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":905278,"byte_end":905281,"line_start":419,"line_end":419,"column_start":31,"column_end":34},"kind":"Impl","from":{"krate":0,"index":16992},"to":{"krate":0,"index":1860}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":905877,"byte_end":905883,"line_start":437,"line_end":437,"column_start":33,"column_end":39},"kind":"Impl","from":{"krate":0,"index":16997},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":906393,"byte_end":906399,"line_start":458,"line_end":458,"column_start":44,"column_end":50},"kind":"Impl","from":{"krate":0,"index":16997},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":906823,"byte_end":906829,"line_start":473,"line_end":473,"column_start":42,"column_end":48},"kind":"Impl","from":{"krate":0,"index":16997},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":907100,"byte_end":907106,"line_start":486,"line_end":486,"column_start":38,"column_end":44},"kind":"Impl","from":{"krate":0,"index":16997},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":907236,"byte_end":907242,"line_start":491,"line_end":491,"column_start":59,"column_end":65},"kind":"Impl","from":{"krate":0,"index":16997},"to":{"krate":0,"index":3552}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":907545,"byte_end":907551,"line_start":503,"line_end":503,"column_start":51,"column_end":57},"kind":"Impl","from":{"krate":0,"index":16997},"to":{"krate":0,"index":3552}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":907877,"byte_end":907883,"line_start":515,"line_end":515,"column_start":42,"column_end":48},"kind":"Impl","from":{"krate":0,"index":16997},"to":{"krate":0,"index":1860}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":908449,"byte_end":908454,"line_start":536,"line_end":536,"column_start":22,"column_end":27},"kind":"Impl","from":{"krate":0,"index":17002},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":909100,"byte_end":909105,"line_start":559,"line_end":559,"column_start":27,"column_end":32},"kind":"Impl","from":{"krate":0,"index":17002},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":909865,"byte_end":909871,"line_start":582,"line_end":582,"column_start":22,"column_end":28},"kind":"Impl","from":{"krate":0,"index":17007},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":910782,"byte_end":910788,"line_start":613,"line_end":613,"column_start":31,"column_end":37},"kind":"Impl","from":{"krate":0,"index":17007},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":912066,"byte_end":912071,"line_start":655,"line_end":655,"column_start":25,"column_end":30},"kind":"Impl","from":{"krate":0,"index":17012},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":915448,"byte_end":915453,"line_start":776,"line_end":776,"column_start":36,"column_end":41},"kind":"Impl","from":{"krate":0,"index":17012},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":916659,"byte_end":916664,"line_start":818,"line_end":818,"column_start":30,"column_end":35},"kind":"Impl","from":{"krate":0,"index":17012},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":916832,"byte_end":916837,"line_start":824,"line_end":824,"column_start":34,"column_end":39},"kind":"Impl","from":{"krate":0,"index":17012},"to":{"krate":0,"index":1860}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":917525,"byte_end":917528,"line_start":847,"line_end":847,"column_start":25,"column_end":28},"kind":"Impl","from":{"krate":0,"index":17022},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":917890,"byte_end":917893,"line_start":863,"line_end":863,"column_start":36,"column_end":39},"kind":"Impl","from":{"krate":0,"index":17022},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":918562,"byte_end":918565,"line_start":887,"line_end":887,"column_start":30,"column_end":33},"kind":"Impl","from":{"krate":0,"index":17022},"to":{"krate":0,"index":1927}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":920286,"byte_end":920289,"line_start":950,"line_end":950,"column_start":30,"column_end":33},"kind":"Impl","from":{"krate":0,"index":17022},"to":{"krate":0,"index":1927}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":922321,"byte_end":922324,"line_start":1024,"line_end":1024,"column_start":34,"column_end":37},"kind":"Impl","from":{"krate":0,"index":17022},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":922445,"byte_end":922448,"line_start":1028,"line_end":1028,"column_start":43,"column_end":46},"kind":"Impl","from":{"krate":0,"index":17022},"to":{"krate":0,"index":3552}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":922853,"byte_end":922856,"line_start":1042,"line_end":1042,"column_start":30,"column_end":33},"kind":"Impl","from":{"krate":0,"index":17022},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":923000,"byte_end":923003,"line_start":1046,"line_end":1046,"column_start":34,"column_end":37},"kind":"Impl","from":{"krate":0,"index":17022},"to":{"krate":0,"index":1860}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":924997,"byte_end":925000,"line_start":1109,"line_end":1109,"column_start":39,"column_end":42},"kind":"Impl","from":{"krate":0,"index":17027},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":925251,"byte_end":925254,"line_start":1118,"line_end":1118,"column_start":38,"column_end":41},"kind":"Impl","from":{"krate":0,"index":17027},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":925827,"byte_end":925830,"line_start":1140,"line_end":1140,"column_start":60,"column_end":63},"kind":"Impl","from":{"krate":0,"index":17027},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":926293,"byte_end":926296,"line_start":1157,"line_end":1157,"column_start":56,"column_end":59},"kind":"Impl","from":{"krate":0,"index":17027},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":926564,"byte_end":926567,"line_start":1170,"line_end":1170,"column_start":48,"column_end":51},"kind":"Impl","from":{"krate":0,"index":17027},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":926701,"byte_end":926704,"line_start":1174,"line_end":1174,"column_start":37,"column_end":40},"kind":"Impl","from":{"krate":0,"index":17027},"to":{"krate":0,"index":1860}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":926833,"byte_end":926836,"line_start":1179,"line_end":1179,"column_start":46,"column_end":49},"kind":"Impl","from":{"krate":0,"index":17027},"to":{"krate":0,"index":3552}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":927657,"byte_end":927663,"line_start":1206,"line_end":1206,"column_start":39,"column_end":45},"kind":"Impl","from":{"krate":0,"index":17030},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":927914,"byte_end":927920,"line_start":1215,"line_end":1215,"column_start":35,"column_end":41},"kind":"Impl","from":{"krate":0,"index":17030},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":929696,"byte_end":929702,"line_start":1268,"line_end":1268,"column_start":57,"column_end":63},"kind":"Impl","from":{"krate":0,"index":17030},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":930391,"byte_end":930397,"line_start":1295,"line_end":1295,"column_start":45,"column_end":51},"kind":"Impl","from":{"krate":0,"index":17030},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":931021,"byte_end":931030,"line_start":1314,"line_end":1314,"column_start":39,"column_end":48},"kind":"Impl","from":{"krate":0,"index":17033},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":931287,"byte_end":931296,"line_start":1323,"line_end":1323,"column_start":38,"column_end":47},"kind":"Impl","from":{"krate":0,"index":17033},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":932177,"byte_end":932186,"line_start":1357,"line_end":1357,"column_start":60,"column_end":69},"kind":"Impl","from":{"krate":0,"index":17033},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":932860,"byte_end":932869,"line_start":1383,"line_end":1383,"column_start":48,"column_end":57},"kind":"Impl","from":{"krate":0,"index":17033},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":933484,"byte_end":933493,"line_start":1402,"line_end":1402,"column_start":22,"column_end":31},"kind":"Impl","from":{"krate":0,"index":17036},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":935095,"byte_end":935104,"line_start":1460,"line_end":1460,"column_start":33,"column_end":42},"kind":"Impl","from":{"krate":0,"index":17036},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":936041,"byte_end":936050,"line_start":1488,"line_end":1488,"column_start":31,"column_end":40},"kind":"Impl","from":{"krate":0,"index":17036},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":936268,"byte_end":936277,"line_start":1499,"line_end":1499,"column_start":40,"column_end":49},"kind":"Impl","from":{"krate":0,"index":17036},"to":{"krate":0,"index":3552}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":936604,"byte_end":936613,"line_start":1512,"line_end":1512,"column_start":27,"column_end":36},"kind":"Impl","from":{"krate":0,"index":17036},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":936728,"byte_end":936737,"line_start":1515,"line_end":1515,"column_start":31,"column_end":40},"kind":"Impl","from":{"krate":0,"index":17036},"to":{"krate":0,"index":1860}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":937679,"byte_end":937687,"line_start":1542,"line_end":1542,"column_start":32,"column_end":40},"kind":"Impl","from":{"krate":0,"index":17041},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":939598,"byte_end":939606,"line_start":1611,"line_end":1611,"column_start":50,"column_end":58},"kind":"Impl","from":{"krate":0,"index":17041},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":939703,"byte_end":939711,"line_start":1614,"line_end":1614,"column_start":42,"column_end":50},"kind":"Impl","from":{"krate":0,"index":17041},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":939737,"byte_end":939745,"line_start":1616,"line_end":1616,"column_start":19,"column_end":27},"kind":"Impl","from":{"krate":0,"index":17041},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":941976,"byte_end":941985,"line_start":1685,"line_end":1685,"column_start":39,"column_end":48},"kind":"Impl","from":{"krate":0,"index":17046},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":942278,"byte_end":942287,"line_start":1695,"line_end":1695,"column_start":35,"column_end":44},"kind":"Impl","from":{"krate":0,"index":17046},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":943236,"byte_end":943245,"line_start":1732,"line_end":1732,"column_start":30,"column_end":39},"kind":"Impl","from":{"krate":0,"index":17046},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":943906,"byte_end":943915,"line_start":1752,"line_end":1752,"column_start":39,"column_end":48},"kind":"Impl","from":{"krate":0,"index":17049},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":944208,"byte_end":944217,"line_start":1762,"line_end":1762,"column_start":35,"column_end":44},"kind":"Impl","from":{"krate":0,"index":17049},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":944925,"byte_end":944934,"line_start":1791,"line_end":1791,"column_start":30,"column_end":39},"kind":"Impl","from":{"krate":0,"index":17049},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":945514,"byte_end":945518,"line_start":1810,"line_end":1810,"column_start":22,"column_end":26},"kind":"Impl","from":{"krate":0,"index":17052},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":947366,"byte_end":947370,"line_start":1885,"line_end":1885,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":17052},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":947504,"byte_end":947508,"line_start":1888,"line_end":1888,"column_start":33,"column_end":37},"kind":"Impl","from":{"krate":0,"index":17052},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":947804,"byte_end":947808,"line_start":1899,"line_end":1899,"column_start":27,"column_end":31},"kind":"Impl","from":{"krate":0,"index":17052},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":948373,"byte_end":948377,"line_start":1917,"line_end":1917,"column_start":22,"column_end":26},"kind":"Impl","from":{"krate":0,"index":17057},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":949350,"byte_end":949354,"line_start":1960,"line_end":1960,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":17057},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":949463,"byte_end":949467,"line_start":1963,"line_end":1963,"column_start":27,"column_end":31},"kind":"Impl","from":{"krate":0,"index":17057},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":950079,"byte_end":950083,"line_start":1982,"line_end":1982,"column_start":55,"column_end":59},"kind":"Impl","from":{"krate":0,"index":17062},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":950374,"byte_end":950378,"line_start":1992,"line_end":1992,"column_start":32,"column_end":36},"kind":"Impl","from":{"krate":0,"index":17062},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":951510,"byte_end":951517,"line_start":2029,"line_end":2029,"column_start":56,"column_end":63},"kind":"Impl","from":{"krate":0,"index":17065},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":951919,"byte_end":951926,"line_start":2042,"line_end":2042,"column_start":52,"column_end":59},"kind":"Impl","from":{"krate":0,"index":17065},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":953392,"byte_end":953399,"line_start":2085,"line_end":2085,"column_start":60,"column_end":67},"kind":"Impl","from":{"krate":0,"index":17065},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":954427,"byte_end":954434,"line_start":2117,"line_end":2117,"column_start":33,"column_end":40},"kind":"Impl","from":{"krate":0,"index":17065},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":955080,"byte_end":955084,"line_start":2137,"line_end":2137,"column_start":27,"column_end":31},"kind":"Impl","from":{"krate":0,"index":17068},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":955177,"byte_end":955181,"line_start":2140,"line_end":2140,"column_start":22,"column_end":26},"kind":"Impl","from":{"krate":0,"index":17068},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":956579,"byte_end":956583,"line_start":2205,"line_end":2205,"column_start":33,"column_end":37},"kind":"Impl","from":{"krate":0,"index":17068},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":957174,"byte_end":957178,"line_start":2229,"line_end":2229,"column_start":40,"column_end":44},"kind":"Impl","from":{"krate":0,"index":17068},"to":{"krate":0,"index":3552}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":957474,"byte_end":957478,"line_start":2242,"line_end":2242,"column_start":22,"column_end":26},"kind":"Impl","from":{"krate":0,"index":17068},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":958256,"byte_end":958260,"line_start":2277,"line_end":2277,"column_start":33,"column_end":37},"kind":"Impl","from":{"krate":0,"index":17068},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":958682,"byte_end":958686,"line_start":2295,"line_end":2295,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":17068},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":959435,"byte_end":959442,"line_start":2322,"line_end":2322,"column_start":39,"column_end":46},"kind":"Impl","from":{"krate":0,"index":17073},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":959635,"byte_end":959642,"line_start":2330,"line_end":2330,"column_start":22,"column_end":29},"kind":"Impl","from":{"krate":0,"index":17073},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":959934,"byte_end":959941,"line_start":2342,"line_end":2342,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":17073},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":960586,"byte_end":960593,"line_start":2366,"line_end":2366,"column_start":57,"column_end":64},"kind":"Impl","from":{"krate":0,"index":17073},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":961122,"byte_end":961129,"line_start":2385,"line_end":2385,"column_start":53,"column_end":60},"kind":"Impl","from":{"krate":0,"index":17073},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,47,109,111,100,46,114,115],"byte_start":961390,"byte_end":961397,"line_start":2398,"line_end":2398,"column_start":45,"column_end":52},"kind":"Impl","from":{"krate":0,"index":17073},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1091660,"byte_end":1091666,"line_start":172,"line_end":172,"column_start":9,"column_end":15},"kind":"Impl","from":{"krate":0,"index":17076},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1108536,"byte_end":1108542,"line_start":758,"line_end":758,"column_start":20,"column_end":26},"kind":"Impl","from":{"krate":0,"index":17076},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1109017,"byte_end":1109023,"line_start":777,"line_end":777,"column_start":20,"column_end":26},"kind":"Impl","from":{"krate":0,"index":17076},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1109577,"byte_end":1109583,"line_start":797,"line_end":797,"column_start":18,"column_end":24},"kind":"Impl","from":{"krate":0,"index":17076},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1111249,"byte_end":1111255,"line_start":848,"line_end":848,"column_start":21,"column_end":27},"kind":"Impl","from":{"krate":0,"index":17076},"to":{"krate":0,"index":1197}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1111454,"byte_end":1111460,"line_start":857,"line_end":857,"column_start":26,"column_end":32},"kind":"Impl","from":{"krate":0,"index":17076},"to":{"krate":0,"index":1818}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1112529,"byte_end":1112535,"line_start":901,"line_end":901,"column_start":21,"column_end":27},"kind":"Impl","from":{"krate":0,"index":17076},"to":{"krate":0,"index":1210}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1112868,"byte_end":1112872,"line_start":916,"line_end":916,"column_start":22,"column_end":26},"kind":"Impl","from":{"krate":0,"index":17097},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1113194,"byte_end":1113198,"line_start":933,"line_end":933,"column_start":33,"column_end":37},"kind":"Impl","from":{"krate":0,"index":17097},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1113324,"byte_end":1113328,"line_start":940,"line_end":940,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":17097},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1113361,"byte_end":1113365,"line_start":941,"line_end":941,"column_start":27,"column_end":31},"kind":"Impl","from":{"krate":0,"index":17097},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1113402,"byte_end":1113406,"line_start":942,"line_end":942,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":17097},"to":{"krate":0,"index":1860}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1113960,"byte_end":1113964,"line_start":958,"line_end":958,"column_start":26,"column_end":30},"kind":"Impl","from":{"krate":0,"index":17102},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1114250,"byte_end":1114254,"line_start":968,"line_end":968,"column_start":37,"column_end":41},"kind":"Impl","from":{"krate":0,"index":17102},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1114433,"byte_end":1114437,"line_start":974,"line_end":974,"column_start":35,"column_end":39},"kind":"Impl","from":{"krate":0,"index":17102},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1114527,"byte_end":1114531,"line_start":977,"line_end":977,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":17102},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1114631,"byte_end":1114635,"line_start":980,"line_end":980,"column_start":35,"column_end":39},"kind":"Impl","from":{"krate":0,"index":17102},"to":{"krate":0,"index":1860}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1114715,"byte_end":1114719,"line_start":983,"line_end":983,"column_start":23,"column_end":27},"kind":"Impl","from":{"krate":0,"index":17102},"to":{"krate":0,"index":1191}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1115391,"byte_end":1115398,"line_start":1003,"line_end":1003,"column_start":26,"column_end":33},"kind":"Impl","from":{"krate":0,"index":17105},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1115692,"byte_end":1115699,"line_start":1013,"line_end":1013,"column_start":37,"column_end":44},"kind":"Impl","from":{"krate":0,"index":17105},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1115882,"byte_end":1115889,"line_start":1019,"line_end":1019,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":17105},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1115979,"byte_end":1115986,"line_start":1022,"line_end":1022,"column_start":31,"column_end":38},"kind":"Impl","from":{"krate":0,"index":17105},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1116085,"byte_end":1116092,"line_start":1024,"line_end":1024,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":17105},"to":{"krate":0,"index":1860}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1116654,"byte_end":1116662,"line_start":1040,"line_end":1040,"column_start":22,"column_end":30},"kind":"Impl","from":{"krate":0,"index":17108},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1116932,"byte_end":1116940,"line_start":1050,"line_end":1050,"column_start":33,"column_end":41},"kind":"Impl","from":{"krate":0,"index":17108},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1117107,"byte_end":1117115,"line_start":1056,"line_end":1056,"column_start":31,"column_end":39},"kind":"Impl","from":{"krate":0,"index":17108},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1117197,"byte_end":1117205,"line_start":1059,"line_end":1059,"column_start":27,"column_end":35},"kind":"Impl","from":{"krate":0,"index":17108},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1117297,"byte_end":1117305,"line_start":1062,"line_end":1062,"column_start":31,"column_end":39},"kind":"Impl","from":{"krate":0,"index":17108},"to":{"krate":0,"index":1860}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1117588,"byte_end":1117594,"line_start":1069,"line_end":1069,"column_start":57,"column_end":63},"kind":"Impl","from":{"krate":0,"index":17076},"to":{"krate":0,"index":1816}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1118691,"byte_end":1118698,"line_start":1100,"line_end":1100,"column_start":62,"column_end":69},"kind":"Impl","from":{"krate":0,"index":2210},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,111,112,116,105,111,110,46,114,115],"byte_start":1119960,"byte_end":1119966,"line_start":1136,"line_end":1136,"column_start":22,"column_end":28},"kind":"Impl","from":{"krate":0,"index":17076},"to":{"krate":0,"index":1021}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1132438,"byte_end":1132444,"line_start":270,"line_end":270,"column_start":12,"column_end":18},"kind":"Impl","from":{"krate":0,"index":17133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1146393,"byte_end":1146399,"line_start":743,"line_end":743,"column_start":24,"column_end":30},"kind":"Impl","from":{"krate":0,"index":17133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1148100,"byte_end":1148106,"line_start":804,"line_end":804,"column_start":24,"column_end":30},"kind":"Impl","from":{"krate":0,"index":17133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1149793,"byte_end":1149799,"line_start":864,"line_end":864,"column_start":21,"column_end":27},"kind":"Impl","from":{"krate":0,"index":17133},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1151542,"byte_end":1151548,"line_start":914,"line_end":914,"column_start":29,"column_end":35},"kind":"Impl","from":{"krate":0,"index":17133},"to":{"krate":0,"index":1818}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1153429,"byte_end":1153433,"line_start":981,"line_end":981,"column_start":26,"column_end":30},"kind":"Impl","from":{"krate":0,"index":17154},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1153775,"byte_end":1153779,"line_start":994,"line_end":994,"column_start":37,"column_end":41},"kind":"Impl","from":{"krate":0,"index":17154},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1153953,"byte_end":1153957,"line_start":1000,"line_end":1000,"column_start":35,"column_end":39},"kind":"Impl","from":{"krate":0,"index":17154},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1154047,"byte_end":1154051,"line_start":1003,"line_end":1003,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":17154},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1154151,"byte_end":1154155,"line_start":1006,"line_end":1006,"column_start":35,"column_end":39},"kind":"Impl","from":{"krate":0,"index":17154},"to":{"krate":0,"index":1860}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1154235,"byte_end":1154239,"line_start":1009,"line_end":1009,"column_start":23,"column_end":27},"kind":"Impl","from":{"krate":0,"index":17154},"to":{"krate":0,"index":1191}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1154769,"byte_end":1154776,"line_start":1025,"line_end":1025,"column_start":26,"column_end":33},"kind":"Impl","from":{"krate":0,"index":17157},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1155126,"byte_end":1155133,"line_start":1038,"line_end":1038,"column_start":37,"column_end":44},"kind":"Impl","from":{"krate":0,"index":17157},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1155311,"byte_end":1155318,"line_start":1044,"line_end":1044,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":17157},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1155408,"byte_end":1155415,"line_start":1047,"line_end":1047,"column_start":31,"column_end":38},"kind":"Impl","from":{"krate":0,"index":17157},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1155515,"byte_end":1155522,"line_start":1050,"line_end":1050,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":17157},"to":{"krate":0,"index":1860}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1156193,"byte_end":1156201,"line_start":1068,"line_end":1068,"column_start":22,"column_end":30},"kind":"Impl","from":{"krate":0,"index":17160},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1156527,"byte_end":1156535,"line_start":1081,"line_end":1081,"column_start":33,"column_end":41},"kind":"Impl","from":{"krate":0,"index":17160},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1156697,"byte_end":1156705,"line_start":1087,"line_end":1087,"column_start":31,"column_end":39},"kind":"Impl","from":{"krate":0,"index":17160},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1156787,"byte_end":1156795,"line_start":1090,"line_end":1090,"column_start":27,"column_end":35},"kind":"Impl","from":{"krate":0,"index":17160},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1156887,"byte_end":1156895,"line_start":1093,"line_end":1093,"column_start":31,"column_end":39},"kind":"Impl","from":{"krate":0,"index":17160},"to":{"krate":0,"index":1860}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1157184,"byte_end":1157190,"line_start":1100,"line_end":1100,"column_start":63,"column_end":69},"kind":"Impl","from":{"krate":0,"index":17133},"to":{"krate":0,"index":1816}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1158147,"byte_end":1158154,"line_start":1125,"line_end":1125,"column_start":68,"column_end":75},"kind":"Impl","from":{"krate":0,"index":2297},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,114,101,115,117,108,116,46,114,115],"byte_start":1159046,"byte_end":1159052,"line_start":1157,"line_end":1157,"column_start":24,"column_end":30},"kind":"Impl","from":{"krate":0,"index":17133},"to":{"krate":0,"index":1021}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,114,111,116,97,116,101,46,114,115],"byte_start":1239953,"byte_end":1239961,"line_start":28,"line_end":28,"column_start":9,"column_end":17},"kind":"Impl","from":{"krate":0,"index":2343},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,115,111,114,116,46,114,115],"byte_start":1243393,"byte_end":1243403,"line_start":29,"line_end":29,"column_start":18,"column_end":28},"kind":"Impl","from":{"krate":0,"index":2353},"to":{"krate":0,"index":943}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1184509,"byte_end":1184514,"line_start":837,"line_end":837,"column_start":35,"column_end":40},"kind":"Impl","from":{"krate":0,"index":14332},"to":{"krate":0,"index":2483}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1186210,"byte_end":1186217,"line_start":898,"line_end":898,"column_start":34,"column_end":41},"kind":"Impl","from":{"krate":0,"index":14352},"to":{"krate":0,"index":2483}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1187039,"byte_end":1187048,"line_start":933,"line_end":933,"column_start":34,"column_end":43},"kind":"Impl","from":{"krate":0,"index":14342},"to":{"krate":0,"index":2483}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1187942,"byte_end":1187951,"line_start":968,"line_end":968,"column_start":34,"column_end":43},"kind":"Impl","from":{"krate":0,"index":14322},"to":{"krate":0,"index":2483}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1188664,"byte_end":1188678,"line_start":1004,"line_end":1004,"column_start":34,"column_end":48},"kind":"Impl","from":{"krate":0,"index":14363},"to":{"krate":0,"index":2483}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1189951,"byte_end":1189967,"line_start":1045,"line_end":1045,"column_start":34,"column_end":50},"kind":"Impl","from":{"krate":0,"index":14373},"to":{"krate":0,"index":2483}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1200551,"byte_end":1200555,"line_start":1378,"line_end":1378,"column_start":45,"column_end":49},"kind":"Impl","from":{"krate":0,"index":2565},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1200802,"byte_end":1200806,"line_start":1387,"line_end":1387,"column_start":35,"column_end":39},"kind":"Impl","from":{"krate":0,"index":2565},"to":{"krate":0,"index":822}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1200897,"byte_end":1200901,"line_start":1389,"line_end":1389,"column_start":35,"column_end":39},"kind":"Impl","from":{"krate":0,"index":2565},"to":{"krate":0,"index":815}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1200925,"byte_end":1200929,"line_start":1391,"line_end":1391,"column_start":13,"column_end":17},"kind":"Impl","from":{"krate":0,"index":2565},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1202459,"byte_end":1202463,"line_start":1439,"line_end":1439,"column_start":35,"column_end":39},"kind":"Impl","from":{"krate":0,"index":2565},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1202622,"byte_end":1202626,"line_start":1446,"line_end":1446,"column_start":31,"column_end":35},"kind":"Impl","from":{"krate":0,"index":2565},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1202726,"byte_end":1202730,"line_start":1449,"line_end":1449,"column_start":35,"column_end":39},"kind":"Impl","from":{"krate":0,"index":2565},"to":{"krate":0,"index":1860}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1202810,"byte_end":1202814,"line_start":1452,"line_end":1452,"column_start":23,"column_end":27},"kind":"Impl","from":{"krate":0,"index":2565},"to":{"krate":0,"index":1191}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1203013,"byte_end":1203017,"line_start":1457,"line_end":1457,"column_start":28,"column_end":32},"kind":"Impl","from":{"krate":0,"index":2565},"to":{"krate":0,"index":1204}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1203974,"byte_end":1203981,"line_start":1495,"line_end":1495,"column_start":45,"column_end":52},"kind":"Impl","from":{"krate":0,"index":2581},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1204247,"byte_end":1204254,"line_start":1504,"line_end":1504,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":2581},"to":{"krate":0,"index":822}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1204345,"byte_end":1204352,"line_start":1506,"line_end":1506,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":2581},"to":{"krate":0,"index":815}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1204376,"byte_end":1204383,"line_start":1508,"line_end":1508,"column_start":13,"column_end":20},"kind":"Impl","from":{"krate":0,"index":2581},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1206417,"byte_end":1206424,"line_start":1567,"line_end":1567,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":2581},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1206583,"byte_end":1206590,"line_start":1574,"line_end":1574,"column_start":31,"column_end":38},"kind":"Impl","from":{"krate":0,"index":2581},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1206690,"byte_end":1206697,"line_start":1577,"line_end":1577,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":2581},"to":{"krate":0,"index":1860}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1207123,"byte_end":1207127,"line_start":1591,"line_end":1591,"column_start":20,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":821},"to":{"krate":0,"index":2594}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1208030,"byte_end":1208049,"line_start":1627,"line_end":1627,"column_start":18,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":1828},"to":{"krate":0,"index":2602}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1208734,"byte_end":1208739,"line_start":1648,"line_end":1648,"column_start":48,"column_end":53},"kind":"Impl","from":{"krate":0,"index":2604},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1209107,"byte_end":1209112,"line_start":1659,"line_end":1659,"column_start":26,"column_end":31},"kind":"Impl","from":{"krate":0,"index":2604},"to":{"krate":0,"index":1191}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1209407,"byte_end":1209412,"line_start":1670,"line_end":1670,"column_start":29,"column_end":34},"kind":"Impl","from":{"krate":0,"index":2604},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210123,"byte_end":1210128,"line_start":1698,"line_end":1698,"column_start":40,"column_end":45},"kind":"Impl","from":{"krate":0,"index":2604},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210571,"byte_end":1210576,"line_start":1714,"line_end":1714,"column_start":30,"column_end":35},"kind":"Impl","from":{"krate":0,"index":2604},"to":{"krate":0,"index":2602}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1210844,"byte_end":1210849,"line_start":1722,"line_end":1722,"column_start":34,"column_end":39},"kind":"Impl","from":{"krate":0,"index":2604},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1211449,"byte_end":1211457,"line_start":1739,"line_end":1739,"column_start":48,"column_end":56},"kind":"Impl","from":{"krate":0,"index":2618},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1211731,"byte_end":1211739,"line_start":1748,"line_end":1748,"column_start":30,"column_end":38},"kind":"Impl","from":{"krate":0,"index":2618},"to":{"krate":0,"index":2602}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1212084,"byte_end":1212092,"line_start":1761,"line_end":1761,"column_start":29,"column_end":37},"kind":"Impl","from":{"krate":0,"index":2618},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1213160,"byte_end":1213168,"line_start":1796,"line_end":1796,"column_start":40,"column_end":48},"kind":"Impl","from":{"krate":0,"index":2618},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1213873,"byte_end":1213881,"line_start":1820,"line_end":1820,"column_start":34,"column_end":42},"kind":"Impl","from":{"krate":0,"index":2618},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1214555,"byte_end":1214561,"line_start":1836,"line_end":1836,"column_start":48,"column_end":54},"kind":"Impl","from":{"krate":0,"index":17201},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1214899,"byte_end":1214905,"line_start":1846,"line_end":1846,"column_start":29,"column_end":35},"kind":"Impl","from":{"krate":0,"index":17201},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1215267,"byte_end":1215273,"line_start":1861,"line_end":1861,"column_start":40,"column_end":46},"kind":"Impl","from":{"krate":0,"index":17201},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1215495,"byte_end":1215501,"line_start":1869,"line_end":1869,"column_start":30,"column_end":36},"kind":"Impl","from":{"krate":0,"index":17201},"to":{"krate":0,"index":2602}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1215776,"byte_end":1215782,"line_start":1878,"line_end":1878,"column_start":34,"column_end":40},"kind":"Impl","from":{"krate":0,"index":17201},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1216408,"byte_end":1216417,"line_start":1893,"line_end":1893,"column_start":48,"column_end":57},"kind":"Impl","from":{"krate":0,"index":2641},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1216759,"byte_end":1216768,"line_start":1903,"line_end":1903,"column_start":30,"column_end":39},"kind":"Impl","from":{"krate":0,"index":2641},"to":{"krate":0,"index":2602}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1216992,"byte_end":1217001,"line_start":1911,"line_end":1911,"column_start":29,"column_end":38},"kind":"Impl","from":{"krate":0,"index":2641},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1217371,"byte_end":1217380,"line_start":1926,"line_end":1926,"column_start":40,"column_end":49},"kind":"Impl","from":{"krate":0,"index":2641},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1217665,"byte_end":1217674,"line_start":1937,"line_end":1937,"column_start":34,"column_end":43},"kind":"Impl","from":{"krate":0,"index":2641},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1217981,"byte_end":1217994,"line_start":1948,"line_end":1948,"column_start":44,"column_end":57},"kind":"Impl","from":{"krate":0,"index":17204},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1219011,"byte_end":1219017,"line_start":1980,"line_end":1980,"column_start":48,"column_end":54},"kind":"Impl","from":{"krate":0,"index":2657},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1219827,"byte_end":1219834,"line_start":2002,"line_end":2002,"column_start":48,"column_end":55},"kind":"Impl","from":{"krate":0,"index":2660},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1220618,"byte_end":1220627,"line_start":2023,"line_end":2023,"column_start":48,"column_end":57},"kind":"Impl","from":{"krate":0,"index":2663},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1221458,"byte_end":1221468,"line_start":2045,"line_end":2045,"column_start":48,"column_end":58},"kind":"Impl","from":{"krate":0,"index":2666},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1223073,"byte_end":1223080,"line_start":2098,"line_end":2098,"column_start":23,"column_end":30},"kind":"Impl","from":{"krate":0,"index":17227},"to":{"krate":0,"index":1191}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1223290,"byte_end":1223297,"line_start":2108,"line_end":2108,"column_start":26,"column_end":33},"kind":"Impl","from":{"krate":0,"index":17227},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1224561,"byte_end":1224568,"line_start":2162,"line_end":2162,"column_start":37,"column_end":44},"kind":"Impl","from":{"krate":0,"index":17227},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1224939,"byte_end":1224946,"line_start":2176,"line_end":2176,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":17227},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1225036,"byte_end":1225043,"line_start":2179,"line_end":2179,"column_start":31,"column_end":38},"kind":"Impl","from":{"krate":0,"index":17227},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1225702,"byte_end":1225708,"line_start":2200,"line_end":2200,"column_start":23,"column_end":29},"kind":"Impl","from":{"krate":0,"index":17230},"to":{"krate":0,"index":1191}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1225916,"byte_end":1225922,"line_start":2210,"line_end":2210,"column_start":26,"column_end":32},"kind":"Impl","from":{"krate":0,"index":17230},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1227511,"byte_end":1227517,"line_start":2271,"line_end":2271,"column_start":37,"column_end":43},"kind":"Impl","from":{"krate":0,"index":17230},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1228004,"byte_end":1228010,"line_start":2287,"line_end":2287,"column_start":35,"column_end":41},"kind":"Impl","from":{"krate":0,"index":17230},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1228100,"byte_end":1228106,"line_start":2290,"line_end":2290,"column_start":31,"column_end":37},"kind":"Impl","from":{"krate":0,"index":17230},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1228738,"byte_end":1228747,"line_start":2308,"line_end":2308,"column_start":26,"column_end":35},"kind":"Impl","from":{"krate":0,"index":17233},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1230563,"byte_end":1230572,"line_start":2372,"line_end":2372,"column_start":37,"column_end":46},"kind":"Impl","from":{"krate":0,"index":17233},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1231160,"byte_end":1231169,"line_start":2390,"line_end":2390,"column_start":35,"column_end":44},"kind":"Impl","from":{"krate":0,"index":17233},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1231259,"byte_end":1231268,"line_start":2393,"line_end":2393,"column_start":31,"column_end":40},"kind":"Impl","from":{"krate":0,"index":17233},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1238453,"byte_end":1238457,"line_start":2653,"line_end":2653,"column_start":44,"column_end":48},"kind":"Impl","from":{"krate":0,"index":2565},"to":{"krate":0,"index":3552}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,108,105,99,101,47,109,111,100,46,114,115],"byte_start":1238680,"byte_end":1238687,"line_start":2661,"line_end":2661,"column_start":44,"column_end":51},"kind":"Impl","from":{"krate":0,"index":2581},"to":{"krate":0,"index":3552}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1350467,"byte_end":1350472,"line_start":37,"line_end":37,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":819},"to":{"krate":0,"index":2768}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1355170,"byte_end":1355178,"line_start":168,"line_end":168,"column_start":39,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":2774},"to":{"krate":0,"index":2779}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1357764,"byte_end":1357779,"line_start":235,"line_end":235,"column_start":36,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":2779},"to":{"krate":0,"index":2783}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1358275,"byte_end":1358276,"line_start":255,"line_end":255,"column_start":20,"column_end":21},"kind":"Impl","from":{"krate":0,"index":2147485339},"to":{"krate":0,"index":2784}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1358970,"byte_end":1358983,"line_start":286,"line_end":286,"column_start":37,"column_end":50},"kind":"Impl","from":{"krate":0,"index":2796},"to":{"krate":0,"index":2768}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1359355,"byte_end":1359369,"line_start":300,"line_end":300,"column_start":45,"column_end":59},"kind":"Impl","from":{"krate":0,"index":17259},"to":{"krate":0,"index":2774}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1360111,"byte_end":1360125,"line_start":325,"line_end":325,"column_start":52,"column_end":66},"kind":"Impl","from":{"krate":0,"index":17259},"to":{"krate":0,"index":2779}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1360795,"byte_end":1360809,"line_start":345,"line_end":345,"column_start":49,"column_end":63},"kind":"Impl","from":{"krate":0,"index":17259},"to":{"krate":0,"index":2783}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1362886,"byte_end":1362898,"line_start":420,"line_end":420,"column_start":34,"column_end":46},"kind":"Impl","from":{"krate":0,"index":17264},"to":{"krate":0,"index":2774}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1362980,"byte_end":1362992,"line_start":424,"line_end":424,"column_start":41,"column_end":53},"kind":"Impl","from":{"krate":0,"index":17264},"to":{"krate":0,"index":2779}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1363071,"byte_end":1363083,"line_start":428,"line_end":428,"column_start":38,"column_end":50},"kind":"Impl","from":{"krate":0,"index":17264},"to":{"krate":0,"index":2783}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1364422,"byte_end":1364439,"line_start":471,"line_end":471,"column_start":38,"column_end":55},"kind":"Impl","from":{"krate":0,"index":17276},"to":{"krate":0,"index":2774}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1364529,"byte_end":1364546,"line_start":475,"line_end":475,"column_start":45,"column_end":62},"kind":"Impl","from":{"krate":0,"index":17276},"to":{"krate":0,"index":2779}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1364633,"byte_end":1364650,"line_start":479,"line_end":479,"column_start":42,"column_end":59},"kind":"Impl","from":{"krate":0,"index":17276},"to":{"krate":0,"index":2783}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1365274,"byte_end":1365295,"line_start":495,"line_end":495,"column_start":28,"column_end":49},"kind":"Impl","from":{"krate":0,"index":17293},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1365670,"byte_end":1365691,"line_start":506,"line_end":506,"column_start":37,"column_end":58},"kind":"Impl","from":{"krate":0,"index":17293},"to":{"krate":0,"index":2774}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1365812,"byte_end":1365833,"line_start":512,"line_end":512,"column_start":44,"column_end":65},"kind":"Impl","from":{"krate":0,"index":17293},"to":{"krate":0,"index":2779}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1365951,"byte_end":1365972,"line_start":518,"line_end":518,"column_start":41,"column_end":62},"kind":"Impl","from":{"krate":0,"index":17293},"to":{"krate":0,"index":2783}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1366099,"byte_end":1366100,"line_start":522,"line_end":522,"column_start":29,"column_end":30},"kind":"Impl","from":{"krate":0,"index":2147485375},"to":{"krate":0,"index":2768}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1368253,"byte_end":1368264,"line_start":595,"line_end":595,"column_start":14,"column_end":25},"kind":"Impl","from":{"krate":0,"index":17313},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1369011,"byte_end":1369022,"line_start":620,"line_end":620,"column_start":38,"column_end":49},"kind":"Impl","from":{"krate":0,"index":17313},"to":{"krate":0,"index":2774}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1372502,"byte_end":1372513,"line_start":701,"line_end":701,"column_start":45,"column_end":56},"kind":"Impl","from":{"krate":0,"index":17313},"to":{"krate":0,"index":2779}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1379420,"byte_end":1379434,"line_start":866,"line_end":866,"column_start":6,"column_end":20},"kind":"Impl","from":{"krate":0,"index":17328},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1393546,"byte_end":1393555,"line_start":1217,"line_end":1217,"column_start":25,"column_end":34},"kind":"Impl","from":{"krate":0,"index":2855},"to":{"krate":0,"index":2850}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,112,97,116,116,101,114,110,46,114,115],"byte_start":1393899,"byte_end":1393913,"line_start":1231,"line_end":1231,"column_start":25,"column_end":39},"kind":"Impl","from":{"krate":0,"index":2861},"to":{"krate":0,"index":2850}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1270036,"byte_end":1270041,"line_start":72,"line_end":72,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":819},"to":{"krate":0,"index":2867}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1272300,"byte_end":1272314,"line_start":145,"line_end":145,"column_start":23,"column_end":37},"kind":"Impl","from":{"krate":0,"index":17333},"to":{"krate":0,"index":3442}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1273049,"byte_end":1273058,"line_start":172,"line_end":172,"column_start":6,"column_end":15},"kind":"Impl","from":{"krate":0,"index":17343},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1281285,"byte_end":1281294,"line_start":435,"line_end":435,"column_start":23,"column_end":32},"kind":"Impl","from":{"krate":0,"index":17343},"to":{"krate":0,"index":3442}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1285177,"byte_end":1285182,"line_start":557,"line_end":557,"column_start":23,"column_end":28},"kind":"Impl","from":{"krate":0,"index":17354},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1286390,"byte_end":1286395,"line_start":598,"line_end":598,"column_start":34,"column_end":39},"kind":"Impl","from":{"krate":0,"index":17354},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1286767,"byte_end":1286772,"line_start":611,"line_end":611,"column_start":28,"column_end":33},"kind":"Impl","from":{"krate":0,"index":17354},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1286790,"byte_end":1286795,"line_start":613,"line_end":613,"column_start":10,"column_end":15},"kind":"Impl","from":{"krate":0,"index":17354},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1288051,"byte_end":1288062,"line_start":655,"line_end":655,"column_start":23,"column_end":34},"kind":"Impl","from":{"krate":0,"index":17359},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1288914,"byte_end":1288925,"line_start":690,"line_end":690,"column_start":34,"column_end":45},"kind":"Impl","from":{"krate":0,"index":17359},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1289303,"byte_end":1289314,"line_start":704,"line_end":704,"column_start":28,"column_end":39},"kind":"Impl","from":{"krate":0,"index":17359},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1289332,"byte_end":1289343,"line_start":706,"line_end":706,"column_start":10,"column_end":21},"kind":"Impl","from":{"krate":0,"index":17359},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1290148,"byte_end":1290153,"line_start":730,"line_end":730,"column_start":23,"column_end":28},"kind":"Impl","from":{"krate":0,"index":17364},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1291438,"byte_end":1291443,"line_start":791,"line_end":791,"column_start":34,"column_end":39},"kind":"Impl","from":{"krate":0,"index":17364},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1291787,"byte_end":1291792,"line_start":806,"line_end":806,"column_start":32,"column_end":37},"kind":"Impl","from":{"krate":0,"index":17364},"to":{"krate":0,"index":1834}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1292027,"byte_end":1292032,"line_start":819,"line_end":819,"column_start":28,"column_end":33},"kind":"Impl","from":{"krate":0,"index":17364},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1292126,"byte_end":1292131,"line_start":822,"line_end":822,"column_start":32,"column_end":37},"kind":"Impl","from":{"krate":0,"index":17364},"to":{"krate":0,"index":1860}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1292195,"byte_end":1292200,"line_start":825,"line_end":825,"column_start":41,"column_end":46},"kind":"Impl","from":{"krate":0,"index":17364},"to":{"krate":0,"index":3552}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1299420,"byte_end":1299433,"line_start":1034,"line_end":1034,"column_start":41,"column_end":54},"kind":"Impl","from":{"krate":0,"index":2938},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1299869,"byte_end":1299882,"line_start":1046,"line_end":1046,"column_start":26,"column_end":39},"kind":"Impl","from":{"krate":0,"index":2938},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1302950,"byte_end":1302964,"line_start":1151,"line_end":1151,"column_start":41,"column_end":55},"kind":"Impl","from":{"krate":0,"index":2945},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1303240,"byte_end":1303254,"line_start":1160,"line_end":1160,"column_start":26,"column_end":40},"kind":"Impl","from":{"krate":0,"index":2945},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1304524,"byte_end":1304544,"line_start":1207,"line_end":1207,"column_start":41,"column_end":61},"kind":"Impl","from":{"krate":0,"index":2951},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1304773,"byte_end":1304793,"line_start":1215,"line_end":1215,"column_start":26,"column_end":46},"kind":"Impl","from":{"krate":0,"index":2951},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1306071,"byte_end":1306086,"line_start":1258,"line_end":1258,"column_start":41,"column_end":56},"kind":"Impl","from":{"krate":0,"index":2957},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1306310,"byte_end":1306325,"line_start":1266,"line_end":1266,"column_start":26,"column_end":41},"kind":"Impl","from":{"krate":0,"index":2957},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1307877,"byte_end":1307882,"line_start":1316,"line_end":1316,"column_start":23,"column_end":28},"kind":"Impl","from":{"krate":0,"index":17483},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1308183,"byte_end":1308188,"line_start":1331,"line_end":1331,"column_start":34,"column_end":39},"kind":"Impl","from":{"krate":0,"index":17483},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1308369,"byte_end":1308374,"line_start":1339,"line_end":1339,"column_start":28,"column_end":33},"kind":"Impl","from":{"krate":0,"index":17483},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1308802,"byte_end":1308813,"line_start":1354,"line_end":1354,"column_start":29,"column_end":40},"kind":"Impl","from":{"krate":0,"index":17493},"to":{"krate":0,"index":946}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1309066,"byte_end":1309077,"line_start":1363,"line_end":1363,"column_start":32,"column_end":43},"kind":"Impl","from":{"krate":0,"index":17493},"to":{"krate":0,"index":948}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1309249,"byte_end":1309260,"line_start":1370,"line_end":1370,"column_start":33,"column_end":44},"kind":"Impl","from":{"krate":0,"index":17493},"to":{"krate":0,"index":950}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1309512,"byte_end":1309520,"line_start":1381,"line_end":1381,"column_start":23,"column_end":31},"kind":"Impl","from":{"krate":0,"index":17488},"to":{"krate":0,"index":1657}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1309842,"byte_end":1309850,"line_start":1397,"line_end":1397,"column_start":34,"column_end":42},"kind":"Impl","from":{"krate":0,"index":17488},"to":{"krate":0,"index":1828}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1310052,"byte_end":1310060,"line_start":1406,"line_end":1406,"column_start":28,"column_end":36},"kind":"Impl","from":{"krate":0,"index":17488},"to":{"krate":0,"index":1858}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1324329,"byte_end":1324338,"line_start":1824,"line_end":1824,"column_start":35,"column_end":44},"kind":"Impl","from":{"krate":0,"index":14322},"to":{"krate":0,"index":2483}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1325170,"byte_end":1325175,"line_start":1853,"line_end":1853,"column_start":35,"column_end":40},"kind":"Impl","from":{"krate":0,"index":14332},"to":{"krate":0,"index":2483}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1327389,"byte_end":1327396,"line_start":1907,"line_end":1907,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":14352},"to":{"krate":0,"index":2483}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1329090,"byte_end":1329099,"line_start":1952,"line_end":1952,"column_start":35,"column_end":44},"kind":"Impl","from":{"krate":0,"index":14342},"to":{"krate":0,"index":2483}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1330983,"byte_end":1330997,"line_start":1999,"line_end":1999,"column_start":35,"column_end":49},"kind":"Impl","from":{"krate":0,"index":14363},"to":{"krate":0,"index":2483}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,115,116,114,47,109,111,100,46,114,115],"byte_start":1332492,"byte_end":1332508,"line_start":2042,"line_end":2042,"column_start":35,"column_end":51},"kind":"Impl","from":{"krate":0,"index":14373},"to":{"krate":0,"index":2483}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1419455,"byte_end":1419464,"line_start":143,"line_end":143,"column_start":6,"column_end":15},"kind":"Impl","from":{"krate":0,"index":17510},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1420210,"byte_end":1420221,"line_start":163,"line_end":163,"column_start":6,"column_end":17},"kind":"Impl","from":{"krate":0,"index":17496},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1421021,"byte_end":1421032,"line_start":185,"line_end":185,"column_start":6,"column_end":17},"kind":"Impl","from":{"krate":0,"index":17503},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1421840,"byte_end":1421846,"line_start":207,"line_end":207,"column_start":14,"column_end":20},"kind":"Impl","from":{"krate":0,"index":17517},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1423936,"byte_end":1423945,"line_start":271,"line_end":271,"column_start":24,"column_end":33},"kind":"Impl","from":{"krate":0,"index":17510},"to":{"krate":0,"index":3231}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1424187,"byte_end":1424198,"line_start":284,"line_end":284,"column_start":24,"column_end":35},"kind":"Impl","from":{"krate":0,"index":17496},"to":{"krate":0,"index":3231}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1424450,"byte_end":1424461,"line_start":297,"line_end":297,"column_start":24,"column_end":35},"kind":"Impl","from":{"krate":0,"index":17503},"to":{"krate":0,"index":3231}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1424667,"byte_end":1424673,"line_start":309,"line_end":309,"column_start":32,"column_end":38},"kind":"Impl","from":{"krate":0,"index":17517},"to":{"krate":0,"index":3231}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1426557,"byte_end":1426563,"line_start":382,"line_end":382,"column_start":24,"column_end":30},"kind":"Impl","from":{"krate":0,"index":17517},"to":{"krate":0,"index":1191}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1426888,"byte_end":1426894,"line_start":397,"line_end":397,"column_start":26,"column_end":32},"kind":"Impl","from":{"krate":0,"index":17517},"to":{"krate":0,"index":1197}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1427218,"byte_end":1427229,"line_start":414,"line_end":414,"column_start":14,"column_end":25},"kind":"Impl","from":{"krate":0,"index":17526},"to":{"krate":0,"index":3219}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,115,105,112,46,114,115],"byte_start":1427521,"byte_end":1427532,"line_start":431,"line_end":431,"column_start":14,"column_end":25},"kind":"Impl","from":{"krate":0,"index":17533},"to":{"krate":0,"index":3219}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1409147,"byte_end":1409165,"line_start":515,"line_end":515,"column_start":24,"column_end":42},"kind":"Impl","from":{"krate":0,"index":3264},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1409370,"byte_end":1409388,"line_start":522,"line_end":522,"column_start":43,"column_end":61},"kind":"Impl","from":{"krate":0,"index":3264},"to":{"krate":0,"index":3261}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1409551,"byte_end":1409569,"line_start":531,"line_end":531,"column_start":19,"column_end":37},"kind":"Impl","from":{"krate":0,"index":3264},"to":{"krate":0,"index":1191}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,104,97,115,104,47,109,111,100,46,114,115],"byte_start":1409752,"byte_end":1409770,"line_start":538,"line_end":538,"column_start":21,"column_end":39},"kind":"Impl","from":{"krate":0,"index":3264},"to":{"krate":0,"index":1197}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1488413,"byte_end":1488422,"line_start":24,"line_end":24,"column_start":12,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":1097},"to":{"krate":0,"index":3338}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1488425,"byte_end":1488435,"line_start":24,"line_end":24,"column_start":24,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":1124},"to":{"krate":0,"index":3338}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1488438,"byte_end":1488441,"line_start":24,"line_end":24,"column_start":37,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":853},"to":{"krate":0,"index":3338}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1488457,"byte_end":1488460,"line_start":24,"line_end":24,"column_start":56,"column_end":59},"kind":"SuperTrait","from":{"krate":0,"index":858},"to":{"krate":0,"index":3338}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1488487,"byte_end":1488490,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"kind":"SuperTrait","from":{"krate":0,"index":845},"to":{"krate":0,"index":3338}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,110,117,109,46,114,115],"byte_start":1488506,"byte_end":1488510,"line_start":25,"line_end":25,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":821},"to":{"krate":0,"index":3338}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1497706,"byte_end":1497716,"line_start":18,"line_end":18,"column_start":18,"column_end":28},"kind":"Impl","from":{"krate":0,"index":3360},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1497915,"byte_end":1497925,"line_start":27,"line_end":27,"column_start":33,"column_end":43},"kind":"Impl","from":{"krate":0,"index":3360},"to":{"krate":0,"index":3410}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1499918,"byte_end":1499929,"line_start":103,"line_end":103,"column_start":18,"column_end":29},"kind":"Impl","from":{"krate":0,"index":3365},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1502536,"byte_end":1502546,"line_start":195,"line_end":195,"column_start":18,"column_end":28},"kind":"Impl","from":{"krate":0,"index":3371},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1504058,"byte_end":1504068,"line_start":246,"line_end":246,"column_start":18,"column_end":28},"kind":"Impl","from":{"krate":0,"index":3377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1506213,"byte_end":1506221,"line_start":327,"line_end":327,"column_start":18,"column_end":26},"kind":"Impl","from":{"krate":0,"index":3382},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1508240,"byte_end":1508249,"line_start":398,"line_end":398,"column_start":18,"column_end":27},"kind":"Impl","from":{"krate":0,"index":3388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,98,117,105,108,100,101,114,115,46,114,115],"byte_start":1510346,"byte_end":1510354,"line_start":469,"line_end":469,"column_start":18,"column_end":26},"kind":"Impl","from":{"krate":0,"index":3394},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1434303,"byte_end":1434310,"line_start":207,"line_end":207,"column_start":39,"column_end":46},"kind":"Impl","from":{"krate":0,"index":3414},"to":{"krate":0,"index":3410}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1436543,"byte_end":1436553,"line_start":282,"line_end":282,"column_start":20,"column_end":30},"kind":"Impl","from":{"krate":0,"index":17948},"to":{"krate":0,"index":1191}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1436632,"byte_end":1436642,"line_start":288,"line_end":288,"column_start":10,"column_end":20},"kind":"Impl","from":{"krate":0,"index":17948},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1437784,"byte_end":1437793,"line_start":327,"line_end":327,"column_start":10,"column_end":19},"kind":"Impl","from":{"krate":0,"index":17954},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1441369,"byte_end":1441378,"line_start":416,"line_end":416,"column_start":20,"column_end":29},"kind":"Impl","from":{"krate":0,"index":17954},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1441544,"byte_end":1441553,"line_start":423,"line_end":423,"column_start":22,"column_end":31},"kind":"Impl","from":{"krate":0,"index":17954},"to":{"krate":0,"index":3442}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1455985,"byte_end":1455994,"line_start":988,"line_end":988,"column_start":10,"column_end":19},"kind":"Impl","from":{"krate":0,"index":3423},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1473428,"byte_end":1473437,"line_start":1458,"line_end":1458,"column_start":20,"column_end":29},"kind":"Impl","from":{"krate":0,"index":3423},"to":{"krate":0,"index":3410}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1473777,"byte_end":1473782,"line_start":1473,"line_end":1473,"column_start":18,"column_end":23},"kind":"Impl","from":{"krate":0,"index":17930},"to":{"krate":0,"index":3442}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1479626,"byte_end":1479637,"line_start":1681,"line_end":1681,"column_start":27,"column_end":38},"kind":"Impl","from":{"krate":0,"index":827},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1479808,"byte_end":1479812,"line_start":1688,"line_end":1688,"column_start":33,"column_end":37},"kind":"Impl","from":{"krate":0,"index":1371},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1480050,"byte_end":1480057,"line_start":1697,"line_end":1697,"column_start":35,"column_end":42},"kind":"Impl","from":{"krate":0,"index":1404},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1480539,"byte_end":1480558,"line_start":1710,"line_end":1710,"column_start":32,"column_end":51},"kind":"Impl","from":{"krate":0,"index":3533},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1480964,"byte_end":1480967,"line_start":1725,"line_end":1725,"column_start":39,"column_end":42},"kind":"Impl","from":{"krate":0,"index":1457},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1481150,"byte_end":1481156,"line_start":1732,"line_end":1732,"column_start":39,"column_end":45},"kind":"Impl","from":{"krate":0,"index":1474},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,102,109,116,47,109,111,100,46,114,115],"byte_start":1481354,"byte_end":1481364,"line_start":1739,"line_end":1739,"column_start":35,"column_end":45},"kind":"Impl","from":{"krate":0,"index":1483},"to":{"krate":0,"index":3440}},{"span":{"file_name":[115,114,99,47,108,105,98,99,111,114,101,47,105,116,101,114,95,112,114,105,118,97,116,101,46,114,115],"byte_start":1526507,"byte_end":1526524,"line_start":23,"line_end":23,"column_start":40,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":1834},"to":{"krate":0,"index":3552}}]}